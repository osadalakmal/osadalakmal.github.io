<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Curiously Recurring Thoughts in Programming</title>
        <link>https://osadalakmal.github.io/</link>
        <description>Recent content on Curiously Recurring Thoughts in Programming</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Mon, 07 Nov 2022 15:31:29 +0530</lastBuildDate><atom:link href="https://osadalakmal.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Getting lost in weeds of Podman</title>
        <link>https://osadalakmal.github.io/posts/getting-lost-in-weeds-of-podman/</link>
        <pubDate>Mon, 07 Nov 2022 15:31:29 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/getting-lost-in-weeds-of-podman/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/img/podman-logo-full-vert.png" alt="Featured image of post Getting lost in weeds of Podman" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#what-are-rootless-containers&#34;&gt;What are rootless containers&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#my-use-case-for-rootless-containers&#34;&gt;My use case for rootless containers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#but-i-dont-have-docker&#34;&gt;But I don&amp;rsquo;t have docker&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#adding-finishing-touches&#34;&gt;Adding finishing touches&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-preamble-becomes-the-main-act&#34;&gt;The preamble becomes the main act&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Podman is a tool developed by Redhat that is intended to replace docker at the command line level. It has full compatibility with docker CLI. At least this is true on Linux. Like docker it is written in golang and is quite performant. But unlike docker it does not have a lot of legacy warts, compatibility issues and quirks. It also has better integration with other tools in anything-but-docker space including buildah and skopeo&lt;/p&gt;
&lt;h2 id=&#34;what-are-rootless-containers&#34;&gt;What are rootless containers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/rootless-containers.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;How Rootless Containers Work&#34;
	
	
&gt;&lt;br&gt;
&lt;br&gt;
A big selling point of using podman is that you will be able to run rootless containers. This means that the full virtualized container runs as the non-root user that you are logged in as usually. This is important in various aspects. One is that on shared servers where you just don&amp;rsquo;t get to have root, you can still get containers running. Also even on a machine where it is possible to become root for running docker containers, it is good in security point of view to be running as a non-privileged user.&lt;/p&gt;
&lt;p&gt;At a more technical level the issue is bugs that enable malicious code to breakout of the virtualization env on to the host. And if it is able to exploit such a bug the attacker suddenly has root access to the host system. Now there are ways to mitigate those risks such as&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Specifying the USER for each of the Docker CMDs&lt;/li&gt;
&lt;li&gt;Specifying the USER for the docker RUN command on the command line&lt;/li&gt;
&lt;li&gt;Using a supervisor framework such as &lt;a class=&#34;link&#34; href=&#34;https://github.com/just-containers/s6-overlay&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;s6&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://gdevillele.github.io/engine/admin/using_supervisord/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;supervisord&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But again, these are mitigating measures and not a solution to the underlying issue of running containers as the root user. rootless containers address the root cause by allowing you to run containers as a non privileged user. This means that even if there were to be a breakout, the attacker still would need a privilege escalation bug on the host env to be effective at attacking the host system&lt;/p&gt;
&lt;h3 id=&#34;my-use-case-for-rootless-containers&#34;&gt;My use case for rootless containers&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;
A friend had asked me for advice on best practices in FTPing files around. Now the best advice that I can give is not to FTP files around in 2022 anymore and there are much better data transfer mechanisms out there. But if you had to do it, there are ways to take most of the pain out of it such as using checksums and delta encoding and so on. While I was thinking of writing a blog post on those practices, I needed to write some test code. To test out this code, I needed a FTP server. Now I would rather not put any server on my primary workstation that need not be there and this meant I had to do this inside a docker container.&lt;/p&gt;
&lt;h3 id=&#34;but-i-dont-have-docker&#34;&gt;But I don&amp;rsquo;t have docker&lt;/h3&gt;
&lt;p&gt;I had tried to switch to podman sometime back but it was mostly limited to pulling images directly off docker/quay and using them. I had not gotten around to building images with podman or buildah much. But this time I had lucked out and the most commonly used FTP image seemed to lack support for running as a rootless container binding to ports higher than 1024 for the listening port. If you did not know about this - unprivileged users on linux cannot bind to ports lower than 1024 usually as explained &lt;a class=&#34;link&#34; href=&#34;https://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. There are ways around this for example by using &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Authbind&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;authbind&lt;/a&gt; to achieve this via a setuid helper executable or using POSIX &lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;capabilities system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But each of those workarounds come with their own pitfalls, vulnarabilities and risks. Therefore the better way would be to use a non-root user and use a non-standard port. But docker does not usually run in non-root mode. So I switched to podman and I cloned the repo that I had chosen - &lt;a class=&#34;link&#34; href=&#34;https://github.com/fauria/docker-vsftpd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docker-vsftpd&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/podman-vsftpd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and started from there. It was a simple change to add the new port. And add the change to the README. The full pull request is &lt;a class=&#34;link&#34; href=&#34;https://github.com/fauria/docker-vsftpd/pull/76&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-finishing-touches&#34;&gt;Adding finishing touches&lt;/h3&gt;
&lt;p&gt;I am a bit of a perfectionist and once I had started work on this repo I had to add a couple of finishing touches. The first was an automated build process. I had used github workflows and actions to achieve this. Here is the code for that&lt;/p&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build and Push Image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;push,workflow_dispatch ]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build and push image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MainCI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-20.04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Shellcheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Shellcheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ludeeus/action-shellcheck@master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;build-image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;redhat-actions/buildah-build@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vsftpd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest ${{ github.sha }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerfiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          ./Dockerfile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Podman Login action (https://github.com/redhat-actions/podman-login) also be used to log in,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# in which case &amp;#39;username&amp;#39; and &amp;#39;password&amp;#39; can be omitted.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Push To docker.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;push-to-docker&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;redhat-actions/push-to-registry@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ steps.build-image.outputs.image }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ steps.build-image.outputs.tags }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;docker.io/osadal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;osadal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.REGISTRY_PASSWORD }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Print image url&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo &amp;#34;Image pushed to ${{ steps.push-to-docker.outputs.registry-paths }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Things to note here are the build image action. Note that we are using buildah action to build the image and not docker. This means we keep the pipeline clear of docker even though we will still use docker.io to distribute the image.&lt;/p&gt;
&lt;p&gt;Then note the secret mechanism. Github workflows manage secrets injection through envrionment variables as most other CI/CD pipelines do. The actual secret is input at the github settings level. Then it gets injected in to the CI/CD envrionment and is available for use by any action given access to it through the YAML code.&lt;/p&gt;
&lt;p&gt;The next to do thing in my list is adding shellcheck support to the CI/CD pipeline. That will be left for another day. But for now I have cleared the shellcheck comments manually. The pull request is &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/podman-vsftpd/pull/1/files#diff-fc8d3c534affdef352ee2e218f1bf36e45b9991b2b0e0b9f4b844eea147643c5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. This mostly involves&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Breaking down assignment and export in to two lines. This is a good idea because otherwise they do not individually fail. So you can get a case where the generation of the variable fails but you still won&amp;rsquo;t know because the export worked and the return code was zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert backtick escaped sheel command output capturing to &amp;ldquo;$()&amp;rdquo; syntax. This is much better and less error prone. This deserves it&amp;rsquo;s own blog post so I will only point to &lt;a class=&#34;link&#34; href=&#34;https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_03&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;POSIX spec&lt;/a&gt; for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quotin variable usage. You never know when spaces in values will trip you up otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-preamble-becomes-the-main-act&#34;&gt;The preamble becomes the main act&lt;/h3&gt;
&lt;p&gt;So there you have it. We set out to write about good FTP system practices instead wrote a blog post about how to use podman and shellcheck. The next one I promise will be on topic!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Avoiding burnout in software domain</title>
        <link>https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/</link>
        <pubDate>Mon, 09 May 2022 00:35:34 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/young-woman-eyes-closed-hand-on-forehead-768.jpg" alt="Featured image of post Avoiding burnout in software domain" /&gt;&lt;blockquote&gt;
&lt;p&gt;How to avoid the dangers of the trade&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#what-is-burnout&#34;&gt;What is burnout?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-does-it-happen&#34;&gt;Why does it happen?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#it-wont-happen-to-me&#34;&gt;It won&amp;rsquo;t happen to me&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-avoid-it&#34;&gt;How to avoid it&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#prioritize-self-care&#34;&gt;Prioritize self-care&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#shift-your-perspective&#34;&gt;Shift your perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#reduce-exposure-to-job-stressors&#34;&gt;Reduce exposure to job stressors&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#seek-out-connections&#34;&gt;Seek out connections&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#mental-health-and-software-industry&#34;&gt;Mental health and software industry&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;what-is-burnout&#34;&gt;What is burnout?&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/burnout-head-down.jpg&#34; alt=&#34;Burnout Profile&#34; width=&#34;60%&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;You know the drill. It starts with a couple spillovers from your usual sprints. It snowballs in to a stream of issues and before you know it, you are at risk of missing a major deadline. You walk in to release planning meetings and your stomach falls out from underneath you. Your head feels tight and there is a ringing in your ears. Sleep doesn&amp;rsquo;t come easy and when it does, it feels like cheating. After all you could be making progress on that one critical issue that you know will hold up the next sprint and will end up wasting the whole team&amp;rsquo;s time.&lt;/p&gt;
&lt;p&gt;If any of the above sounds familiar then you have walked close to the burnout zone and you may even have fallen in. To be very clear we are not talking about crunch time - that time in every projects end time frame when everyone customaraly runs around like headless chickens trying to figure out where they are supposed to be. That is a cyclical thing and more importantly they finish off once you ship. Little bit of breathing space and you are off to the races again.&lt;/p&gt;
&lt;p&gt;Burnout happens when there is no breathing space and no release valve. Work just builds up and up in to a crescendo that never lets off. Interestingly it is no longer classified as a medical condition and is classified as an occupational phenomenon &lt;a class=&#34;link&#34; href=&#34;https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;according to WHO&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-does-it-happen&#34;&gt;Why does it happen?&lt;/h2&gt;
&lt;p&gt;It happens due to a variety of reasons. Mayo Clinic &lt;a class=&#34;link&#34; href=&#34;https://www.mayoclinic.org/healthy-lifestyle/adult-health/in-depth/burnout/art-20046642&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lists several&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lack of control.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An inability to influence decisions that affect your job — such as your schedule, assignments or workload — could lead to job burnout. So could a lack of the resources you need to do your work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unclear job expectations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re unclear about the degree of authority you have or what your supervisor or others expect from you, you&amp;rsquo;re not likely to feel comfortable at work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dysfunctional workplace dynamics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Perhaps you work with an office bully, or you feel undermined by colleagues or your boss micromanages your work. This can contribute to job stress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extremes of activity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a job is monotonous or chaotic, you need constant energy to remain focused — which can lead to fatigue and job burnout.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lack of social support.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you feel isolated at work and in your personal life, you might feel more stressed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Work-life imbalance.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your work takes up so much of your time and effort that you don&amp;rsquo;t have the energy to spend time with your family and friends, you might burn out quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fairness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think about whether you believe that you receive fair and equitable treatment. If you feel like you do not get treated as the others it will lead to more stress.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these all come down to issues in the workplace. This is why it makes sense to classify it as such. There is nothing wrong with you and everything wrong with the workplace. Understand that you can&amp;rsquo;t change unilaterally. You need the support of your organization to resolve this and they need to be onboard with whatever plan you make.&lt;/p&gt;
&lt;h2 id=&#34;it-wont-happen-to-me&#34;&gt;It won&amp;rsquo;t happen to me&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/Top-7-Tips-to-Prevent-Burnout-as-a-Remote-Software-Developer--1024x683.jpg&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;Most of us like to think that it won&amp;rsquo;t happen to us. We like to believe we are singular, unbreakable and quite resilient. Specially when we are young, we tend to think that we can just keep going on and on and it will be ok. But know that none of us are infallible. We will all break down sometime and it is quite ok. It is ok to seek help and it is ok to accept help.&lt;/p&gt;
&lt;p&gt;Whether you recognize the warning signs of impending burnout or you’re already past the breaking point, trying to push through the exhaustion and continuing as you have been will only cause further emotional and physical damage. Now is the time to pause and change direction by learning how you can help yourself overcome burnout and feel healthy and positive again.&lt;/p&gt;
&lt;p&gt;Dealing with burnout requires the “Three R” approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recognize. Watch for the warning signs of burnout.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reverse. Undo the damage by seeking support and managing stress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience. Build your resilience to stress by taking care of your physical and emotional health.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-avoid-it&#34;&gt;How to avoid it&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/avoiding-burnout-in-software-domain/tips-to-avoid-burnout.jpg&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;There are several guides online on how to avoid burnout, including the graphic above. But I chose to follow a set of points set forth by a Harvard Business Review article as follows.&lt;/p&gt;
&lt;h3 id=&#34;prioritize-self-care&#34;&gt;Prioritize self-care&lt;/h3&gt;
&lt;p&gt;It’s essential to replenish your physical and emotional energy, along with your capacity to focus. Get your body moving and mostly your mind will follow too. There are many activities that will allow you to shift your focus away from work, meditating, mindfulness and yoga comes to mind mostly. Even a simple walk outside, feeling the soft sunshine of an evening makes a world of difference when you are stuck in a rut trying to make sense of what is happening to you.&lt;/p&gt;
&lt;h3 id=&#34;shift-your-perspective&#34;&gt;Shift your perspective&lt;/h3&gt;
&lt;p&gt;Tinted glasses tend to colour your perspective. Sometimes you have to take a step back evaluate the situation. Remind yourself what is important to you and why those things are important to you. When you start out in a job, you have very idallyic expectations of the working environment. Everyone is nice to you and cuts you some slack because you are the newbie. But as time goes by the deadlines loom, things need to be delivered and the once friendly faces now bring panic. Remember in those cases why you are in the job or the industry to begin with. Most of us programmers are extremely competitive and will never settle for the second best. We will do everything in our ability to exceed expectations. And it is these expectations that will end up being the death of us if we are not careful.&lt;/p&gt;
&lt;p&gt;It is ok to remind yourself that beating expectations is not all there is to life. You need to understand where you originally derived pleasure from in this industry. Almost all of us are hackers in our heart of hearts, we are tinkerers. Remember that, remember that the rat race is just an industry trying to impose restrictions on our innovative minds so we can be aligned to some business interests. This is find in normal course of business, after all we should be providing some economic value or else there would be no point to what we do. But once in a while remember that there are other goals in life and it is perfectly ok to go after them.&lt;/p&gt;
&lt;h3 id=&#34;reduce-exposure-to-job-stressors&#34;&gt;Reduce exposure to job stressors&lt;/h3&gt;
&lt;p&gt;You’ll also need to target high-value activities and relationships that still trigger unhealthy stress. This involves resetting the expectations of colleagues, clients, and even family members for what and how much you’re willing to take on, as well as ground rules for working together. You may get pushback. But doubters must know that you’re making these changes to improve your long-term productivity and protect your health.&lt;/p&gt;
&lt;p&gt;Know that it is ok to say no and you always have more control over your environment than you think you do. You can negotiate what projects you work on and who you work with. You can control how that work happens. Always remember to actively negotiate these aspects and not just smile and bear things as they get dished out to you.&lt;/p&gt;
&lt;h3 id=&#34;seek-out-connections&#34;&gt;Seek out connections&lt;/h3&gt;
&lt;p&gt;The best antidote to burnout, particularly when it’s driven by cynicism and inefficacy, is seeking out rich interpersonal interactions and continual personal and professional development. Find coaches and mentors who can help you identify and activate positive relationships and learning opportunities. Volunteering to advise others is another particularly effective way of breaking out of a negative cycle.&lt;/p&gt;
&lt;p&gt;Given the influence of situational factors on burnout, it’s likely that others in your organization are suffering too. If you band together to offer mutual support, identify problems, and brainstorm and advocate for solutions, you will all increase your sense of control and connection.&lt;/p&gt;
&lt;h2 id=&#34;mental-health-and-software-industry&#34;&gt;Mental health and software industry&lt;/h2&gt;
&lt;p&gt;Our industry does not exactly have a great track record in &lt;a class=&#34;link&#34; href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4439723/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;fighting mental health issues in it&amp;rsquo;s workers&lt;/a&gt;. We tend to view our workers as &lt;em&gt;Rock Stars&lt;/em&gt; and &lt;em&gt;Gurus&lt;/em&gt;. They are beyond mere human and some sort of special species that do not have normal emotional and physical connections. This self image story that we tell ourselves keeps exacerbating the mental health issues in general and burnout in particular.&lt;/p&gt;
&lt;p&gt;We need to accept the fact that software developers are all too human and they have emotional needs as well. There is life outside work and prioritizing that, achieving a good work life balance is critical for a good work output. The sooner we recognize that a developer&amp;rsquo;s life outside the job impacts the job a lot more than we give credit for, the sooner we will get to a place where a holistic approach to work life balance is possible.&lt;/p&gt;
&lt;p&gt;And remember, we are a tribe, a family. We need to look after each other. Learn to recognize the oncoming signs of burnout in your friends and colleagues. There are numerous guides out there on what signs of burnout are like &lt;a class=&#34;link&#34; href=&#34;https://www.healthline.com/health/tips-for-identifying-and-preventing-burnout&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this one&lt;/a&gt; Then learn to help them get through and if possible avoid the burnout. Again there are various resources like &lt;a class=&#34;link&#34; href=&#34;https://www.bustle.com/p/how-to-help-a-friend-address-their-burnout-in-a-supportive-way-17897842&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this one&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Agile : The Snake Oil for Cobra Bites</title>
        <link>https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/</link>
        <pubDate>Sun, 06 Feb 2022 21:57:42 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/agile-poster.jpeg" alt="Featured image of post Agile : The Snake Oil for Cobra Bites" /&gt;&lt;blockquote&gt;
&lt;p&gt;How the rebellion got subverted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#the-agile-manifesto---the-rebellion-that-was-not&#34;&gt;The agile manifesto - The Rebellion that was not&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-call-is-coming-from-inside-the-house&#34;&gt;The call is coming from inside the house&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#return-to-roots&#34;&gt;Return to roots&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-is-it-so-easy-to-fail&#34;&gt;Why is it so easy to fail?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-undo-this&#34;&gt;How to undo this?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#understanding-the-what-why-and-how&#34;&gt;Understanding the what, why and how&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cutting-out-the-fluff&#34;&gt;Cutting out the fluff&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#understand-but-do-not-measure&#34;&gt;Understand but do not measure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#use-the-tools-provided-in-whatever-flavour-of-agile-you-chose&#34;&gt;Use the tools provided in whatever flavour of Agile you chose&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#to-be-continued&#34;&gt;To be continued&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;the-agile-manifesto---the-rebellion-that-was-not&#34;&gt;The agile manifesto - The Rebellion that was not&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile.jpeg&#34;
	width=&#34;610&#34;
	height=&#34;500&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile_huabb92307ecb13ee88c12ce2c5eccb116_56123_480x0_resize_q75_box.jpeg 480w, https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile_huabb92307ecb13ee88c12ce2c5eccb116_56123_1024x0_resize_q75_box.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The first time I heard the word agile manifesto was back in 2009. I had just graduated with a degree in Electronic and Telecommunication the previous year. As a wet behind the years novice in the industry I had decided that the best possible career move for me would be to act as a sponge and learn as much as possible from every one I had met online and offline both. This was when Git and Hg was just starting to make inroads in to general developers mind space. It was an exciting time - Android has just been released and our minds were buzzing with the possibilities of smartphones.&lt;/p&gt;
&lt;p&gt;Those days, the startup I had been working on was a scrappy outfit trying to stay afloat doing whatever was possible and not take any VC money. Our founder had some&lt;br&gt;
runway left but we had to be nimble on our feet and attack every opportunity with zeal if we were going to make it. And one of the things I had been concerned with was how to respond to the changes in priority that arise due to the fast changing nature of the projects and the goals of the company. We had been working steadily towards a product of our own so we could actually have a reliable product to bank on. But it was still in MVP stage and we had whole host of other projects going on so we could pay the bills.&lt;/p&gt;
&lt;p&gt;Now the interesting thing was these were mostly very short term engagements. There were not multi year projects with team upon teams of developers involved in it. There were no business analysts writing user stories. No QA teams doing user acceptance testing and so on. It was just a few developers mostly working with one or two QA folks who kept these projects afloat. But we didn&amp;rsquo;t have a single methodology for how these projects should be run resulting in a lot of confusion for all the parties involved.&lt;/p&gt;
&lt;p&gt;I had heard about the agile movement and I vaguely remember seeing an article by Martin Fowler on the topic. This immediately piqued my interest since it seemed to be light on rules and bureaucracy and seemed to get to the point very quickly. This was not scrum or Scaled Agile Framework or any of the &amp;ldquo;enterprise&amp;rdquo; versions of agile. It was just a simple way of doing things that brought a little bit of order to the madness and let the team be predictable and present a more sane interface to management. This was very radical in that era since we had just started to implement &lt;a class=&#34;link&#34; href=&#34;https://prince2.wiki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PRINCE2&lt;/a&gt; which was as heavy as they came.&lt;/p&gt;
&lt;h2 id=&#34;the-call-is-coming-from-inside-the-house&#34;&gt;The call is coming from inside the house&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;645&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile_hu2c08d33cb894d489006817f490853cdc_116092_480x0_resize_q75_box.jpg 480w, https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile_hu2c08d33cb894d489006817f490853cdc_116092_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I encounter agile again somewhere around 2013 when I switch teams within my Org to a mobile application focused team. In addition to using the latest and greatest in technologies in development, this team also was leading the pack in development processes. It was trying to be a thought leader in all these practices that were in with the crowd in those days. The implementation there was quite a stock one. Each team had a scope clearly defined they were responsible for. And the team sizes were just within the limits of what is possible for a normal scrum framework without resorting to SAFe and what not.&lt;/p&gt;
&lt;p&gt;The only problem was that there was no real enforcement of continuous improvement. Daily standups of some teams would drag on for 45 minutes and most grooming and planning sessions (which were combined) would consist of - &amp;ldquo;well you obviously know how to get this done right? Just get the changes to services X, Y and Z done by friday&amp;rdquo;. The defining feature of this team was how much deep domain and technical knowledge was still intact. Most of the people there had been there for several years and had written 95% of the stuff that was in production at the time. And the 5% that wasn&amp;rsquo;t written by then had been modified by them to suit the rest of the system. So there was no real planning or grooming needed. Everyone knew who would work on a given piece of work and that person could tell you exactly how long that change would take. So it worked very very well until it didn&amp;rsquo;t - When us noobs got there. Suddenly there was an influx of people who didn&amp;rsquo;t know the system as well as incumbents and we started having all sorts of issues.&lt;/p&gt;
&lt;p&gt;When I left that team and headed to my next team, I encountered the best version of agile that I have seen to date. The key was that, the new team was never afraid to change all the rules so that they could make things more efficient. Planning pokers were tried for a few months and found to be ineffective so we got rid of them. Retro&amp;rsquo;s were too long so we shortened them. The standups were too virtual when done over video every day so we had one always-physical day of standup. And when everything was said and done, we had a very well tuned process and we loved it.&lt;/p&gt;
&lt;h2 id=&#34;return-to-roots&#34;&gt;Return to roots&lt;/h2&gt;
&lt;p&gt;I had returned from UK back to Sri Lanka and started working for a company based here, when I ran in to the full fledged Scaled Agile Frameowrk for Enterprises. Quite a mouthful right? And in short that will be SAFE. This is an enterprisy version of Agile practices. Now people like to make a distinction between the small &amp;ldquo;a&amp;rdquo; agile and big &amp;ldquo;A&amp;rdquo; Agile. This is most definitely of the latter kind. The team formation calls for various very distinctive and numerous roles and as with any enterprisy product, it comes with a lot of unwanted features, baggage and caveats.&lt;/p&gt;
&lt;p&gt;The biggest issue that I had with it, is the amount of pompous ceremonies around it. There will be no way for the designated scrum master to allocate more than 50% of the time to actual business process work by working normally. So inevitably they will turn to working extra hours to catch up. The even worse part was that it was usually the most senior person in the team who will be the scrum master. So not only is the team loosing a really good engineering resource, now he will end up with a burnout after six months.&lt;/p&gt;
&lt;p&gt;SAFE also tries to enforce communication lines, streamline them. What it actually end up doing is forcing tribal thinking and create self sabotaging teams. In the end you realize that it is just the traditional way of thinking ( Project -&amp;gt; Program -&amp;gt; Portfolio ) re-skinned with a slight agile twist. There is no real effort being made to follow the original agile manifesto in any way, shape or form. So you essentially end up building software the same exact way you did before just with less time and more admin overhead.&lt;/p&gt;
&lt;h2 id=&#34;why-is-it-so-easy-to-fail&#34;&gt;Why is it so easy to fail?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum.jpeg&#34;
	width=&#34;500&#34;
	height=&#34;867&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum_hu0b5a9ffcb027c80c0eab142b4cb92cec_69673_480x0_resize_q75_box.jpeg 480w, https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum_hu0b5a9ffcb027c80c0eab142b4cb92cec_69673_1024x0_resize_q75_box.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;138px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And my story of agile implementations is no unique in any way. All over the software development firms, the ground truth is that almost all agile implementations have become liabilities that have slowed down deliveries, hampered team plans and frustrated good developers who are being held back by red tape they view and wholly useless. So why don&amp;rsquo;t companies just &amp;ldquo;do the right thing®&amp;rdquo; and let the teams be fully agile? Why is it all too easy to fail.&lt;/p&gt;
&lt;p&gt;I posit that the reason is the same reason most change management processes fail is the same reason that implementations of agile fail - humans resist change. More the change seems alien to us, the more we resist them. And agile practices, true agile practices are as alien as it gets compared to traditional waterfall practices. And I understand the temptation to seek assurance of waterfall method. waterfall eases the minds of management and it allows business analysts and PMs involved to take as much uncertainty out of the equation as possible. So what ends up happening is that on the very projects that it is supposed to help, the uncertain and hard to plan projects.&lt;/p&gt;
&lt;h2 id=&#34;how-to-undo-this&#34;&gt;How to undo this?&lt;/h2&gt;
&lt;p&gt;I think the key is to build rapport and support before it ever comes to decision time. There is a reason Ali was winning fights before ever setting foot in the ring. The reason that most agile implementations are not trusted is that they seem to add little value while adding a whole lot of work to the development teams and in general to everyone involved. The key to reversing this is to make sure that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Everyone involved understands why are doing the things that we are doing. Why does agile matter, what is it going to get us? And how will we know when agile is implemented right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fluff built around the agile methodologies are scrapped off during implementation. Strip every single methodology down to the bare bones. And then add in the bits you need as you go along&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand what you are trying to measure. And do not, in the name of everything you love - ever measure that thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;understanding-the-what-why-and-how&#34;&gt;Understanding the what, why and how&lt;/h2&gt;
&lt;p&gt;We should try to get all stakeholders to understand why want a particular agile methodology implemented - maybe it is scrum or maybe it is Kanban. Whatever it is, everyone involved should know why they are doing it and not something else. The new guys who joined yesterday should be able to tell you why you are doing Kanban and not scrum or waterfall. And you should not require a fifty page brief in order to understand it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/postit-note.png&#34;
	width=&#34;265&#34;
	height=&#34;131&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/postit-note_hu767b9ad43790d7eeba2802cafd2da47f_36811_480x0_resize_box_3.png 480w, https://osadalakmal.github.io/posts/agile-the-snake-oil-for-cobra-bites/postit-note_hu767b9ad43790d7eeba2802cafd2da47f_36811_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;485px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Always make sure you lead with this one. Be sure to compare and contrast with business as usual situation and other competing methodologies. That way everyone will have enough context to know why you are implementing things the way you are.And in the end give them a sense of where you want to end up. And explain that you are not quite there yet. Explain that this is a journey and not a one day task. Your teams wont be fully agile overnight. There will still be hiccups along the way and you will adjust a lot of things, but let them know why it is important and how they can know when they are there. Things will be running smoothly, there will be less admin overhead, the team will settle in to a nice delivery rhythm. Give them enough of an understanding on how to tell when they are doing it right&lt;/p&gt;
&lt;h2 id=&#34;cutting-out-the-fluff&#34;&gt;Cutting out the fluff&lt;/h2&gt;
&lt;p&gt;No methodology is perfect. Fredrick brooks was right all those years ago. There is no silver bullet.You have to implement things yourself, evaluate and tweak things yourself.Whatever the methodology you chose - make sure to start from only the most essential parts of the methodology. Anything that is strictly mandatory, cut out.And then run a couple of weeks on that platform and see how you like it, talk to the team, review with stakeholders and add or change things accordingly. Remember that communication does not automatically increase just because you add more meetings. In the same manner remember that lack of meetings does not mean that team is not synced up. Every team develops it&amp;rsquo;s own communication mechanism, try to guide them towards wel established escalation patterns but wait to see how the team responds first before pushing things through&lt;/p&gt;
&lt;h2 id=&#34;understand-but-do-not-measure&#34;&gt;Understand but do not measure&lt;/h2&gt;
&lt;p&gt;Well even if you measure, please stop using that as a KPI.First understand how agile will improve your existing delivery platform - will it reduce cycle time? Will it lead to less bug leakage? Will it lead to better automation? Seek to understand exactly what agile will give your teams. And then try and see if it is actually being improved upon as you envisioned. But do not, ever, set those numbers as a KPI or an objective. Once you do they cease to be good measures and people will just start gaming the numbers. What was once a good measure that just reflected how your team behaves now becomes a statistic made up by a bunch of engineers who are well versed in numbers and how to make them up.&lt;/p&gt;
&lt;h2 id=&#34;use-the-tools-provided-in-whatever-flavour-of-agile-you-chose&#34;&gt;Use the tools provided in whatever flavour of Agile you chose&lt;/h2&gt;
&lt;p&gt;Each practice of Agile comes with it&amp;rsquo;s own set of processes or lack thereof regarding how to change the processes and procedures. And if by any chance your chosen flavour of agile insists on a one size fits all model with no space for nuance, then please dump that as soon as possible because nothing in this world every got achieved by treating things as black and white. And in software, we all live in the grey.&lt;/p&gt;
&lt;p&gt;Use retrospectives, scrum of scrums, code reviews and whatever else you can in order to refine the agile processes you have. Get regular feedback from the teams. You don&amp;rsquo;t even have to stick to the feedback gathering methods dictated in your chosen flavour. If you see anything out of place, investigate, determine if you need to handle or fix it and then act accordingly. No process should be set in stone and there is always a chance to improve things.&lt;/p&gt;
&lt;p&gt;The goal shouldn&amp;rsquo;t be to find fault with the existing processes however. Whenever you treat retro&amp;rsquo;s or other tooling as a way to find existing &lt;em&gt;issues&lt;/em&gt;, people will get overly defensive and try to obfuscate and hide as many things as possible, and that is a sure fire way to sabotaging your own performance.&lt;/p&gt;
&lt;p&gt;The goal is always to make sure we can improve things from where we are so phrase the questions around that mind set. Instead of saying &amp;ldquo;Team morale was bad due to too many dependencies being unfulfilled, what can we do better?&amp;rdquo;, ask &amp;ldquo;How do we get ahead of as many dependencies as we can and highlight the ones we do not get to?&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;to-be-continued&#34;&gt;To be continued&lt;/h2&gt;
&lt;p&gt;This is a very interesting topic that is very close to my heart so there is a ton more I have to say on this topic. Expect to see a few more followup posts on this particular topic in the next few weeks.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hyperscan C&#43;&#43; Wrapper</title>
        <link>https://osadalakmal.github.io/posts/hyperscan-cpp-wrapper/</link>
        <pubDate>Sun, 19 Dec 2021 22:16:45 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/hyperscan-cpp-wrapper/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/hyperscan-cpp-wrapper/Hyperspace_falcon.webp" alt="Featured image of post Hyperscan C&#43;&#43; Wrapper" /&gt;&lt;blockquote&gt;
&lt;p&gt;(or why using the phrase &amp;ldquo;C/C++&amp;rdquo; is crime against programming)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#being-a-c-library-in-a-c-world&#34;&gt;Being a C library in a C++ World&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-c-is-still-being-used&#34;&gt;Why C is still being used&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#c-is-nice-but-c-is-nicer&#34;&gt;C is nice but C++ is nicer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementing-a-c-wrapper-for-hyperscan&#34;&gt;Implementing a C++ Wrapper for Hyperscan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#takeaways&#34;&gt;Takeaways&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;being-a-c-library-in-a-c-world&#34;&gt;Being a C library in a C++ World&lt;/h2&gt;
&lt;p&gt;This weekend I was looking at a regex library written by intel called &lt;a class=&#34;link&#34; href=&#34;https://github.com/intel/hyperscan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hyperscan&lt;/a&gt;. I had needed to use a regex library that was performant  and easy to use. I needed the library to use all the new hardware features such as new instructions such as AVX2 and AVX512. This library was the best one I came across.&lt;/p&gt;
&lt;p&gt;It has support for block mode for bounded data and also supports streaming mode for unbounded or streaming data. It uses graph decomposition and hybrid automata based approach to match the data and uses the &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Ragel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ragel library&lt;/a&gt; for parsing the regex. It also uses SIMD instructions and has a lot of optimizations as is to be expected from a CPU vendors library.&lt;/p&gt;
&lt;h2 id=&#34;why-c-is-still-being-used&#34;&gt;Why C is still being used&lt;/h2&gt;
&lt;p&gt;Now, given all that had transpired during the last decade from Heartbleed to POODLE, you might be forgiven for asking why anyone in their right frame of mind, would implement a regex library in C. But the fact of the matter is for performant idiomatic code that is portable, nothing comes as close as C. Rust is a promising language and I wish that all the very best and a bright future. But it still has a long ways to go to grab the same mind share as C. The biggest thing is that C is such a simple language.&lt;/p&gt;
&lt;p&gt;It is based on a very simple mental modal and once you have mastered it, it pays dividends over and above. It has barely changed over the time I first learned it around 14 years ago. And this durability is a huge plus in the practical world. This means that for projects that will stay relatively stable, C is a great choice.&lt;/p&gt;
&lt;h2 id=&#34;c-is-nice-but-c-is-nicer&#34;&gt;C is nice but C++ is nicer&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/hyperscan-cpp-wrapper/A12SR71.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;For every nice thing, there is a nicer thing - A12 vs SR71&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As a user of C++ primarily for 12 years and counting, It brings lots of nice things to the table. Talking about C++ is a topic in and of itself and this margin is definitely not enough large enough to contain those notes. But for the purpose of explaining this post, I will cover the highlights of what it provides over C.&lt;/p&gt;
&lt;p&gt;The biggest of these is the ability to do easier resource management. &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/raii&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RAII&lt;/a&gt; is a very simple but very powerful concept. Along with automatically called destructors, this concept makes it very easy to enforce clean up of resources.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;dot method&amp;rdquo; of programming as I like to call it, is a very convenient way to experiment quickly. Basically the idea is that you include the main header file for the library you are experimenting with, then you instantiate whatever seems to be the most relevant class for what you want to achieve. And finally you type the object name and then press dot and wait for autocompletion of the IDE to kick in. Assuming the library author was a sensible person, you would be off to the races at this point. You would have everything you need to do right there and it will be a matter of calling the right methods with the right parameters.&lt;/p&gt;
&lt;p&gt;Now this is not how you would necessarily do the actual development for the production code but this is very useful in prototyping and testing.&lt;/p&gt;
&lt;p&gt;Another nice thing about C++ is it&amp;rsquo;s capability to hide unwanted complexity. And make sure the code moves only within the parameters set by the library. Enum classes and other features introduced in C++11 is the main driver for this functionality.&lt;/p&gt;
&lt;h2 id=&#34;implementing-a-c-wrapper-for-hyperscan&#34;&gt;Implementing a C++ Wrapper for Hyperscan&lt;/h2&gt;
&lt;p&gt;With all that in mind, let&amp;rsquo;s get down to business of creating the wrapper. Lets start with the header file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HyperScanDatabase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;match_event_handler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;BLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_compiled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_database_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_scratch_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing to note is I am converting the configuration options and parameter types to C++ equivalents. This can be as simple as changing integer flags to enum classes and up lifting function pointers in to C++ typedefs. Or they can be more elaborate ones where we cover up return codes with an exception hierarchy, change C data structures to C++ STL ones and so on. The important thing is that you keep the interface of the wrapper within the C++ realms and remove the &amp;ldquo;C&amp;rdquo; ness of the interface.&lt;/p&gt;
&lt;p&gt;Then note that the internal data structures are all C++ ones, even when ultimately they will be passed to the C code. &lt;code&gt;m_patterns&lt;/code&gt; for example is a vector of char pointers. In C world this would become a two dimensional dynamically allocated array of char pointers. But in C++ world, it is a vector of char pointers. The difference being that memory management is far easier on the vector. Note that I couldn&amp;rsquo;t use a vector of vectors because there is no guarantee in C++ about contiguousness of nested vectors.&lt;/p&gt;
&lt;p&gt;A virtual destructor because we are holding resources that need to be freed and a state variable for holding internal state is also present.&lt;/p&gt;
&lt;p&gt;The methods themselves are very simple. The construction of the object only requires you to know if you are processing a stream or block of characters. Then a single method for adding a pattern for matching which returns a unique id for the pattern. Then a method scanning the data and calling the event handler for each match.&lt;/p&gt;
&lt;p&gt;Switching over to the implementation it looks like following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;hs_wrapper.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;hs_database&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;hs_scratch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;hs_compile_error_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hs_compile_multi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;HS_MODE_STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_MODE_BLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to compile patterns: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_compile_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hs_alloc_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to allocate scratch space. Exiting.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// anonymous namespace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_free_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_compiled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hs_scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to scan input buffer. rc = %d. Exiting.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the usual suspects really. Try to follow the best practices. Everything from &lt;a class=&#34;link&#34; href=&#34;https://www.oreilly.com/library/view/effective-modern-c/9781491908419/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Effective Modern C++11&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://herbsutter.com/gotw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Guru of the week&lt;/a&gt;. But in particular pay attention to the fact we hid the implementation of the compile function from the header in an anonymous namespace. This is something that I have seen almost all the C++ newbies, specially ones that started out with Java make. Those functions do not need to be part of the header file. Even if you make it private, it ends up polluting the namespace and needing recompiles of all the translation units including this header for no real gain. And no, you do not have to test that. The whole point of TDD is to test the unit - i.e. the interface you defined in the header. The public interface of the class can and should be tested and the &lt;code&gt;compile&lt;/code&gt; function will get tested while you do that. You don&amp;rsquo;t need to write a specific test for that function.&lt;/p&gt;
&lt;p&gt;Also note that we delegate resource management to the constructor and destructor as much as possible. The user of the class should not have to worry about freeing the resources. Obviously resource holding classes should not ideally be value semantic classes, so copying etc should be prevented. So in hindsight I should have used something like &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/rule_of_three&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rule of three&lt;/a&gt; and defined a copy constructor and assignment operator as well. So strike one for me :)&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;In general the first thing that I instinctively do when I have to use a non-trivial C library is to look for a C++ wrapper. It is much easier to work with a C++ interface and not have to worry about manual resource management. This pattern of creating C++ wrappers go back to when we had to use OpenSSL in one of my previous jobs and we ended up writing a pretty comprehensive C++ wrapper for that. In case you have to do that for your work, try to make sure that you never ever leak the resource management details to outside. The moment you do that, you lose all advantage that C++ gives you.&lt;/p&gt;
&lt;p&gt;Make sure that your wrappers public interface is independent from the underlying C libraries. Redefine enums to enum classes, use narrower types, use types with custom validation - whatever you do, define your own interfaces since that will allow you to customize the internal behavior to your hearts content as well upgrade or modify the underlying C library without having to change the clients of your library.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Starting With Realtime Data</title>
        <link>https://osadalakmal.github.io/posts/starting-with-realtime-data/</link>
        <pubDate>Sat, 20 Nov 2021 20:15:01 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/starting-with-realtime-data/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/starting-with-realtime-data/realtime-splash.jpg" alt="Featured image of post Starting With Realtime Data" /&gt;&lt;blockquote&gt;
&lt;p&gt;(or why realtime data is elusive in most organizations)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#data-data-and-data&#34;&gt;Data, Data and Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-break-out-of-the-cycle&#34;&gt;How to break out of the cycle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#national-rail-to-the-rescue&#34;&gt;National Rail to the Rescue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#stomp-protocol--which-i-didnt-know-was-a-thing-&#34;&gt;STOMP Protocol ( which I didn&amp;rsquo;t know was a thing )&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#re-learning-java-in-a-pinch&#34;&gt;Re-learning Java in a pinch&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#note-about-the-java-solution-and-how-it-works&#34;&gt;Note about the Java solution and how it works&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#on-to-writing-to-kafka&#34;&gt;On to writing to Kafka&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-next&#34;&gt;What Next?&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;data-data-and-data&#34;&gt;Data, Data and Data&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/starting-with-realtime-data/hand-out-of-water.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Drowning in Data but Thirsting for Insights&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;These days the mantra is always data, data and more data. No organization can apparently get enough of data. And more and more of that data is coming in realtime in streaming systems.&lt;/p&gt;
&lt;p&gt;The ubiquity of kafka is proof that these days the real time delivery of data is the norm rather than the exception. But most of the time the processing of this data is being relegated to the usual suspects in the data lake.&lt;/p&gt;
&lt;p&gt;Due to the fact that most of the competency in the Data Engineering team usually lies with the batch processing side, they usually consider the real time processing as one of several different things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Too expensive&lt;/li&gt;
&lt;li&gt;Too hard&lt;/li&gt;
&lt;li&gt;Has no real use case&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now this is not to suggest that these are necessarily untrue - it is harder to process, and probably expensive to do so as well. And half the time the product owners and/or business users have absolutely zero imagination and cannot come up with a decent real time use case even if their lives depended on it.&lt;/p&gt;
&lt;p&gt;But the fact remains that once the stars do align, when there is a good use case we end up being unable to execute because we dont really have a lot of experience with the real time streaming systems.&lt;/p&gt;
&lt;h2 id=&#34;how-to-break-out-of-the-cycle&#34;&gt;How to break out of the cycle&lt;/h2&gt;
&lt;p&gt;As with any other use case or technology that is unfamiliar - you need to break out of the vicious cycle that allows this learned helplessness to persist. I have alluded to this in an earlier post of mine where I discuss conscious learning.&lt;/p&gt;
&lt;p&gt;The first thing to do is acquire some practice. The problem with this is that streaming data is really hard to come by in the wild. There are enough big data sets that can be used for pet projects now. Sources like &lt;a class=&#34;link&#34; href=&#34;https://github.com/awesomedata/awesome-public-datasets&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;awesome public datasets&lt;/a&gt; allow us to do pet projects on batch processing side of the things really easily.&lt;/p&gt;
&lt;p&gt;But when it comes to real time streaming data, the story is much more different. Since distributing such data requires significant server power, there aren&amp;rsquo;t servers out in the open internet that will let you subscribe to kafka feeds. So we need to look for alternatives. The easiest way would be to down load a time series data file source in a program that will write that data to a kafka stream. If required it can even modify the timestamps to match.&lt;/p&gt;
&lt;p&gt;The other way would be to find a real time data source that is actually publicly available and use that. There aren&amp;rsquo;t that many of them around and they ones that are there are not kafka streams. The protocols for distribution of real time data in these cases tend to be much more varied. There are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MQTT - Message Queue Telemetry Protocol is a lightweight pub sub network protocol popular in IOT&lt;/li&gt;
&lt;li&gt;STOMP - Simple Text Oriented Message Protocol is one that works over web sockets and works with message oriented middleware such as MQ systems&lt;/li&gt;
&lt;li&gt;AMQP - Advanced Message Queuing Protocol was created for unifying the middleware layer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one source of actual useful realtime information I could find was national rail in the UK. The Transport for London was also supposed to host several real time streaming data feeds but I could not find any information on this.&lt;/p&gt;
&lt;h2 id=&#34;national-rail-to-the-rescue&#34;&gt;National Rail to the Rescue&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/starting-with-realtime-data/national-rail-realtime.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;An Unlikely Rescuer&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The national rail provides a set of open data feeds and files for anyone who creates a developer account. There are several sets of data in there. The full data can be found at the &lt;a class=&#34;link&#34; href=&#34;https://wiki.openraildata.com/index.php?title=Darwin:Push_Port&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;. You can sign up for the developer account at &lt;a class=&#34;link&#34; href=&#34;https://opendata.nationalrail.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open data portal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The feed is in STOMP format and the serialization format is XML. And it is compressed using gzip. So we will have to read the data in STOMP protocol format, unzip it and then convert to a more modern format that most of the tools understand such as json and then write it to kafka to be processed further.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go through each of these concerns and figure out how we are tackling each one&lt;/p&gt;
&lt;h2 id=&#34;stomp-protocol--which-i-didnt-know-was-a-thing-&#34;&gt;STOMP Protocol ( which I didn&amp;rsquo;t know was a thing )&lt;/h2&gt;
&lt;p&gt;Before this project I had never heard of the STOMP format. But reading up on it, it seems quite a small, easy to understand spec that you can read &lt;a class=&#34;link&#34; href=&#34;https://stomp.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Since it is quite easy to understand and implement, I was expecting the clients to work quite smoothly. Specially since there seemed to have been such a small amount of churn in the protocol specification itself.&lt;/p&gt;
&lt;p&gt;But it turned out that the python library was having issues. Right after connecting, the client gets disconnected. The strange thing is the command line client seems to work just fine. I had assumed that my code was having issues and I did not understand something about the library I was using - &lt;a class=&#34;link&#34; href=&#34;https://github.com/jasonrbriggs/stomp.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stomp.py&lt;/a&gt;. But it turned out that even the &lt;a class=&#34;link&#34; href=&#34;https://github.com/openraildata/stomp-client-python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official client&lt;/a&gt; did not work either.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ pipenv shell
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Launching subshell in virtual environment...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯  . /home/osada/.local/share/virtualenvs/tfltest-7b5b1zAz/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cd stomp-client-python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ ./opendata-nationalrail-client.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to darwin-dist-44ae45.nationalrail.co.uk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Disconnected waiting 5 seconds before exiting
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^CTraceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  File &amp;#34;/home/osada/progs/tfltest/stomp-client-python/./opendata-nationalrail-client.py&amp;#34;, line 108, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    time.sleep(1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;KeyboardInterrupt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that was a dead end because I didn&amp;rsquo;t really have the temerity to debug this right then. Rummaging around in that openraildata org in github, the next repo was a java client. I have not done any Java development in years but I decided to give it a go since that seemed the quickest way to get things going.&lt;/p&gt;
&lt;h2 id=&#34;re-learning-java-in-a-pinch&#34;&gt;Re-learning Java in a pinch&lt;/h2&gt;
&lt;p&gt;The first thing to do was setup the developer environment. Since I had not done so before, I install the JDK. Since I wasn&amp;rsquo;t sure which version to go with I installed both java 11 version and java 17 versions. I decided to give java 17 version a try. Since I am on arch (well, technically manjaro) I have to use the following command to update the alternatives where alternative is the term used on Ubuntu side.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ sudo archlinux-java status
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Available Java environments:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java-11-openjdk (default)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java-17-openjdk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ sudo archlinux-java set java-17-openjdk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ java --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openjdk 17.0.1 2021-10-19
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OpenJDK Runtime Environment (build 17.0.1+12)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OpenJDK 64-Bit Server VM (build 17.0.1+12, mixed mode)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now on to actually building and running the official client. Replace the username and password with what was assigned to you when you signed up. And build and run.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ❯ mvn spring-boot:run
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [INFO] Scanning for projects...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [INFO] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [INFO] ------------&amp;lt; com.openraildata:openwire-camel-client-java &amp;gt;-------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [INFO] Building openwire-camel-client-java 1.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [INFO] --------------------------------[ jar ]---------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    2021-11-21 21:38:52.480 ERROR 17340 --- [           main] c.s.x.b.v2.runtime.reflect.opt.Injector  : null
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    java.security.PrivilegedActionException: null
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   at java.base/java.security.AccessController.doPrivileged(AccessController.java:573) ~[na:na]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   at com.sun.xml.bind.v2.runtime.reflect.opt.Injector.&amp;lt;clinit&amp;gt;(Injector.java:197) ~[jaxb-impl-2.3.0.jar:2.3.0]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, that was unexpected. Turns out that newer Java versions don&amp;rsquo;t like some optimization used in JAXB core libraries. According to this &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/50237516/proper-fix-for-java-10-complaining-about-illegal-reflection-access-by-jaxb-impl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stackoverflow&lt;/a&gt; answer it seems that using any version of JAXB above 2.3.0 should do the trick but after several attempts at changing dependencies and other futile attempts, I just gave up and switched to Java 11. And that seems to work fine with just a warning. Homework for later!&lt;/p&gt;
&lt;p&gt;Switching to Java 11 made everything work and finally we were getting some data from the feed, Success!&lt;/p&gt;
&lt;h2 id=&#34;note-about-the-java-solution-and-how-it-works&#34;&gt;Note about the Java solution and how it works&lt;/h2&gt;
&lt;p&gt;Taking a step back and actually reading through the source code for the Java Client showed me that the code is unusually succinct, specially compared to my memories of bloated hunks of code that I remember being the standard enterprise Java fare. Turns out it was due to mostly the library that they were using Camel. Camel itself probably deserves a blog post of it&amp;rsquo;s own but for the moment let&amp;rsquo;s quickly dive in to what it is because boy its interesting.&lt;/p&gt;
&lt;p&gt;This library traces it&amp;rsquo;s roots back to &lt;a class=&#34;link&#34; href=&#34;https://www.enterpriseintegrationpatterns.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Enterprise Integration Patterns book&lt;/a&gt; by Gregor Hohpe and Bobby Woolf. That book comes about after the GoF book gets published about the design patterns in OO programming. Now the very second design patterns are mentioned the functional purists amongst you will scoff at the mere mortals who are forced to use Java because &lt;em&gt;we don&amp;rsquo;t need design patterns&lt;/em&gt;. But the reality is that patterns transcend individual languages and are a quite useful tool to save people time and effort when developing enterprise application. The honest truth is that Enterprise programmers have to manage with fewer resources than their Web 2.0 brethren, the same sort of expectations. And patterns that can be easily recognized, applied and shared are life savers since it makes the job easier for architects that have to come up with the blueprints and programmers that have to implement them.&lt;/p&gt;
&lt;p&gt;The book defined a set of 65 common integration patterns and the &lt;a class=&#34;link&#34; href=&#34;https://camel.apache.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Camel library&lt;/a&gt; implements those patterns. It also has support for numerous data formats and endpoints via a unified URI system. This makes it extremely easy to integrate different data sources and sinks. Best thing about this is that the library core is very lightweight and the rest of the functionality uses a plugin architecture. This was a surprise finding and I am somewhat dissapointed to find that no golang library fills the same niche.&lt;/p&gt;
&lt;h2 id=&#34;on-to-writing-to-kafka&#34;&gt;On to writing to Kafka&lt;/h2&gt;
&lt;p&gt;Now the only thing left to do was writing to Kafka. To accomplish only a very few changes needed to be done. Configuring the connection to Kafka is simple enough. Add the dependencies to pom.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.camel&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;camel-kafka&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${camel.version}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And configure routing for route builder so the STOMP messages gets processed and sent to kafka&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topicName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;stomp&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kafkaServer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;kafka&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toKafka&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kafkaServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topicName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;brokers=localhost:9092&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;activemq:topic:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feedTopic&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;?durableSubscriptionName=&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;unmarshal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;gzip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;darwinMessageHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toKafka&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All that is left is for the XML to be converted to JSON because that&amp;rsquo;s the only language hip enough for 2021. For that I ended up using jackson instead of a simpler alternative like &lt;a class=&#34;link&#34; href=&#34;https://github.com/stleary/JSON-java&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON Java&lt;/a&gt; because of the namespaced XML found in the feed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exchange&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;messageBody&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBody&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;XmlMapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmlMapper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XmlMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;JsonNode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmlMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readTree&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messageBody&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonMapper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBody&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And done! Now we just run a kafka process along with the associated zookeeper instance, create the topic called &amp;ldquo;stomp&amp;rdquo; and viola!&lt;/p&gt;
&lt;h2 id=&#34;what-next&#34;&gt;What Next?&lt;/h2&gt;
&lt;p&gt;So you have a system that writes some set of JSON messages in to a kafka topic, what next? Well the next steps can be anything you want to learn and experiment with really. For me I am hoping to use this to toy with two pet projects.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to learn flink including it&amp;rsquo;s CEP engine.&lt;/li&gt;
&lt;li&gt;I want to take &lt;a class=&#34;link&#34; href=&#34;https://materialize.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;materialize&lt;/a&gt; for a spin&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;expect more writings on those topic based on this setup in the coming weeks.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Learning In Engineering Organizations</title>
        <link>https://osadalakmal.github.io/posts/learninginorganizations/</link>
        <pubDate>Thu, 14 Oct 2021 15:36:00 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/learninginorganizations/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/img/learning-in-orgs.jpg" alt="Featured image of post Learning In Engineering Organizations" /&gt;&lt;h1 id=&#34;learning-in-software-engineering-organizations&#34;&gt;Learning In Software Engineering Organizations&lt;/h1&gt;



&lt;figure&gt;
    
        
            &lt;img src=&#34;https://live.staticflickr.com/1815/42907807575_553abc078d_b.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;The Learning Organization: A Lit Review by giulia.forsythe licensed under CC BY 2.0&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#learning-in-organizations&#34;&gt;Learning in Organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-learning-matters-for-organizations&#34;&gt;Why Learning Matters for Organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-is-different-about-engineering-organizations&#34;&gt;What is different about engineering organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-learn-in-big-organizations&#34;&gt;How to learn in Big Organizations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#corporate-knowledge-systems&#34;&gt;Corporate Knowledge Systems.&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#index-tag-and-disseminate&#34;&gt;Index, tag and disseminate&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#automate-with-apis&#34;&gt;Automate with APIs&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chat-your-way-to-knowledge&#34;&gt;Chat your way to knowledge&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#newsletters-and-blogs&#34;&gt;Newsletters and Blogs&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;learning-in-organizations&#34;&gt;Learning in Organizations&lt;/h2&gt;
&lt;p&gt;In almost all organizations that I have been part of since I graduated there have come a time when we had to teach something to the whole team. This may have been my own team, a team I managed or a team I interacted with. But something I have seen most of the time is the inability or the disinclination to do the learning in a structured way. Most teams would not, given the chance jump at the opportunity to make sure they make the best of the situation. In my opinion this is one of the worst mistakes leaders and teams make in their journey.&lt;/p&gt;
&lt;p&gt;Learning something in the workplace is an interesting experience. The workplace is not exactly the school, university, or an opportunity for earning continuing professional development points. Most of the time our activities are arranged so that we all work towards the company mission and the goals. Now learning something new doesn’t directly impact the bottom line but that doesn&amp;rsquo;t need to be the sole goal here. Learning pays dividends later down the road so its effects are felt with a delay which makes evaluating the effectiveness of such activities an interesting experience. However, if we are to have a efficient and impactful learning experience we should definitely measure its effectiveness. After all we do know that the best kind of organizations are the ones that are &lt;a class=&#34;link&#34; href=&#34;https://hbr.org/2020/02/10-steps-to-creating-a-data-driven-culture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;data driven&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-learning-matters-for-organizations&#34;&gt;Why Learning Matters for Organizations&lt;/h2&gt;
&lt;p&gt;Learning as a specific need may not be critical for some roles within an organization. Manual labor tasks that are repetitive doesn’t exactly need a curriculum of material to be dispensed every month. But most of the modern organizational personal do need to keep up with the pace of technology, economy, state of industry and various other forces that the organization interacts with. And if they are to understand and make use of those interactions to benefit the company, they need to be up to speed on all of these things. That’s where organizational learning come in to play.&lt;/p&gt;
&lt;p&gt;Most of the time the easy way out is to just hire the talent or knowledge you lack. But this can be a very costly affair. Multiple anecdotes have shown me that hiring specific talent can be a very time consuming and costly endeavor. So, in most cases it might be easier to just build that knowledge in house.&lt;/p&gt;
&lt;h2 id=&#34;what-is-different-about-engineering-organizations&#34;&gt;What is different about engineering organizations&lt;/h2&gt;
&lt;p&gt;Engineering organizations differ from the rest of the organizations due to the sheer velocity with which things move. Software engineering and related fields get updated at a break neck speed. What was considered state of the art just a year ago may now be considered so legacy that it may even be hard to hire people for. And all these creativity and speed comes at a cost. It is extremely hard to keep track of new technology, processes and disciplines without having an explicit system in place capable of making sure your employees can easily learn about the things that enable them to do their jobs better. Engineering profession thrives on having the best information at hand to solve the questions that we face in our day to day work. So it is essential we be able to keep learning new things and more importantly learn the correct things.&lt;/p&gt;
&lt;h2 id=&#34;how-to-learn-in-big-organizations&#34;&gt;How to learn in Big Organizations&lt;/h2&gt;
&lt;p&gt;I have worked at larger organizations for the most part of my career. And there are multitudes of benefits for working in such companies. But there are also&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.filtered.com/thoughts/learning-at-big-companies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;many things that inhibit chances for learning at large oraganizations&lt;/a&gt;. So you have to be aware of these limitations and then overcome them in order for you to be successful. There are reasons to do with management and incentives but they again deserve their own blog post.&lt;/p&gt;
&lt;p&gt;Lets talk about tooling for learning. The good thing about larger organizations is that they have cash to burn. There are boxes to be ticked and systems to be put in place - no one will bat an eyelid when you ask for a chat app or a documentation server. Here are some of the tooling you can leverage to make it easier for employees to learn.&lt;/p&gt;
&lt;h3 id=&#34;corporate-knowledge-systems&#34;&gt;Corporate Knowledge Systems.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/kms-infographic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Most of the time employees are going to be looking for information on common problems and they will just turn to google/stackoverflow/quora. But there will be some cases where there is no publicly available information on the particular problem. This may be due to legacy systems that are not publicly known or due to particular tech stacks used within the company. Whatever the reason, the chances are the bigger the organization, the higher the probability of someone else in the company of having faced the same situation. And having the good, modern, efficient knowledge sharing system is crucial to leveraging this knowledge. This is how you avoid those moments of &amp;ldquo;Oh, wow. We already fixed that. Should have asked first!&amp;rdquo;. There are a plethora of products in the market these days for knowledge sharing systems so it helps to do some research beforehand to understand your organizations requirements and how to fulfill them. The good news is there are a lot of material on how to select these systems as well such as &lt;a class=&#34;link&#34; href=&#34;https://www2.deloitte.com/us/en/insights/focus/technology-and-the-future-of-work/organizational-knowledge-management.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this article by deloitte&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;index-tag-and-disseminate&#34;&gt;Index, tag and disseminate&lt;/h3&gt;
&lt;p&gt;Use technology to index and automatically tag content. With today’s deep learning ML models and NLP processing, this has never been easier. Then use the knowledge system platforms you have built to share this content with the wider audiences. An example might be how one development team overcomes a certain issue with a legacy system the company is using - maybe your companies’ legacy relational DB can’t add read replicas without huge costs and a team figured out how to get around this using CDC feeds. Now an intelligent knowledge sharing system will tag these with replication, relational and CDC tags and the next time another team is looking for a relational DB replication solution that result will automatically come up.&lt;/p&gt;
&lt;h3 id=&#34;automate-with-apis&#34;&gt;Automate with APIs&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.mulesoft.com/resources/api/what-is-an-api-economy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;API Economy&lt;/a&gt; is here to stay. Everything should be an API in today&amp;rsquo;s company culture. And that is a good thing. It being transparency to environments and allows us to leverage the API for automation and integration. There are a number of tools any development/engineering team will use in their day-to-day life - an issue tracker (Jira/Trello), a chat program (Slack/Teams), a code repo (github/gitlab). Each of these products expose an API interface to the outside world. This is how you make sure tools work together to capture information and knowledge that would otherwise be lost. Certain channels/chat rooms can be created to allow people to share knowledge and ask questions. These can in turn be digested by an indexer and made searchable. Make it easier to search and find things. You can even use tools such &lt;a class=&#34;link&#34; href=&#34;https://zapier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zapier&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://powerautomate.microsoft.com/en-us/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Power Automate&lt;/a&gt; to make things work together. These can be the glue you need. For example you can create a poll in TEAMs chat to get feedback and this is much more effective than a separate email sending a link to a survey. These results can then we summarized by a tool such as power automate and you can thank the participants via the same tool.&lt;/p&gt;
&lt;h3 id=&#34;chat-your-way-to-knowledge&#34;&gt;Chat your way to knowledge&lt;/h3&gt;
&lt;p&gt;Realtime chat tooling is now everywhere. And as ubiquitous as they are we are definitely not using them to the full potential. As seen above we can definitely add more features on top of them. Even before that, allowing them to work alongside or closer to actual content we work with is a very effective way to leverage these tools. &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-teams/group-chat-software&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Teams&lt;/a&gt; is a leader in this space. Many applications can be embedded in the chat program itself and it is very easy to switch from editing a file collaboratively to chatting about it to another stakeholder and back. This is a topic deserving its own post so expect one in the near future.&lt;/p&gt;
&lt;h3 id=&#34;newsletters-and-blogs&#34;&gt;Newsletters and Blogs&lt;/h3&gt;
&lt;p&gt;Have an organizational newsletter and blog set. You will be surprised at how effective this will be. RSS never really stopped working - blogs are still surprisingly effective in communicating structured technical knowledge. They also let influencers and power sharers naturally access a platform that lets them reach a wider audience. This is very effective as this is ground up content so will be useful information for folks on the ground, in the trenches.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Nemawashi - Power of building concensus</title>
        <link>https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/</link>
        <pubDate>Thu, 14 Oct 2021 15:36:00 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/nemawashi-main.jpg" alt="Featured image of post Nemawashi - Power of building concensus" /&gt;&lt;h1 id=&#34;nemawashi---power-of-building-concensus&#34;&gt;Nemawashi - Power of building concensus&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the fast-paced world of business and decision-making, ensuring that everyone is on the same page and in agreement is essential. A crucial aspect of effective decision-making is building consensus before a meeting takes place. Consensus-building allows teams to align their thoughts, opinions, and goals, leading to more productive meetings and better outcomes.&lt;/p&gt;
&lt;p&gt;In Japanese culture, there is a term that encapsulates this process beautifully - &amp;ldquo;nemawashi.&amp;rdquo; Nemawashi refers to the practice of laying the groundwork and seeking agreement among stakeholders before a meeting or decision-making process begins. It is a fundamental concept that plays a significant role in achieving harmony and collaboration within organizations.&lt;/p&gt;
&lt;p&gt;In this blog post, we will delve into the concept of nemawashi and explore its practical implications for building consensus before meetings. We will discuss the cultural significance of nemawashi in Japan and its relevance in a broader context. Furthermore, we will outline effective strategies that can help you incorporate nemawashi techniques to foster collaboration, engagement, and successful decision-making.&lt;/p&gt;
&lt;p&gt;Here we try to understand the art of building consensus and discover how nemawashi can transform your meetings into more fruitful and harmonious experiences. Let&amp;rsquo;s explore the power of nemawashi and its impact on achieving alignment within your team.&lt;/p&gt;
&lt;h2 id=&#34;understanding-nemawashi&#34;&gt;Understanding Nemawashi&lt;/h2&gt;
&lt;p&gt;Nemawashi, rooted in Japanese culture, holds valuable lessons for building consensus before meetings. By embracing this practice, teams can set the stage for productive discussions and decision-making. Let&amp;rsquo;s explore the meaning and significance of nemawashi, along with some practical examples.&lt;/p&gt;
&lt;p&gt;At its core, nemawashi involves laying the groundwork and seeking agreement among stakeholders before a meeting or decision-making process begins. This process allows individuals to voice their opinions, address concerns, and find common ground, leading to smoother decision-making and improved outcomes.&lt;/p&gt;
&lt;h3 id=&#34;example-1-toyotas-decision-making-process&#34;&gt;Example 1: Toyota&amp;rsquo;s Decision-Making Process&lt;/h3&gt;
&lt;p&gt;One of the most famous examples of nemawashi can be found in the decision-making process at Toyota, a renowned Japanese automobile manufacturer. Before any major decision is made, Toyota follows a meticulous approach that involves extensive consultation and consensus-building.&lt;/p&gt;
&lt;p&gt;Teams engage in cross-functional meetings, where representatives from various departments share their perspectives, concerns, and ideas. This process allows for a comprehensive understanding of the issue at hand and helps identify potential obstacles or risks. By incorporating nemawashi, Toyota ensures that decisions are made collaboratively, taking into account the viewpoints of all relevant stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars.jpg&#34;
	width=&#34;1552&#34;
	height=&#34;1331&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars_hu11a3de8459562c4cb03febabc41d0cf0_434165_480x0_resize_q75_box.jpg 480w, https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars_hu11a3de8459562c4cb03febabc41d0cf0_434165_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;br&gt;
Sidebar: &lt;a class=&#34;link&#34; href=&#34;https://hbr.org/2011/01/how-toyota-makes-decisions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Read more about Toyota&amp;rsquo;s decision-making process here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;example-2-us-government-and-legislative-process&#34;&gt;Example 2: U.S. Government and Legislative Process&lt;/h3&gt;
&lt;p&gt;While nemawashi is rooted in Japanese culture, similar principles of consensus-building can be observed in the U.S. government&amp;rsquo;s legislative process. Before bills are brought to the floor for a vote, extensive negotiations, discussions, and consensus-building efforts take place.&lt;/p&gt;
&lt;p&gt;In the U.S. Congress, lawmakers engage in committee meetings, hearings, and informal conversations to gather input from various stakeholders. This process allows representatives to address concerns, incorporate amendments, and build consensus among different factions. Through these deliberations, consensus is sought to increase the chances of a bill&amp;rsquo;s successful passage.&lt;/p&gt;
&lt;p&gt;An example of how the U.S. legislative process and consensus-building are depicted is the television show &amp;ldquo;The West Wing.&amp;rdquo; The show portrays the inner workings of the White House and provides insights into the intricate process of developing and passing legislation. It showcases the efforts of policymakers to build consensus, negotiate, and seek agreement among different parties to advance their policy agendas.&lt;/p&gt;
&lt;p&gt;While &amp;ldquo;The West Wing&amp;rdquo; is a fictional representation, it offers viewers a glimpse into the complexities and nuances of consensus-building in the U.S. political landscape.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/the-west-wing-discussion.webp&#34;
	width=&#34;2000&#34;
	height=&#34;1333&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/the-west-wing-discussion_hu7f659bf49c1069d142f8c4719745a8b6_398516_480x0_resize_q75_h2_box_2.webp 480w, https://osadalakmal.github.io/posts/nemawashi-power-of-consensus/the-west-wing-discussion_hu7f659bf49c1069d142f8c4719745a8b6_398516_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;br&gt;
Sidebar : &lt;a class=&#34;link&#34; href=&#34;https://www.npr.org/2019/12/20/790948548/the-west-wing-podcast-a-reminder-of-when-consensus-seemed-possible&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore more about &amp;ldquo;The West Wing&amp;rdquo; and its depiction of the U.S. legislative process here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By highlighting this example, we can observe that nemawashi-inspired practices and consensus-building efforts exist beyond cultural boundaries. Consensus-building is a universal concept that plays a crucial role in effective decision-making across diverse settings.&lt;/p&gt;
&lt;h2 id=&#34;strategies-for-building-consensus&#34;&gt;Strategies for Building Consensus&lt;/h2&gt;
&lt;p&gt;Building consensus before a meeting requires careful planning, effective communication, and fostering a collaborative environment. By employing the following strategies, you can create a foundation for productive discussions and decision-making:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Preparing for the Meeting - Thorough preparation is essential for successful consensus-building. Consider the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gather Information: Seek input from stakeholders and team members before the meeting. Collect diverse perspectives and insights to gain a comprehensive understanding of the topic at hand.&lt;/li&gt;
&lt;li&gt;Address Concerns: Take the time to identify and address any potential concerns or objections that participants may have. Addressing these early on can help mitigate resistance and pave the way for consensus.&lt;/li&gt;
&lt;li&gt;One-on-One Meetings: Engage in individual discussions with key stakeholders to understand their viewpoints and gather feedback. This personal touch allows for open and honest conversations, fostering a sense of inclusion and trust.&lt;/li&gt;
&lt;li&gt;Invite Contributions: Show respect for stakeholders by genuinely considering their perspectives and inviting their contributions. Recognize that they may bring valuable insights and solutions to the table. This approach promotes collaboration and a sense of ownership among participants.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Effective Communication Techniques - Clear and open communication is vital for building consensus. Consider these techniques:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Active Listening: Practice attentive and empathetic listening. Encourage participants to express their thoughts, concerns, and ideas, and ensure that everyone feels heard and respected.&lt;/li&gt;
&lt;li&gt;Facilitate Constructive Discussions: Create an inclusive environment where diverse perspectives are encouraged. Set ground rules for respectful dialogue and constructive debate. Guide the conversation towards finding common ground and shared goals.&lt;/li&gt;
&lt;li&gt;Visual Aids and Examples: Utilize visual aids, data, and real-life examples to illustrate your points and foster a shared understanding. Visual representations can bridge gaps in perception and facilitate consensus-building.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building Trust and Collaboration - Trust and collaboration are key elements of consensus-building. Consider the following approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encourage Collaboration: Foster a culture of collaboration by promoting teamwork and emphasizing collective goals. Encourage participants to work together, share ideas, and find mutually beneficial solutions.&lt;/li&gt;
&lt;li&gt;Transparency and Accountability: Promote transparency in decision-making processes. Clearly communicate the rationale behind decisions and ensure accountability for actions. This builds trust and confidence among team members.&lt;/li&gt;
&lt;li&gt;Inclusive Decision-Making: Involve all relevant stakeholders in the decision-making process. Seek diverse perspectives and involve those who may be affected by the outcome. This inclusive approach increases ownership and commitment to the decisions made.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By incorporating these strategies into your consensus-building efforts, you can lay a solid foundation for successful meetings. Remember to appear open to problem discussions rather than solely focusing on solutions and demonstrate respect for stakeholders by inviting their contributions. Consensus-building requires active engagement and continuous effort to create an environment where diverse voices are valued.&lt;/p&gt;
&lt;p&gt;Next up we should discuss the effective ways of communication in order to execute above strategies. And discuss why trust is pramount to executing these strategies. Expect that in the next installment of this blog post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>About Me</title>
        <link>https://osadalakmal.github.io/about/</link>
        <pubDate>Sat, 28 Aug 2021 19:40:31 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/about/</guid>
        <description>


&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/img/profile.jpg&#34; alt=&#34;My Profile Picture&#34; width=&#34;60%&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;I am a software developer with more than a decade of experience in software development currently working as a Lead Senior Solutions Architect at Dialog PLC in Colombo, Sri Lanka.&lt;/p&gt;
&lt;p&gt;I graduated from University of Moratuwa, the leading university in Sri Lanka with a degree in Electronics and Telecommunication. Since then I have had many hats, played many roles in the software industry. My primary interests in the field are software build systems, developer experience, programming languages and database systems.&lt;/p&gt;
&lt;p&gt;My primary field of domain knowledge is in trading and finance. With almost ten years at Bloomberg, two years and London Stock Exchange Group after completing all three exams in CFA, I am proficient in Buy side, FMI space and financial information systems.&lt;/p&gt;
&lt;p&gt;I have recently switched to a more direct consumer software related role and am enjoying the challenges that comes with leaving a comfortable are for a fresh start.&lt;/p&gt;
&lt;p&gt;My brief resume is available &lt;a class=&#34;link&#34; href=&#34;https://osadalakmal.github.io/docs/osada-resume.pdf&#34; &gt;here&lt;/a&gt; and detailed resume is available &lt;a class=&#34;link&#34; href=&#34;https://osadalakmal.github.io/docs/osada-resume-detailed.pdf&#34; &gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am a dad of two lovely kids who I spend most of my free time with. Creating memories with them is a second full time Job! In my spare time I like to travel, read and play table tennis. I hold dual citizenship in United Kingdom and Sri Lanka. After having spent nearly a decade in UK, I am currently back in Colombo, Sri Lanka.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Not your grandmas&#39; docker - Part 2</title>
        <link>https://osadalakmal.github.io/posts/container-part2/</link>
        <pubDate>Thu, 26 Aug 2021 10:00:50 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/container-part2/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/img/container-arial.jpg" alt="Featured image of post Not your grandmas&#39; docker - Part 2" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#components-of-the-container-ecosystem&#34;&gt;Components of the container ecosystem&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#container-engines&#34;&gt;Container Engines&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-host&#34;&gt;Container Host&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#registry-server&#34;&gt;Registry Server&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-orchestration&#34;&gt;Container Orchestration&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-runtime&#34;&gt;Container Runtime&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Now that we have discussed the basics of containers, lets dive in to the details. Modern container tooling goes way beyond simply running an OS image in a separate context.&lt;/p&gt;
&lt;h2 id=&#34;components-of-the-container-ecosystem&#34;&gt;Components of the container ecosystem&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/DockerEcosystem.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Container Ecosystem&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-engines&#34;&gt;Container Engines&lt;/h3&gt;
&lt;p&gt;A container engine will run a container given the user input to do so. You can customize it&amp;rsquo;s behavior through several parameters. Note that it does not necessarily need to know where images are on remote servers and how to get them. In fact it even does not actually run them by itself, usually thats delegated to the container runtime. More on that later. And there are of course proprietary implementations of container engines at various cloud providers.&lt;/p&gt;
&lt;p&gt;The basic responsibilities of this layer include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using various input to determine runtime behavior of the container (network, storage, etc)&lt;/li&gt;
&lt;li&gt;Decompressing and expanding the container image on disk using a Graph Driver&lt;/li&gt;
&lt;li&gt;Preparing a container mount point, typically on COW (copy on write) storage&lt;/li&gt;
&lt;li&gt;Creating a config.json file with metadata to be passed to the container runtime&lt;/li&gt;
&lt;li&gt;Invoking the Container Runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Options for this component include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.docker.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rkt/rkt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RKT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cri-o.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRI-O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://linuxcontainers.org/lxd/introduction/#LXD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LXD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-host&#34;&gt;Container Host&lt;/h3&gt;
&lt;p&gt;The container host is the system that runs the containers. This could be your local machine running an *nix OS, a VM on the same or a VM/baremetal machine on public/private cloud. Once a container image is pulled from a Registry Server to the local container host, it is said to be in the local cache.&lt;/p&gt;
&lt;h3 id=&#34;registry-server&#34;&gt;Registry Server&lt;/h3&gt;
&lt;p&gt;A registry server is essentially a server that is used to store and server docker images from. These are just URIs usually connected to over HTTPS. you would usually use REST API to interact with them.&lt;/p&gt;
&lt;p&gt;When a container runtime finds that a container image cannot be found in the local cache, it &lt;em&gt;can&lt;/em&gt; invoke a tool to fetch the container image (aka repository) from the registry server. The most well known registry server is docker.io but there are several public alternatives as well as implementations that can be hosted privately for more customization and security. There are also registries that can be reached publicly but only hosts private container images/repositories. Note that these should handled very carefully due to supply chain attacks. It is very important that you think out the consequences of what registries you enable and the security around that.&lt;/p&gt;
&lt;h4 id=&#34;public-container-registries&#34;&gt;Public container registries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docker.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://quay.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CoreOS Quay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;public-reachable---private-repository-registries&#34;&gt;Public reachable - private repository registries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/ecr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Elastic Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/container-registry/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/services/container-registry/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;self-hosted-registries&#34;&gt;Self hosted registries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/datacenter/dtr/2.4/guides/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Trusted Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/vmware/harbor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Harbor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jfrog.com/confluence/display/RTF/Getting&amp;#43;Started&amp;#43;with&amp;#43;Artifactory&amp;#43;as&amp;#43;a&amp;#43;Docker&amp;#43;Registry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JFrog Artifactory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-orchestration&#34;&gt;Container Orchestration&lt;/h3&gt;
&lt;p&gt;Container usage usually starts with a single developer using a docker image to test out his software and making sure it is working as intended. But once multiple teams and multiple applications get involved, you run in to more facets to consider such as shared networking, storage, monitoring and a whole host of others. This is basically the difference between &amp;ldquo;run on my machine&amp;rdquo; vs &amp;ldquo;should run on production&amp;rdquo;. Shipping these applications to production and running these there involves a lot more scaffolding than just running a single container on a developers machine.&lt;/p&gt;
&lt;h4 id=&#34;responsibilities-of-the-container-orchestration-system&#34;&gt;Responsibilities of the Container Orchestration System&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Scheduling and running container workloads on top of a resource provisioning system&lt;/li&gt;
&lt;li&gt;Providing networking layer for containers to inter-communicate&lt;/li&gt;
&lt;li&gt;Providing network traffic control&lt;/li&gt;
&lt;li&gt;Service Discovery (optional)&lt;/li&gt;
&lt;li&gt;Providing a standardized system definition file (helm charts, k8s yaml, docker compose etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-orchestration-systems&#34;&gt;Container Orchestration Systems&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mesosphere.github.io/marathon/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mesos + marathon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/swarm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container Runtime&lt;/h3&gt;
&lt;p&gt;A container runtime actually runs the container image that is on disk essentially converting the on-disk container image to a running process set. The Open Containers Initiative (OCI) Runtime Standard reference implementation  is runc. This is the most widely used container runtime, but there are others OCI compliant runtimes. There are various types of them as well. Some are native runtimes that run the container directly on the host. Some are sandboxed runtimes that run either on a kernel proxy layer or a unikernel. And the latest addition to this space is the standardized interface into kubernetes container runtime - Container Runtime Interface. Kubernetes started with docker runtime as the only option for this and as time went by they started to migrate away from the docker dependency. As they did, they introduced CRI as a way to democratizing/virtualizing the runtime tooling. Now there are multiple conforming implementations&lt;/p&gt;
&lt;h4 id=&#34;responsibilities-of-the-container-runtime&#34;&gt;Responsibilities of the container runtime&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Setting up the container image fs view at the mount point given&lt;/li&gt;
&lt;li&gt;Using the config json to customize the container runtime parameters&lt;/li&gt;
&lt;li&gt;Starting the containerized process using clone or similar syscall&lt;/li&gt;
&lt;li&gt;Setting the isolation and security constructs such as cgroups,  namespace and SELinux&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-runtime-systems&#34;&gt;Container Runtime Systems&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Open Container Initiative (OCI) Runtimes
&lt;ul&gt;
&lt;li&gt;Native Runtimes
&lt;ul&gt;
&lt;li&gt;runC&lt;/li&gt;
&lt;li&gt;Railcar&lt;/li&gt;
&lt;li&gt;Crun&lt;/li&gt;
&lt;li&gt;rkt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sandboxed and Virtualized Runtimes
&lt;ul&gt;
&lt;li&gt;gviso&lt;/li&gt;
&lt;li&gt;runV&lt;/li&gt;
&lt;li&gt;kata-containers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Container Runtime Interface
&lt;ul&gt;
&lt;li&gt;containerd&lt;/li&gt;
&lt;li&gt;cri-o&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Not your grandmas&#39; docker - Part 1</title>
        <link>https://osadalakmal.github.io/posts/container-intro/</link>
        <pubDate>Sat, 14 Aug 2021 14:00:50 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/container-intro/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/img/container-arial.jpg" alt="Featured image of post Not your grandmas&#39; docker - Part 1" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#operating-system-level-virtualization&#34;&gt;Operating System Level Virtualization&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chroot&#34;&gt;chroot&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#solaris-zones-and-containers&#34;&gt;Solaris Zones and Containers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#systemd-nspawn&#34;&gt;Systemd nspawn&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#lxclxd&#34;&gt;LXC/LXD&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#enter-docker&#34;&gt;Enter docker&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-not-docker&#34;&gt;Why not docker?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-buildah-is&#34;&gt;What buildah is&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Most of us got introduced to containers with docker. In fact it seems that docker for most intents and purposes and has become synonym with containers. However there is a vast landscape of technology underneath this seemingly simple facade of containers. So lets try and dig in to what a container is before we introduce the tooling that we will be using today.&lt;/p&gt;
&lt;h2 id=&#34;operating-system-level-virtualization&#34;&gt;Operating System Level Virtualization&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/OS-level-virt.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;OS Level Virtualization&#34;
	
	
&gt;&lt;br&gt;
&lt;br&gt;
Above is a screenshot of the wikipedia page for OS Level Virtualization Technologies. And notice that there are several technologies now close to 20 years old. So virtualization at OS level is by no means a new concept. Lets take a look at some of them&lt;/p&gt;
&lt;h3 id=&#34;chroot&#34;&gt;chroot&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;
This is perhaps the most simple form of a container. It basically changes the root directory to a different directory as specified by the root user. The idea being that the user in the chroot cannot then escape our of that chroot directory in to the real root dir. And for this reason we usually refer to it as a chroot jail.&lt;/p&gt;
&lt;p&gt;There are no other privilege checking or access checking enabled. A privilege user can still create special nodes and run commands from with in the chroot. Therefore it is not really suitable as a way to prevent unwanted access from privileged users. Now since the programs usually expect a standard set of directories and files within the root dir, there are tools like &lt;a class=&#34;link&#34; href=&#34;https://olivier.sessink.nl/jailkit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jailkit&lt;/a&gt; that simplify this procedure&lt;/p&gt;
&lt;p&gt;What can this be used for? Well mostly I have seen it being used for testing and builds. Lets look at each use case&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kroki.io/blockdiag/svg/eNqFj8EKwkAMRO9-RVjPglAFoSiUQsGbCJ7EQ7oNVRp3JZt6Ef9daYUqXfCYYfJmpmRvm-qCNTwmACYXQiWwZ_FeDcw2YA7uhrYBRSmRude2Luj7gJ34WvDai_vWgVL4vOWemax2CgiFljUAugoC3qm3VMQ0hKWR_KP17AXWYKZFnhXJypzSyajRl2s5z5Js0blGHeOwoXUc82dHHPq7LE5-vgDwtXP4&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Block Diagram for Testing with chroot&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For testing, you can think of a chroot as a poor mans container. Once you create a chroot and you have a program that primarily depends on the file system to store data, you can fool it to think it is on a fresh system. And once the program is terminated you can throw away the whole chroot and start again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kroki.io/blockdiag/svg/eNqFj0ELgkAUhO_-imE7B4EFgRSY4DmCTtHhub5UXFxZd7tE_71MIaONjm_mY95MprSs84oK3AJAJIbJMmRptLYC8y3EsWlJ1rBkMlJq0A6uwc5VKh_O_ROggpH1EshYvpC03Wi6rkQ7Elb3dtXb6Nhc2QxQzorffyNPlZPUShtsIGZpEqfhWpyj4KvchFot4jBevqhJXX_MzwH-vL-T_F8-R_qz7w_V0Hug&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Block Diagram for Building with chroot&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For builds, chroots are wonderful because you control every aspect of the whole system from a storage point of view and that is all that is needed for builds. They don&amp;rsquo;t need remote data storage services for the most part and even if you need to push artifacts to a separate remote storage service that can be achieved by creating a suitable package from the output of the build process itself. Usually you will have a pre-packaged chroot that you store in a tarball containing all the build tools and the fundamental parts of whatever *nix system you are running on. Then after you have done the build you usually package up your build artefacts in to whatever suitable format is (wheels for python, crates for rust, RPM/deb for C etc) and push it to an artefact server. This keeps the builds reproducible as long as the&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;chroot tarball is the same&lt;/li&gt;
&lt;li&gt;the source is the same&lt;/li&gt;
&lt;li&gt;the build process is the same&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that you can reproduce older builds on demand assuming you keep the chroot tarballs around for long enough.&lt;/p&gt;
&lt;h3 id=&#34;solaris-zones-and-containers&#34;&gt;Solaris Zones and Containers&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;
These are probably the best known implementation of OS level virtualization outside of linux. Although FreeBSD jails are quite well known too. I have no experience regarding those though so I will stick with Zones.&lt;/p&gt;
&lt;p&gt;A Solaris Container is the combination of system resource controls and the boundary separation provided by zones. Zones are completely separate server instances within a single physical server. In fact these are usually used to provide isolated test servers for the developers since almost no one is going to need a maxed out SPARC-T5-8 to test their application. Sys admins can reduce cost and provide most of the same protections of separate machines on a single machine by using zones.&lt;/p&gt;
&lt;h3 id=&#34;systemd-nspawn&#34;&gt;Systemd nspawn&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;https://osadalakmal.github.io/img/systemd-meme.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Meme about Systemd&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;By now you should not be surprised to learn that there is an implementation of a container technology inside systemd. Everything but the kitchen sink remember?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Systemd_components.svg/440px-Systemd_components.svg.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Systemd Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is implemented on top of cgroups and is supposed to help users with containing processes easily in systemd. It is better in security terms than a chroot since it has process level security features as well. In that way it is similar to lxd or lxd. You can find more information &lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/systemd-nspawn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;lxclxd&#34;&gt;LXC/LXD&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/lxc-architecture.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;LXC Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;LXC allows running multiple isolated Linux systems (containers) on a control host using a single Linux kernel.&lt;/p&gt;
&lt;p&gt;It combines cgroups functionality that allows limitation and prioritization of resources (CPU, memory, block I/O, network, etc.) and namespace isolation functionality that allows complete isolation of an application&amp;rsquo;s view of the operating environment, including process trees, networking and mounted file systems.&lt;/p&gt;
&lt;p&gt;Previously LXC only supported privilege containers though starting with the LXC 1.0 release, it is possible to run containers as regular users on the host using &amp;ldquo;unprivileged containers&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/lxd-architecture.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;LXD Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;LXD is a system container manager. It is basically an alternative implementation of LXC rather than something completely different. Just that it is being pushed by canonical instead of Red Hat (Oops I mean IBM!).&lt;/p&gt;
&lt;h2 id=&#34;enter-docker&#34;&gt;Enter docker&lt;/h2&gt;
&lt;p&gt;The problem with all these OS level virtualization technology was the audience. In fact it wasn&amp;rsquo;t even a problem but a feature. They were all aimed at system administrators, developer tooling producers and similar folks who provided services &lt;em&gt;to the developers&lt;/em&gt; To be the next big thing apparently you needed to target the developers who needed a dumbed down front end to the whole thing so they could focus on the more interesting things - the business logic.&lt;/p&gt;
&lt;p&gt;Docker was created to mostly take existing virtualization technology and simplify it to the point your average developer could operate it without even understanding what was going on under the hood. Like all good tools it allowed people to make use of the technology without worrying too much about how and why of it.&lt;/p&gt;
&lt;p&gt;It reduced the setup of the container environment to a simple enough DSL that solved 99% of the problems of the average developer. It reduced the number of concepts the developers had to hold in their heads to a well defined few. And it made the management of the containers and their run time behavior a breeze by introducing a single well defined command line interface.&lt;/p&gt;
&lt;p&gt;This meant that for the better part of the last decade docker was known as the defacto container management system and rightly so.&lt;/p&gt;
&lt;h2 id=&#34;why-not-docker&#34;&gt;Why not docker?&lt;/h2&gt;
&lt;p&gt;Even though the user facing parts of the docker eco system was well thought out and intuitive, the backend and the ergonomics were anything but. If you have ever had the (mis?)fortune of having to work with dockerfiles for anything more than simple Hello World projects, you will know how hard it is to produce good ones that make sensible trade offs and produce acceptable image sizes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The builds tend to be too blown up. Image layers are unnecessarily large if you don&amp;rsquo;t take absolute care. See &lt;a class=&#34;link&#34; href=&#34;https://developers.redhat.com/blog/2016/03/09/more-about-docker-images-size&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; for an example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is very easy to make mistakes. Build time dependent images, have side effects etc. See &lt;a class=&#34;link&#34; href=&#34;https://codefresh.io/containers/docker-anti-patterns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; for an example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The multi stage builds are cumbersome to work with&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax leaves things to be desired. Mostly you will end up working with shell statements but it is not a shell script. So none of your usual tools will help you (think shellcheck etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don&amp;rsquo;t have root/Administrator access you cannot use docker. (Not completely correct - see &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/security/rootless/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. But for the most part no one will try this)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are just a few but you get the idea. And this is where buildah comes in&lt;/p&gt;
&lt;h2 id=&#34;what-buildah-is&#34;&gt;What buildah is&lt;/h2&gt;
&lt;p&gt;Buildah take the docker approach of building container images and managing them and first breaks it down in to components. Specifically there are three main components.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://buildah.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;buildah&lt;/a&gt; -&lt;br&gt;
This tool allows us to build container images.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://podman.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;podman&lt;/a&gt; -&lt;br&gt;
This allows us to manage runtime instances of the containers.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/containers/skopeo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;skopeo&lt;/a&gt;&lt;br&gt;
This allows us to work with container registries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So it essentialy decomposes the work done by the single docker command. How is this better? Well it allows the unix concept of one tool that does one thing best to work.&lt;/p&gt;
&lt;p&gt;Thats it for this post. Next post will discuss OCI vs docker and what different components of a container runtime is and how they come together to run a container.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Adventures in WSL Land</title>
        <link>https://osadalakmal.github.io/posts/wsladventures/wsladventures/</link>
        <pubDate>Wed, 16 Jun 2021 12:00:05 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/wsladventures/wsladventures/</guid>
        <description>&lt;h1 id=&#34;adventures-in-wsl-land&#34;&gt;Adventures in WSL Land&lt;/h1&gt;
&lt;p&gt;Recently I have joined a new company and as almost always is the case ( at least in Sri Lanka ) I received a laptopthat runs Windows. In this case it was running a rather old version of Windows 10 that did not support WSL2. This documents my adventures in getting this laptop setup so that I can have a relatively modest working and development environment familiar to most *nix developers.&lt;/p&gt;
&lt;h2 id=&#34;getting-to-a-good-starting-place&#34;&gt;Getting to a good starting place&lt;/h2&gt;
&lt;p&gt;The first point of order was getting windows updated so that we could at least try on a new way of developing on this laptop. To this end I started by forcing a windows update. And curiously this failed. Turns out the reason was a McAfee program that was installed on the laptop for some security work. Turns out it was incompatible with the windows update. After that was resolved I was off to the races. But a good thing to keep in mind is always check if you are running the latest version of the OS and unless there is a very good reason not to do so, always upgrade it to the latest version.&lt;/p&gt;
&lt;h2 id=&#34;virtualization-platforms&#34;&gt;Virtualization platforms&lt;/h2&gt;
&lt;p&gt;Next up was selecting a virtualization platform to be used. In the past I had almost always reached for virtual box. VMWare was prohibitively costly and nowhere near as intuitive. But sadly Virtualbox seems to be neglected more and more under the stewardship of Oracle and there are no signs of things improving anytime soon. I am guessing Larry doesn&amp;rsquo;t really see a point in free things unless it is Oracle getting those free things. So I was pretty happy to find that windows now includes a native virtualization platform called Hyper-V.&lt;/p&gt;
&lt;h2 id=&#34;hyper-v---still-rough-around-the-edges&#34;&gt;Hyper-V - Still Rough Around the edges&lt;/h2&gt;
&lt;p&gt;The management of the VMs is done via a GUI called Hyper-V Manager (This is microsoft remember?). It looks something like below &lt;img src=&#34;https://osadalakmal.github.io/img/Microsoft-Hyper-V-manager.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Hyper-V Manager&#34;
	
	
&gt;. There is a list of VMs in the middle and the operations that can be carried on the VMs tucked away on the right in a separate pane. It looks like a reverse version of virtual box GUI. The looks are deceptive though and not all the crucial functionality is available through the GUI. The majority of the GUI seems to be just a nice overlay over command line tooling that is best accessed through the Powershell command line. A good case in point is the networking part of the virtualization infrastructure. The networking part of the configuration is hidden behind the &amp;ldquo;Virtual Switch Manager&amp;rdquo;. But that is actually best accessed through the command line as described &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. And there are strange limitations and errors that can pop up. One is that there can only be one NAT internal type switch and if you somehow manage to create two, the system seems to go in to this undefined state where no virtualization features will work including docker with HyperV backend. You would have to install a patch, prey a couple of times to the god of small bugs of virtualization (Thanks Terry!) and restart the machine a couple of times. And hopefully it will resolve itself.&lt;/p&gt;
&lt;p&gt;Next time we will go in to details about the networking and how to make sense of the options as someone coming from virtualbox/Linux land.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cloud9 - A cloud based IDE for your code</title>
        <link>https://osadalakmal.github.io/posts/cloud9/cloud9/</link>
        <pubDate>Mon, 29 Mar 2021 12:33:51 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/cloud9/cloud9/</guid>
        <description>&lt;h2 id=&#34;cloud9---a-cloud-based-ide-for-your-code&#34;&gt;Cloud9 - A cloud based IDE for your code&lt;/h2&gt;
&lt;p&gt;I first heard of cloud9 before it was acquired by AWS in 2016. In those days it was a novelty. But the good sort - the sort of thing you think of and say &amp;ldquo;Man, if only I had that sort of flexibility&amp;rdquo;. This was before Google docs was a widespread thing and collaborating on a cloud IDE that existed independently of your computer was unheard of. Everytime I wanted to send some code snippet to a coworker and they needed more context, I would think to myself, there has to be a better way to do this.&lt;/p&gt;
&lt;p&gt;Cloud9 was originally founded in 2010 and created the open source product. This was then acquired by Amazon and turned in to their own offering of a cloud IDE running on EC2.&lt;/p&gt;
&lt;h3 id=&#34;provisioning-a-developer-environment&#34;&gt;Provisioning a developer environment&lt;/h3&gt;
&lt;p&gt;The IDE itself is actually free. What you pay for is the environment that it runs on. Lets see how to provision one of these. Go to cloud9 on the management console and start spinning up an environment and you are presented with the initial screen.&lt;br&gt;
&lt;img src=&#34;https://osadalakmal.github.io/img/cloud9-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After that you get to choose the environment that you run the cloud9 IDE on. I am of course choosing a t2.micro so that I can use the free tier for it.&lt;br&gt;
&lt;img src=&#34;https://osadalakmal.github.io/img/cloud9-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally you get to review and approve the request.&lt;br&gt;
&lt;img src=&#34;https://osadalakmal.github.io/img/cloud9-3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Codestar - A new way to get started on AWS Projects</title>
        <link>https://osadalakmal.github.io/posts/codestar/codestar/</link>
        <pubDate>Sun, 28 Mar 2021 20:08:50 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/codestar/codestar/</guid>
        <description>&lt;h2 id=&#34;codestar---a-new-approach-to-development-on-aws&#34;&gt;Codestar - A new approach to development on AWS&lt;/h2&gt;
&lt;p&gt;Codestar is a relatively new approach to creating new application that run on AWS infrastructure. The interesting thing about this seems to be that it gives newbie developers like myself to get bootstrapped and go from zero to hundred in a relatively short time period.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codestar-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;InitialScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the initial screen shown when you first try to create a codestar project. There are several options to choose from but it is mostly elastic beanstalk and lambda focused. I selected golan based lambda project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codestar-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SecondScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Then you get to choose a project ID and a project name. Simple enough!. Then comes the choice of where to host the project repository. For now only &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/codecommit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AWS codecommit&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github&lt;/a&gt; are supported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codestar-3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ThirdScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I chose github as the hosting option since I only wanted to try one new thing at a time. After going through the usual permission windows, it creates the initial project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codestar-4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FourthScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The final review screen before things are created fully.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codestar-5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FifthScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And these are all the different resources that are created by the codestar tool. Looking at that list there are several different things that you may be hard pressed to get right if you were doing this by hand. Considering the whole process took me less than 2 mins to complete, this seems like a no brainer to use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codebuild-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodeBuild&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is my first time seeing AWS CodeBuild and it seems usable enough and easy enough to navigate for even a first timer like me. I have been an avid user of Jenkins and CircleCI for the most part of my career. Lately I have been toying around with Gitlab and Github built in automation frameworks. Compared to them Codebuild does seem to have a lot more room for growth. But it seems promising enough to warrant a post of its own.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codedeploy-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodeDeploy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Codedeploy is probably the one part of the puzzle that I took the least effort to review. It seems to be handling the deployment ok and I stopped looking at it after that cursory glance. Hopefully I can correct that in my next post about CodeBuild and CodeDeploy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/codepipeline-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodePipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And together CodeBuild and CodeDeploy form CodePipeline. The CI/CD solution on AWS. Again compared to something like Jenkins it seems to leave a lot to desire but for the task at hand it seems to work pretty well. And best of all I didn&amp;rsquo;t have to create any of it!&lt;/p&gt;
&lt;p&gt;So there it is. The application was created, built and deployed all within the space of a few minutes. Here is a simple REST request&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/REST-codestar-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;REST-Codestar&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;All in all codestar seems like an awesome solution if you are just getting started in AWS solution building like me. It covers a lot of ground and lets you focus on the problem at hand.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cost Of Allocation in High Performance Systems</title>
        <link>https://osadalakmal.github.io/posts/allocationcost/allocationcost/</link>
        <pubDate>Fri, 05 Feb 2021 08:08:50 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/allocationcost/allocationcost/</guid>
        <description>&lt;h2 id=&#34;impact-of-unproductive-work&#34;&gt;Impact of unproductive work&lt;/h2&gt;
&lt;p&gt;In high performance systems we try to make sure we do as little unproductive work as we possible. As Andrei Alexdrascu points out in one of his presentations on the subject, the fastest bit of code is the code that does not run. So it is essential that we try to avoid as much unproductive work as possible.&lt;/p&gt;
&lt;p&gt;When we say unproductive work it usually seems we are talking about unwanted calculations, operations, file access and db access. But this goes beyond that - Any operation that does not directly contribute to calculating the output that your application is responsible for is a waste. This includes GC in garbage collected languages, memory allocation and deallocation in languages with manual memory management languages such as C++&lt;/p&gt;
&lt;h2 id=&#34;memory-is-unessential&#34;&gt;Memory is unessential?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgflip.com/4wxk03.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Surpised Pikachu&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;No it is essential. But it is a supporting operation. So try not to do it in the critical path. When you know you need memory, allocate it beforehand and reuse what you can. Try and avoid fragmentation as much as you can. There are several ways to do this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Preallocate enough memory and reuse&lt;/li&gt;
&lt;li&gt;Use a smart factory pattern that allows object level reuse&lt;/li&gt;
&lt;li&gt;Use an allocator that reduces cost of memory allocation and deallocation ( eg: &lt;a class=&#34;link&#34; href=&#34;https://google.github.io/tcmalloc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tcmalloc&lt;/a&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;in-practise&#34;&gt;In practise&lt;/h2&gt;
&lt;p&gt;We will use the following code sample to simulate the effect of malloc causing thread contention.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/osadalakmal/e0a3bd5c8f9d27c2de20163fde1c4af9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This allows us to benchmark the completion time for two threads when they are allocating memory vs when they are not. The following is the result when running on my machine&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/perf-with-system-malloc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;system-malloc-perf&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As can be seen there is a significant slow down when two threads are both running malloc at the same time. You can see that the slow down purely due to malloc when running the same two function calls serially is much less when compared to the slow down in threads. This is because by default malloc has to synchronize across threads due to there being a single allocator for the whole program.&lt;/p&gt;
&lt;p&gt;This synchronization causes a delay that exceeds the cost of pure malloc call. Now this can be reduced by using an allocator that performs better in multithreaded applications. One example of this is tcmalloc as explained earlier. Here is the same code running but this time linked against tcmaloc&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/perf-with-system-malloc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;system-malloc-perf&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As can be seen this signiicantly reduces the cost of malloc synchronisations. This is better than using system malloc but still worse than not mallocing at all.&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;Memory management is not essential to produce the out of an application. Since it is an auxilary function, try to keep it away from the critical path at all times. Specially when you are running multithreaded workloads where thread contention due to global locks in malloc become a big bottleneck.&lt;/p&gt;
&lt;p&gt;You can use better allocator if you absolustely have to do allocation in the critical path to do it more efficiently than system malloc&lt;/p&gt;
&lt;p&gt;As always remember to measure. YMMV&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQLite for High Throughput Applications</title>
        <link>https://osadalakmal.github.io/posts/sqliteperformance/sqliteperformance/</link>
        <pubDate>Sat, 30 Jan 2021 15:27:50 +0530</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/sqliteperformance/sqliteperformance/</guid>
        <description>&lt;p&gt;SQLite is an embedded SQL Library. This means that It is a single library that you link against and now your application has access to a full blown SQL server within the process itself. It does not need a separate tool to access the database. The database is a single file stored on Disk. It also comes with a binary that can read and manipulate databases&lt;/p&gt;
&lt;h3 id=&#34;when-to-use-sqlite&#34;&gt;When to use SQLite&lt;/h3&gt;
&lt;p&gt;The advise straight from its creator is to use it to replace flat files. This is specially true if you are writing strucutred data that consist of a set of repeated fields. Usually these can be written in any of the human readable formats - XML, JSON, YAML or good old CSV. So what are the advantages of using a sqlite database instead of one of the above?&lt;/p&gt;
&lt;p&gt;The file operations handling is already done for you. Creation, appending, traversing etc are all taken care of. You are just operating on the level of records.&lt;/p&gt;
&lt;p&gt;The record structure is enforced for you&lt;/p&gt;
&lt;p&gt;The database can be exported anywhere and worked with on any platform&lt;/p&gt;
&lt;p&gt;Querying becomes as easy as a SQL query. Any developer worth the title should be able to get at the database and do an initial analysis in just a few minutes. There are excellent Uis to help with this as well&lt;/p&gt;
&lt;p&gt;Interop with other tools is very easy. Generating XML, CSV from any table is just one command line away. Sending data to plotting tools is also one command line away.&lt;/p&gt;
&lt;p&gt;Tips for writing SQLite files in high throughput applications&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Always wrap your inserts in transactions. And batch your inserts together. You may have to adjust how many you batch together depending on your RPO requirements. But in general this allows the database to batch things up to save time on individual inserts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use prepared statements. Since you will be inserting the same record structure again and again, there is no point in running your SQL text through the planner again and again. Use a single prepared statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dont allocate memory for new records. Use transient variable binding so that we dont allocate and deallocate memory for every single insert statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set journal to be in memory. Usually the journal gets written to the disk. If you want to save time on the disk writes you can always force the journal to be in memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the synchronous writes to disk. SQLite will usually fsync after writing to make sure that the data will actually get flushed to the disk controller. We can let the OS determine when it is optimum to flush the data and return without the fsync to save time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page/Cache size. These settings are linked together. Page size determines how much data the process can hold in memory before the OS forces the dirty pages to be flushed to the disk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The Code&lt;/h3&gt;
&lt;p&gt;The full source code for this example can be found in &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/sqlite-performance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/osadalakmal/sqlite-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main code is as follows&lt;/p&gt;
&lt;script src=&#34;http://gist-it.appspot.com/http://github.com/osadalakmal/sqlite-performance/blob/main/test.cpp&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;The results can be seen here running on my laptop&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/img/sqlite-performance.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;sqlite-performance&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;as you can see starting from a baseline of using just prepared queries we keep adding the options mentioned above. By far the biggest impact seems to be from stopping syncrhonous write to disk for db file.&lt;/p&gt;
&lt;h3 id=&#34;alternatives-to-sqlite&#34;&gt;Alternatives to SQLite&lt;/h3&gt;
&lt;p&gt;There are several reasons that SQLite might not suit your workload.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your data structure might be more suited for KV store. If all you are storing is one opaque value for a given key, a KV store makes definite sense.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might need even more throughput than all the above steps can provide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will need to adjust write amplification/read amplification etc parameters to make sure you fit within the disk budgets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If this sounds like you, a LSM tree based store will be more suited for you. There are several to choose from. Most of them inspired or forked from the original – LevelDB. Examples are MDB, Tokyo cabinet, RocksDB.&lt;/p&gt;
&lt;p&gt;These are based fundamentally on a different set of requirements than SQLite. SQLite was born as a  replacement for SQL Clients that needed to retain SQL interface without the servers being present. LSM Tree based KV stores were written to managed very high sustained rates of writes&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
