<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Osada Blog – Thoughts on Software Engineering, Programming, Systems, and Life</title>
        <link>https://osada.blog/posts/</link>
        <description>Recent content in Posts on Osada Blog – Thoughts on Software Engineering, Programming, Systems, and Life</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Sun, 17 Aug 2025 21:50:31 +0100</lastBuildDate><atom:link href="https://osada.blog/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>The Shipping Forecast and the Art of Communication</title>
        <link>https://osada.blog/posts/be-more-like-shipping-forecast/</link>
        <pubDate>Sun, 17 Aug 2025 21:50:31 +0100</pubDate>
        
        <guid>https://osada.blog/posts/be-more-like-shipping-forecast/</guid>
        <description>&lt;img src="https://osada.blog/posts/be-more-like-shipping-forecast/shipping.webp" alt="Featured image of post The Shipping Forecast and the Art of Communication" /&gt;&lt;p&gt;As an immigrant to the UK, I had to absorb the culture as a grown-up. Things that others learned through cultural osmosis, I had to consciously seek out and understand - including the norms of UK TV and radio. Now that I&amp;rsquo;m working on BBC Sounds, it&amp;rsquo;s more important than ever for me to be aware of the cultural touchstones of Radioland.&lt;/p&gt;
&lt;p&gt;For a long time, I had no idea what the Shipping Forecast was, although it seemed as quintessentially British as it could get. I only knew it from the “Calm” playlists on BBC Sounds - a chant-like recital of odd place names and numbers that people found oddly soothing.&lt;/p&gt;
&lt;p&gt;Then one day, exhausted and a little breathless after a hike, I caught the Shipping Forecast live on Radio 4. For the first time, I truly listened. Its rhythm was regular, clipped, steady - strangely calming. Most of it was guessable: numbers for wind force, the last part for visibility. But the place names were a mystery. My curiosity was piqued.&lt;/p&gt;
&lt;p&gt;What struck me when I dug deeper was how deliberately it was designed - not for poetry, but for survival. A century on air, the Shipping Forecast continues to save sailors’ lives because of the way it communicates: clearly, consistently, and unambiguously in a noisy environment. And that, I realized, is exactly the lesson we need for technical communication in our own teams and organizations.&lt;/p&gt;
&lt;h2 id=&#34;a-crash-course-on-the-shipping-forecast&#34;&gt;A Crash Course on the Shipping Forecast
&lt;/h2&gt;&lt;p&gt;The Shipping Forecast is a weather bulletin for the seas around the British Isles. Issued by the UK Met Office, it has been on the air since 1924. Its origins trace back to Vice-Admiral Robert FitzRoy in the 1860s, who began issuing storm warnings to reduce shipwrecks.&lt;/p&gt;
&lt;h3 id=&#34;structure-of-the-forecast&#34;&gt;Structure of the Forecast
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General Synopsis&lt;/strong&gt; - A summary of pressure systems (highs and lows), their current location, pressure in millibars, and their expected movement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: “Low, Rockall, 990, slow-moving, expected 1002 by 0600 tomorrow.”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sea Area Forecasts&lt;/strong&gt; - 31 named sea areas around the UK and Ireland, always read in the same order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;each-areas-forecast-includes&#34;&gt;Each Area’s Forecast Includes
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Wind direction and strength (Beaufort scale, 0-12)&lt;/li&gt;
&lt;li&gt;Weather (e.g., rain, showers, fog, fair)&lt;/li&gt;
&lt;li&gt;Visibility (good = &amp;gt;5 miles, moderate = 2-5 miles, poor = 1-2 miles, very poor = &amp;lt;1 mile)&lt;/li&gt;
&lt;li&gt;Optional tidal notes in extended bulletins&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;key-facts&#34;&gt;Key Facts
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;First broadcast: 1924 on the BBC.&lt;/li&gt;
&lt;li&gt;Still broadcast four times daily on Radio 4 (0048, 0520, 1201, 1754).&lt;/li&gt;
&lt;li&gt;It covers 31 sea areas, such as Viking, Dogger, German Bight, Fastnet, and Rockall.&lt;/li&gt;
&lt;li&gt;The language is deliberately short, standardized, and unambiguous for clarity on poor radios.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;when-the-seas-are-rough-organizational-communication&#34;&gt;When the Seas Are Rough: Organizational Communication
&lt;/h2&gt;&lt;p&gt;I’ve experienced firsthand how crucial communication becomes during upheaval. When an organization goes through a major transformation, communication is not an afterthought-it&amp;rsquo;s the glue that holds everything together. As leaders, how we handle this communication is paramount, because the success of the transformation depends on it. The people we manage look to us to provide information and reassurance that the disruptions and changes are truly for the good of the organization. They want to know how it will impact them, and what tomorrow will look like.&lt;/p&gt;
&lt;p&gt;And yet, too often, communication during transformations feels overbearing. Updates are packed with details people don’t need or aren’t equipped to decipher. The essentials get buried, and people tune out. In tuning out, they miss the pieces of information that could genuinely help them navigate change. Even more harmful, they may interpret a lack of clarity and superfluous details as an intentional effort to obfuscate. This quickly erodes trust, making it harder to get positive buy-in for the changes we are implementing.&lt;/p&gt;
&lt;p&gt;This has always frustrated me. We need a framework that keeps communicators focused on what matters most - the salient details, presented consistently, with no ambiguity. And the Shipping Forecast offers exactly that model.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-noisy-inefficient-communication&#34;&gt;The Problem: Noisy, Inefficient Communication
&lt;/h2&gt;&lt;p&gt;In the situations that matter most - organizational updates, incident response, migrations - the goal is simple: provide enough information to give employees the confidence they need. But communication often fails in predictable ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updates ramble and lose people’s attention. For example, an incident update that drags on for ten minutes without ever stating the impact or action items leaves everyone confused.&lt;/li&gt;
&lt;li&gt;Messages lack structure, so if you join late, you’re lost. A migration briefing that jumps between topics with no clear beginning, middle, or end forces people to guess where they are in the plan.&lt;/li&gt;
&lt;li&gt;Jargon creeps in, introducing ambiguity. Saying “we’ll refactor the orchestration layer” without explaining what systems that refers to leaves many stakeholders unsure of the change.&lt;/li&gt;
&lt;li&gt;Some things are over-explained while others are skipped. A design review might go into detail about which framework version is used but never mention who owns the rollout.&lt;/li&gt;
&lt;li&gt;Updates arrive inconsistently, so no one knows when to expect them. A status email sent at random times each week is quickly ignored because the team cannot rely on it as a dependable source of truth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is confusion, frustration, and wasted energy. In moments of transformation or crisis, the cost is even higher: teams feel unmoored.&lt;/p&gt;
&lt;h2 id=&#34;what-the-shipping-forecast-gets-right&#34;&gt;What the Shipping Forecast Gets Right
&lt;/h2&gt;&lt;p&gt;The Shipping Forecast has perfected communication for noisy, high-stakes environments. Its principles are deceptively simple but powerful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Always in the same order, with the same structure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Brevity&lt;/strong&gt;: Nothing is superfluous; only the essentials remain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clarity&lt;/strong&gt;: Standardized words ensure there is no ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coverage&lt;/strong&gt;: The whole coastline is covered, end to end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: Delivered four times daily, without fail.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition&lt;/strong&gt;: Core facts are repeated until they stick.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For sailors, these principles are life-saving. For us, they can make the difference between communication that enables action and communication that creates noise.&lt;/p&gt;
&lt;h2 id=&#34;why-consistency-coverage-and-reliability-matter&#34;&gt;Why Consistency, Coverage and Reliability Matter
&lt;/h2&gt;&lt;p&gt;In organizational transformations, consistency and reliable repetition aren’t dull-they build confidence. People are dealing with new ways of working, new technology, and new structures. In that environment, clear consistent repetition is reassurance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It shows nothing is being hidden.&lt;/li&gt;
&lt;li&gt;It signals that everything has been thoroughly thought through.&lt;/li&gt;
&lt;li&gt;It makes the audience confident in the plan because they can see its completeness.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For engineering managers and tech leads, this matters directly. Your team should come to believe that communication is crafted for their benefit, that it was intentional and thoughtful, and that leadership cares about making the change succeed.&lt;/p&gt;
&lt;h2 id=&#34;how-to-make-your-communication-more-like-the-forecast&#34;&gt;How to Make Your Communication More Like the Forecast
&lt;/h2&gt;&lt;p&gt;When clarity matters most - for organizational updates, technical changes, incidents, or migrations - we should borrow from the Shipping Forecast:&lt;/p&gt;
&lt;h3 id=&#34;consistency&#34;&gt;Consistency
&lt;/h3&gt;&lt;p&gt;Use the same structure every time. For example, always start incident updates with impact, then mitigation, then next steps. Likewise, if you write weekly status reports, keep the same headings so readers know where to look for information.&lt;/p&gt;
&lt;h3 id=&#34;brevity&#34;&gt;Brevity
&lt;/h3&gt;&lt;p&gt;Cut the noise; provide only what matters. An update that simply says, “Service X is degraded, engineers are working on rollback, ETA 20 minutes” is far more effective than three paragraphs of background detail. A migration notice that summarizes the change in three bullet points is more likely to be read than a three-page essay.&lt;/p&gt;
&lt;h3 id=&#34;clarity&#34;&gt;Clarity
&lt;/h3&gt;&lt;p&gt;Avoid ambiguity; use the simplest words. Instead of saying “there are issues with authentication subsystems,” say “users cannot log in.” Instead of “orchestration layer refactor,” say “we are changing how services talk to each other.”&lt;/p&gt;
&lt;h3 id=&#34;coverage&#34;&gt;Coverage
&lt;/h3&gt;&lt;p&gt;Cover the topic end to end. If you announce a new deployment pipeline, don’t just describe the technical flow; also mention who owns it, how teams onboard, and what support is available. Similarly, if you communicate a process change, spell out both what is changing and what stays the same.&lt;/p&gt;
&lt;h3 id=&#34;reliability&#34;&gt;Reliability
&lt;/h3&gt;&lt;p&gt;Deliver updates at a predictable rhythm. Sending a daily stand-up note at 9am sharp builds trust. Publishing a weekly engineering summary every Friday ensures people rely on it. Irregular communication erodes confidence.&lt;/p&gt;
&lt;h3 id=&#34;repetition&#34;&gt;Repetition
&lt;/h3&gt;&lt;p&gt;Reinforce the essentials until they stick. In a transformation, it is worth saying three times: “The old system will be retired on 31 October.” In incident communications, repeat the key action: “Restart your client if you see this error.” Repetition of core facts reassures people that they haven’t missed something.&lt;/p&gt;
&lt;h2 id=&#34;closing&#34;&gt;Closing
&lt;/h2&gt;&lt;p&gt;For a century, the Shipping Forecast has guided sailors through storms. I discovered it by chance and was struck by how soothing it was. But the reason it’s soothing is the same reason it’s effective: it is structured, consistent, reliable, and repetitive.&lt;/p&gt;
&lt;p&gt;Not every kind of communication should be like the Shipping Forecast - some moments demand storytelling, persuasion, or brainstorming. But when the goal is to disseminate information clearly and efficiently, especially in noisy or turbulent environments, the lesson holds.&lt;/p&gt;
&lt;p&gt;Good communication doesn’t just inform. Like the Shipping Forecast, it enables people to act with confidence, no matter how stormy the seas.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Programming&#39;s New Frontier: The Rise of LLM-First Languages</title>
        <link>https://osada.blog/posts/languages-designed-for-llms/</link>
        <pubDate>Thu, 14 Aug 2025 20:16:03 +0100</pubDate>
        
        <guid>https://osada.blog/posts/languages-designed-for-llms/</guid>
        <description>&lt;img src="https://osada.blog/posts/languages-designed-for-llms/designed.webp" alt="Featured image of post Programming&#39;s New Frontier: The Rise of LLM-First Languages" /&gt;&lt;p&gt;Large Language Models (LLMs) have quickly become an integral part of modern software development. Today, most developers encounter them as coding assistants-tools that can generate code on demand by drawing upon patterns learned from vast quantities of open-source and proprietary code. These models can also reference online resources and produce functioning code in seconds.&lt;/p&gt;
&lt;p&gt;But as impressive as they are, this process is far from foolproof.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-with-current-llm-assisted-coding&#34;&gt;The Problem with Current LLM-Assisted Coding
&lt;/h2&gt;&lt;p&gt;While LLMs can produce working solutions quickly, they are prone to significant shortcomings:&lt;/p&gt;
&lt;p&gt;Here are the links for each issue mentioned in the “Current Reality of LLM-Assisted Coding” section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hallucinated dependencies&lt;/strong&gt;: LLMs often generate code that references libraries or APIs that do not exist. This is more than a simple inconvenience; it is now a significant security vulnerability. This phenomenon, sometimes called &amp;ldquo;slopsquatting,&amp;rdquo; creates a new vector for supply chain attacks. Malicious actors can preemptively squat on these hallucinated package names in public repositories like npm and PyPI. &lt;a class=&#34;link&#34; href=&#34;https://www.techradar.com/pro/mitigating-the-risks-of-package-hallucination-and-slopsquatting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TechRadar – Mitigating the risks of package hallucination&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logic errors&lt;/strong&gt;: They can make subtle mistakes that pass undetected until runtime. This is why LLMs are dangerous when used by junior developers. &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@adnanmasood/code-generation-with-llms-practical-challenges-gotchas-and-nuances-7b51d394f588&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium – Code generation with LLMs: practical challenges&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test manipulation&lt;/strong&gt;: In some cases, they will &amp;ldquo;cheat&amp;rdquo; by altering tests to make broken code pass. &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@aipapers/cheating-llms-how-not-to-stop-them-openai-paper-explained-c38ebc637762&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Medium – Cheating LLMs: How (not) to stop them&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context limitations&lt;/strong&gt;: Providing complete context is still a challenge. Developers have experimented with approaches like concatenating entire codebases into a single file, RAG-based (retrieval-augmented generation) solutions, and specialized formats like &lt;code&gt;LLMs.txt&lt;/code&gt;-a file designed to tell the model the &amp;ldquo;story&amp;rdquo; of the repository. Yet none of these methods are optimal. &lt;a class=&#34;link&#34; href=&#34;https://datanorth.ai/blog/context-length&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DataNorth – Context length in LLMs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-the-time-is-right-for-a-change&#34;&gt;Why the Time is Right for a Change
&lt;/h2&gt;&lt;p&gt;We’ve crossed a Rubicon—a point of no return—beyond which the capabilities of coding assistants have fundamentally changed the nature of what’s possible. While earlier models like GPT-4 offered impressive performance, they often struggled with long-term coherence and could &amp;ldquo;forget&amp;rdquo; earlier parts of a conversation due to a more limited context window. The developer&amp;rsquo;s workflow often involved significant manual effort to re-supply context, summarize past conversations, or break down large tasks into small, manageable chunks.&lt;/p&gt;
&lt;p&gt;With the arrival of models like Claude Opus, Claude Sonnet, and GLM-4.5, this dynamic has shifted. Their primary innovation is not just higher performance on benchmarks, but a qualitative leap in their ability to handle massive context windows—hundreds of thousands of tokens, equivalent to thousands of pages of code and documentation. This allows assistants to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maintain state over long, multi-file projects: They can now &amp;ldquo;remember&amp;rdquo; an entire codebase or a significant portion of it, enabling them to make changes that are consistent across multiple files without losing track of the overall architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reason over a complete set of documentation: The model can be given an entire project&amp;rsquo;s documentation, API references, or even a full RFC, and use that information to generate code that is correct and adheres to all specified constraints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exhibit &amp;ldquo;extended thinking&amp;rdquo;: Some of these models are now capable of multi-step, agentic reasoning, where they can generate a plan, execute it, receive feedback, and adjust their strategy, all within a single session. This moves them from being mere code generators to active problem-solvers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Projects like Lovable demonstrate this shift. The fact that such initiatives can deliver working applications in a single pass is evidence that we’ve moved past the experimental phase into a new era of practical, production-ready LLM-assisted programming.&lt;/p&gt;
&lt;h2 id=&#34;the-case-for-llm-native-languages&#34;&gt;The Case for LLM-Native Languages
&lt;/h2&gt;&lt;p&gt;The history of programming languages is a story of responding to the shortcomings of the tools that came before:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kroki.io/plantuml/svg/eNptkl1v0zAUhu_9K46WG6gWqU3SrtsFWqnKBEqrQSW44eYkPk2sOfZkO2UD8d-x3VAiNt_5PI_Oef1xax0a13eS2QehHtFgBxXWD43RveJrLbUBZ1BZj0i5kYXG6B8nIaniGkFOB-yl-6CV22FHsDIC5et8L34SzJYj6ISTdEZZ9hoaBlNcI2EVUr0URobSnOAXA3j_3zGTLMuW-SwQbTiZoTqdIq_mvvqyK8A9ci5UA9nUb76cehlFBmZz9psxSQcHToMRTeuAC0O1E1qxeAzYHLXswx70Ae6Nbny8LnQrUTU9NmQZi2kvtli3QhGs_e4C0MJ2DUl-nVOxGIyVtdRV8jnS1X4LSUFzvqgHnBsOd6S-qzfrS_iER3wbxbvNLodkzq_yKxrMwrWDWWL19ePm2yXsP5dnvYBkwa-Xy79zJ5Oy3KY7dOJI_3JPJtH36Hx_zEeGNH0Xw90AVtZ_q9NthEogMc0NtP6yyKSSjiTBPiuHTyyiwSm8w3WHQqX2kWpxEDWL5cDDSM9r_1b05FIj6hbCu3PRdJbdkuLhr_8BZ4P21Q==&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Evolution of Programming Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The leap from &lt;strong&gt;machine code&lt;/strong&gt; to &lt;strong&gt;assembly&lt;/strong&gt; abstracted raw binary into human-readable mnemonics.&lt;/li&gt;
&lt;li&gt;The arrival of &lt;strong&gt;third-generation languages&lt;/strong&gt; (C, Java) provided higher abstraction for productivity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fourth-generation languages&lt;/strong&gt; like LabVIEW tackled domain-specific needs.&lt;/li&gt;
&lt;li&gt;The rise of &lt;strong&gt;memory-safe compiled languages&lt;/strong&gt; like Rust and Go directly responded to decades of security vulnerabilities from unsafe memory operations.&lt;/li&gt;
&lt;li&gt;The rise of JVM based alternatives to Java came about because of stagnation in Java roadmap. This gave us languages like kotlin, Closure and Scala.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These shifts happened because the &lt;em&gt;context&lt;/em&gt; in which code was written and executed changed.&lt;/p&gt;
&lt;p&gt;Today, we are at another inflection point. The dominant programming languages-Python, JavaScript, Java, C++-are designed to be read, understood, and authored by humans. LLMs can emulate human thought, but that’s still emulation. There’s no reason to believe that a language designed to be optimal for &lt;em&gt;human&lt;/em&gt; authorship is also optimal for &lt;em&gt;machine&lt;/em&gt; authorship.&lt;/p&gt;
&lt;h2 id=&#34;literate-programming-as-a-precursor&#34;&gt;Literate Programming as a Precursor
&lt;/h2&gt;&lt;p&gt;Donald Knuth’s concept of literate programming [Knuth, 1984] was created so that human-readable descriptions could be embedded alongside code-not merely interspersed, but with documentation as the primary artifact and code as a secondary element. In literate programming, the entire program becomes executable documentation.&lt;/p&gt;
&lt;p&gt;For LLMs, this is a natural fit. LLMs excel when they have rich, continuous context, and literate programming provides exactly that: the whole program and its purpose, rationale, and constraints in one coherent narrative. This makes literate programming an ideal model for feeding an LLM the maximum relevant information. We may see a resurgence of this paradigm, adapted for machine consumers as much as for humans.&lt;/p&gt;
&lt;p&gt;Modern tools inspired by literate programming-such as &lt;a class=&#34;link&#34; href=&#34;https://jupyter.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jupyter Notebooks&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://quarto.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quarto&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www-cs-faculty.stanford.edu/~knuth/noweb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;noweb&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://nbdev.fast.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nbdev&lt;/a&gt; already combine narrative and code in ways that could evolve toward LLM-first formats.&lt;/p&gt;
&lt;h2 id=&#34;lessons-from-apl-j-and-q&#34;&gt;Lessons from APL, J, and Q
&lt;/h2&gt;&lt;p&gt;Some languages have historically prioritized other qualities above human readability. APL, J, and Q embrace terse, symbolic syntax for reasons of efficiency and expressiveness. In these languages, code becomes subservient to the goal-whether that’s mathematical compactness or performance-rather than ease of reading.&lt;/p&gt;
&lt;p&gt;Similarly, an LLM-first language may look alien to human eyes, optimized for machine parsing and generation rather than human comprehension. In this way, APL and its descendants offer a blueprint: concise, unambiguous, and structured for the intended consumer, even if that consumer is a machine.&lt;/p&gt;
&lt;h2 id=&#34;characteristics-of-an-llm-first-language&#34;&gt;Characteristics of an LLM-First Language
&lt;/h2&gt;&lt;p&gt;An LLM-native programming language might incorporate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Ultra-Explicit Semantics&lt;/strong&gt; – No implicit defaults; strict typing and explicit declarations. No room for ambiguity please, LLMs bring plenty of their own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-Describing Code&lt;/strong&gt; – Embedded, machine-readable metadata describing intent, dependencies, and constraints. i.e. Literate Programming. Or Joe Armstrong style write-docs-before-code philosophy needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chunk-Optimized Structure&lt;/strong&gt; – Modular design aligned with token window limits for easy context retrieval. Each one would need to be mostly self contained and with the output described separately so it can be fed in to LLMs while the other modules are being generated. Think C/C++ header files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Prevention by Design&lt;/strong&gt; – Syntax rules that block common LLM pitfalls, such as referencing undeclared libraries or similar hallucinations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Anchoring&lt;/strong&gt; – Persistent IDs and hash-based references to ensure the correct version is always referenced. (Content Addressable Storage anyone?)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stable, Bounded Syntax&lt;/strong&gt; – Predictable token patterns for better compression and embedding performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrated Machine/Compiler Feedback&lt;/strong&gt; – Output structured for both humans and models to consume.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;speculative-syntax-examples&#34;&gt;Speculative Syntax Examples
&lt;/h2&gt;&lt;p&gt;Here’s what such a language could resemble:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-llmcode&#34; data-lang=&#34;llmcode&#34;&gt;@module(meta={&amp;#34;version&amp;#34;:&amp;#34;1.2.0&amp;#34;,&amp;#34;purpose&amp;#34;:&amp;#34;Data ingestion pipeline&amp;#34;})
module ingest_pipeline {

  @function(meta={&amp;#34;context_id&amp;#34;:&amp;#34;hash1234&amp;#34;,&amp;#34;owner&amp;#34;:&amp;#34;team-data&amp;#34;})
  fn load_csv(file_path: String) -&amp;gt; DataFrame {
    ensure(file_exists(file_path))
    return parse_csv(file_path)
  }

  @test_integrity(id=&amp;#34;test-001&amp;#34;, immutable=true)
  fn test_load_csv_valid() {
    df = load_csv(&amp;#34;/test/data.csv&amp;#34;)
    assert(df.rows &amp;gt; 0)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This speculative syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses metadata annotations for context.&lt;/li&gt;
&lt;li&gt;Embeds test integrity markers to prevent silent tampering.&lt;/li&gt;
&lt;li&gt;Organizes code in retrieval-friendly modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;literate-programming-executable-context-for-llms&#34;&gt;Literate Programming: Executable Context for LLMs
&lt;/h2&gt;&lt;p&gt;Donald Knuth’s &lt;a class=&#34;link&#34; href=&#34;http://www.literateprogramming.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;literate programming&lt;/a&gt; reframes software as &lt;em&gt;executable documentation&lt;/em&gt;: the narrative for humans is primary; the code is woven into that story and then &lt;em&gt;tangled&lt;/em&gt; into compilable units. In a literate system, the whole program &lt;em&gt;is&lt;/em&gt; context-definitions, intent, trade‑offs, and usage are embedded right where they matter.&lt;/p&gt;
&lt;p&gt;That property makes literate programming a strong fit for LLMs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Context density&lt;/strong&gt;: LLMs perform better with rich, proximate context; literate code puts rationale, invariants, and edge cases next to the implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Retrieval-friendly structure&lt;/strong&gt;: Sections (&amp;ldquo;chunks&amp;rdquo;) can be addressed by name and dependency, making them ideal targets for RAG and for toolchains that assemble the right context window.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intent and constraints&lt;/strong&gt;: Narratives, design notes, and correctness arguments can be expressed in machine-readable blocks that the model can obey during generation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity by design&lt;/strong&gt;: Tests and specs live as first-class prose+code; changes to tests are visible in the narrative, discouraging silent “cheats.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Practical hybrid:&lt;/em&gt; an LLM-first language could standardize doc-first modules, where every module begins with a prose contract (purpose, invariants, failure modes), followed by code blocks tagged for tangling, and a final verification block of examples/tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sketch:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-litlang&#34; data-lang=&#34;litlang&#34;&gt;# chunk: normalize_emails
purpose: Deduplicate case/alias variants. Invariant: output preserves domain.
assumptions: input ~ list&amp;lt;String&amp;gt;; may contain nulls.

code tangles to email/normalize.llm:
fn norm(xs: List&amp;lt;String&amp;gt;) -&amp;gt; List&amp;lt;String&amp;gt; {
  return xs.filter(not_null)
           .map(lowercase)
           .map(strip_gmail_aliases)  // invariant: keep domain
           .unique()
}

verify:
ex1: norm([&amp;#34;A@x.com&amp;#34;,&amp;#34;a+z@x.com&amp;#34;]) == [&amp;#34;a@x.com&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;machines-writing-for-machines-lessons-from-apljq&#34;&gt;Machines Writing for Machines: Lessons from APL/J/Q
&lt;/h2&gt;&lt;p&gt;Array languages like APL, J, and Q prioritize &lt;em&gt;terse, compositional semantics&lt;/em&gt; over conventional readability. Human legibility yields to density and mathematical regularity; small combinators compose into powerful pipelines. That philosophy maps well to model authorship:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short, regular token sequences&lt;/strong&gt; are easier for models to predict and less prone to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uniform data semantics&lt;/strong&gt; (arrays everywhere) reduce branching surface and ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tacit/point-free style&lt;/strong&gt; (functions composed without naming arguments) compresses code and clarifies dataflow for static analyzers and LLMs alike.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An LLM-native language might borrow this spirit while remaining capable of being generated and manipulated by LLMs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-arrayish&#34; data-lang=&#34;arrayish&#34;&gt;# all-pairs cosine similarity, top-5 per row
S ≔ normalize(X)             -- rows to unit length
C ≔ S · Sᵀ                  -- cosine matrix
Top5 ≔ take⟨5⟩ ∘ argsort⟨desc⟩(C, axis=cols)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The goal isn’t to replace clarity with glyphs; it’s to optimize the code’s statistical and algebraic structure for machine generation and analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-coming-shift&#34;&gt;The Coming Shift
&lt;/h2&gt;&lt;p&gt;Just as previous generations of languages emerged in response to evolving needs, LLM-driven development will demand its own paradigms. The programming languages of the near future will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created &lt;em&gt;for&lt;/em&gt; LLMs to generate.&lt;/li&gt;
&lt;li&gt;Optimized for the ergonomics of machine authorship rather than human authorship.&lt;/li&gt;
&lt;li&gt;Built with native features to address the unique failure modes of AI-generated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can expect at least one such language to dominate a niche-perhaps in rapid prototyping, automated data processing, or even full-stack application generation-within the next decade.&lt;/p&gt;
&lt;p&gt;The next wave of programming language evolution won’t be about making life easier for human programmers alone. It will be about making life easier for our non-human collaborators.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MCP vs SDK: Two Paths to LLM-Powered Extensibility</title>
        <link>https://osada.blog/posts/llms-and-programmable-software/</link>
        <pubDate>Sat, 09 Aug 2025 14:30:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/llms-and-programmable-software/</guid>
        <description>&lt;img src="https://osada.blog/posts/llms-and-programmable-software/powers.webp" alt="Featured image of post MCP vs SDK: Two Paths to LLM-Powered Extensibility" /&gt;&lt;h1 id=&#34;mcp-vs-sdk-two-paths-to-llmpowered-extensibility&#34;&gt;MCP vs SDK: Two Paths to LLM‑Powered Extensibility
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Two different ways to let your app work better for people (and their AI helpers).&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;from-software-eats-the-world-to-ai-in-the-loop&#34;&gt;From &amp;ldquo;software eats the world&amp;rdquo; to AI in the loop
&lt;/h2&gt;&lt;p&gt;When software started taking over everything, the real winners were the people who could make it do exactly what they wanted. That usually meant writing code - either a whole new app, or scripts inside an existing one. Which meant you had to be a programmer - a costly, time consuming affair that needed significant investment from users point of view. In every office/workplace that is not a software shop, you would know the one person who is the designated computer whisperer, the genius who knows the right incantations to make the computer do exactly what they want. In reality they are comfortable with the operation system, tools and a couple of scripting languages.&lt;/p&gt;
&lt;p&gt;And then came the rise of user‑programmable environments. Lotus 1‑2‑3, for example, had macros as far back as the late ’80s, and Excel carried that torch with VBA. These weren’t just nice extras - they opened up whole new ways for people to bend the software to their own needs. This meant now you did not need to program everything from the ground up. These tools were end user software as well so there was some functionality already built in - infact a heck of a lot of functionality. But more importantly they allowed those functionality to be used as building blocks now.&lt;/p&gt;
&lt;p&gt;This paved the way for a generation of end‑user programmable tools. Some evolved into full scripting environments inside mainstream apps. elisp is probably the most famous of these leading to many programmers who wax lyrical about how powerful it makes emacs (now you know which editor I prefer!). And some others spun off into no‑code platforms. No‑code is an interesting branch - it promises power without syntax, but it’s still unclear where it fits in the long run. It sits somewhere between “use what’s shipped” and “write a proper program,” but it’s not always clear how far it can take you.&lt;/p&gt;
&lt;p&gt;At the heart of all this is one goal: let people get more out of the software you build. The stock functionality matters, sure, but in the age of LLMs, it matters just as much - maybe more - what &lt;em&gt;hooks&lt;/em&gt; you give those AI‑powered tools to work with. People are going to be using them, and the more effectively those tools can drive your software, the more value your users will be able to extract.&lt;/p&gt;
&lt;p&gt;I’m not saying replace your app with a language - ship the app you want to ship. But alongside that, think hard about what you enable the AI layer to do. If people are using a tool, you should make sure they can use it in the most effective way possible - whether they’re typing commands themselves or letting an AI do it for them.&lt;/p&gt;
&lt;p&gt;From that perspective, there are two main ways forward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Expose an MCP server&lt;/strong&gt; (or something similar) so an LLM can directly call into your app using a set of defined commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expose a programmable interface&lt;/strong&gt; (SDK, DSL, low‑code) and let the LLM write the code that uses it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Think AWS CLI vs AWS SDK - one’s a quick, command‑driven way in; the other’s a fully programmable toolkit.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mcp-a-command-surface-for-ai&#34;&gt;MCP: a command surface for AI
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;What it is&lt;/strong&gt;: You publish a set of clear, well‑defined actions: &lt;code&gt;create_invoice&lt;/code&gt;, &lt;code&gt;fetch_customer&lt;/code&gt;, &lt;code&gt;transcode_audio&lt;/code&gt;, etc. The LLM calls them, your app runs them, and returns results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quick wins&lt;/strong&gt;: Easy for an LLM to use without setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safety first&lt;/strong&gt;: You control what’s exposed, check inputs, and keep risky stuff locked down.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predictable&lt;/strong&gt;: The API contract is stable even if internals change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Great for operations&lt;/strong&gt;: Easy to log, audit, and trace exactly what happened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Less composable&lt;/strong&gt;: You can chain calls, but big workflows get clunky without another layer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature creep&lt;/strong&gt;: Power users ask for more and more commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logic ends up elsewhere&lt;/strong&gt;: The “brains” live in the orchestrator, not your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Good for&lt;/strong&gt;: Repetitive tasks, customer support tools, CRUD operations, data lookups.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sdkdsl-let-ais-write-real-programs&#34;&gt;SDK/DSL: let AIs write “real” programs
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;What it is&lt;/strong&gt;: A language binding, DSL, or low‑code setup that the LLM can write to build workflows and automations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fully composable&lt;/strong&gt;: Loops, conditionals, abstractions - you can build proper systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durable&lt;/strong&gt;: Code can be saved, versioned, and reused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plays well with others&lt;/strong&gt;: Easy to integrate with the rest of a tech stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More friction&lt;/strong&gt;: Needs an environment, keys, maybe a bit of human literacy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security risks&lt;/strong&gt;: Arbitrary code execution means you need guardrails.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Higher support load&lt;/strong&gt;: You’re now running a developer platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Good for&lt;/strong&gt;: Data pipelines, complex automations, custom integrations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-most-mature-platforms-end-up-with-both&#34;&gt;Why most mature platforms end up with both
&lt;/h2&gt;&lt;p&gt;CLI‑style (MCP) is great for quick wins. SDK‑style is great for deep integrations. People (and AIs) often start with one‑off commands and then graduate to building proper systems. The key is keeping boundaries clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCP tools: coarse‑grained, task‑focused, with well‑defined inputs and outputs.&lt;/li&gt;
&lt;li&gt;SDK/DSL: small, composable primitives that can be wired together any way the user needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I predict that most mature software products/platforms will end up with both.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;checklist&#34;&gt;Checklist
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;For MCP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ship tools for your top 10 “jobs to be done.”&lt;/li&gt;
&lt;li&gt;Lock down inputs/outputs with schemas.&lt;/li&gt;
&lt;li&gt;Include dry‑run mode, idempotency, and audit logs.&lt;/li&gt;
&lt;li&gt;Scope permissions tightly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;For SDK/DSL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep functions small and focused.&lt;/li&gt;
&lt;li&gt;Provide examples and a quick dev loop.&lt;/li&gt;
&lt;li&gt;Version properly and ship migration guides.&lt;/li&gt;
&lt;li&gt;Include typed clients and golden‑path recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-for-erporder-management-system&#34;&gt;Example for ERP/Order Management System
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;MCP tool:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;generate_invoice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Create and email a PDF invoice for a paid order&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;input_schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;send_email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;SDK:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invoice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_memo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Rush delivery&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;require_po&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accounting_alias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same capability, different ergonomics: MCP is &lt;strong&gt;do the thing&lt;/strong&gt;; SDK is &lt;strong&gt;build the process&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;final-thought&#34;&gt;Final thought
&lt;/h2&gt;&lt;p&gt;Start small with MCP for quick wins. Build out an SDK for the power users. Link the two so people can move from “just run this” to “build me the workflow” without friction.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Unreasonable Effectiveness of Fundamentals of Computer Science</title>
        <link>https://osada.blog/posts/the-unreasonable-effectiveness-of-fundamentals-of-computer-science/</link>
        <pubDate>Mon, 05 May 2025 14:30:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/the-unreasonable-effectiveness-of-fundamentals-of-computer-science/</guid>
        <description>&lt;img src="https://osada.blog/posts/the-unreasonable-effectiveness-of-fundamentals-of-computer-science/LowLevelToCloud.webp" alt="Featured image of post The Unreasonable Effectiveness of Fundamentals of Computer Science" /&gt;&lt;h2 id=&#34;origination-of-an-idea&#34;&gt;Origination of an Idea
&lt;/h2&gt;&lt;p&gt;In 1960, physicist Eugene Wigner published an essay titled “The Unreasonable Effectiveness of Mathematics in the Natural Sciences,” in which he wondered at how concepts born purely in the human mind—group theory, imaginary numbers, differential equations—so uncannily predict the behavior of atoms, rivers, and galaxies alike. He pointed out that the same algebraic structures underlying quantum mechanics also describe crystal symmetries—equations formulated centuries ago that still govern modern optics and fluid dynamics. Wigner called this “the miracle that the language of mathematics is so appropriate to the objects of reality,” and marveled that what seems like intellectual play often often turns out to be nature’s Rosetta Stone.&lt;/p&gt;
&lt;h2 id=&#34;anecdote-1--embedded-systems-thinking-to-the-rescue&#34;&gt;Anecdote #1 – Embedded Systems Thinking To The Rescue
&lt;/h2&gt;&lt;p&gt;Sixteen years ago, I began my career as an embedded developer, coding in C on bare-metal microcontrollers. I programmed UART interfaces, USB and display drivers, and even ported kernels to new boards. I still remember sifting through Russel King’s ARM tree emails and wrestling with poorly formatted hardware manuals to debug a kernel panic at 4 PM on a Friday. Though tedious, those challenges built my detailed mental models.&lt;/p&gt;
&lt;p&gt;Later, watching Matt Godbolt’s talk &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=-HNpim5x-IE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“What Every Programmer Should Know about How CPUs Work”&lt;/a&gt; reminded me how deeply that embedded foundation influenced my thinking on modern systems.&lt;/p&gt;
&lt;h3 id=&#34;from-hardware-to-high-level-bugs&#34;&gt;From Hardware to High-Level Bugs
&lt;/h3&gt;&lt;p&gt;Recently, a senior engineer pointed out a race condition in our Scala-based HTTP client wrapper. We used a stack of composition layers over the plain Java HTTP client to add caching, circuit breakers, and retries—all written in Scala, a language I was still learning.&lt;/p&gt;
&lt;p&gt;Although I wasn’t a Scala expert, my embedded background gave me a working mental model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thread Execution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just as interrupt handlers preempt main code on microcontrollers, JVM threads can preempt each other.&lt;/li&gt;
&lt;li&gt;Locks in high-level languages behave like disabling interrupts: they serialize access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache State&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In C, I dealt with buffers and pointers; here, I dealt with Scala’s &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;Future&lt;/code&gt; types.&lt;/li&gt;
&lt;li&gt;Invalidating a buffer in embedded memory mirrors evicting a cache entry in Scala.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Synchronization&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedded code used mutexes; Scala uses &lt;code&gt;synchronized&lt;/code&gt; blocks and &lt;code&gt;ReentrantLock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Both ensure only one context mutates shared state at a time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;walking-through-the-bug&#34;&gt;Walking Through the Bug
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;I mapped each Scala construct to its C equivalent as I stepped through logs and tests.&lt;/li&gt;
&lt;li&gt;I pictured log outputs as memory dumps and threads as interrupt routines racing for shared buffers.&lt;/li&gt;
&lt;li&gt;By the time I suggested wrapping eviction and insertion in a single lock, the engineer hardly needed to read any code—the core issue was clear.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;key-insight&#34;&gt;Key Insight
&lt;/h3&gt;&lt;p&gt;These core principles of concurrency, memory consistency, and state management apply just as naturally on modern JVMs as on microcontrollers—making new syntax feel like mere icing on a familiar cake.&lt;/p&gt;
&lt;h2 id=&#34;anecdote-2--databases-change-data-capture-and-cloud&#34;&gt;Anecdote #2 – Databases, Change Data Capture, and Cloud
&lt;/h2&gt;&lt;p&gt;During a zero-downtime PostgreSQL upgrade on AWS RDS using AWS DMS, I needed to explain unexpected replication gaps. I did this &lt;strong&gt;without knowing DMS internals&lt;/strong&gt;—relying on a simple, general database model.&lt;/p&gt;
&lt;h3 id=&#34;general-database-model&#34;&gt;General Database Model
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: Executes SQL queries and transactions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Persists tables, indexes, and data files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WAL (Write-Ahead Log)&lt;/strong&gt;: Logs every change before it’s applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CDC tools (DMS, Debezium) tap the WAL to stream inserts, updates, and deletes in real time.&lt;/p&gt;
&lt;h3 id=&#34;how-zero-downtime-works-with-dms&#34;&gt;How Zero Downtime Works with DMS
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Initial Full Load&lt;/strong&gt;: DMS copies existing data from the source database to the target in bulk, creating an exact snapshot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDC Phase&lt;/strong&gt;: After the full load, DMS switches to Change Data Capture mode, reading the WAL to capture ongoing changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Sync&lt;/strong&gt;: DMS applies changes to the target in near–real time, keeping it in lockstep while the source remains live.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cutover&lt;/strong&gt;: At any convenient moment, we switch traffic to the target with negligible downtime, since DMS has reconciled all changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dms-constraints&#34;&gt;DMS Constraints
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sequences&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence increments (SERIAL/IDENTITY) emit via the WAL, but DMS ignores them.&lt;/li&gt;
&lt;li&gt;Result: the target’s sequence can lag, causing insert failures.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DDL Statements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDL (CREATE/ALTER/DROP) bypasses the WAL and is blocked by PostgreSQL’s internal replication triggers.&lt;/li&gt;
&lt;li&gt;Triggers prevent schema changes from entering the WAL, so DMS never sees them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I walked through the WAL-based flow and pointed out where PostgreSQL’s internal replication triggers intercept DDL, my teammate—who had never used DMS—instantly saw the picture. They could trace exactly how inserts and updates flow from the source through the WAL, why sequence increments vanish, and how triggers halt schema changes. Within minutes, they could predict which operations DMS would drop and why, without ever consulting AWS documentation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Manual sequence sync (e.g., querying &lt;code&gt;last_value&lt;/code&gt; and &lt;code&gt;ALTER SEQUENCE&lt;/code&gt; to catch up) exists, but that wasn’t the point.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;key-takeaway&#34;&gt;Key Takeaway
&lt;/h3&gt;&lt;p&gt;Anchoring on &lt;strong&gt;compute&lt;/strong&gt;, &lt;strong&gt;storage&lt;/strong&gt;, &lt;strong&gt;WAL&lt;/strong&gt;, and &lt;strong&gt;triggers&lt;/strong&gt; lets you predict any CDC tool’s behavior without learning product-specific quirks. With this core mental model, detailed DMS knowledge becomes optional.&lt;/p&gt;
&lt;h2 id=&#34;anecdote-3---redis-ssh-tunneling-and-distributed-systems&#34;&gt;Anecdote #3 - Redis, SSH Tunneling, and Distributed Systems
&lt;/h2&gt;&lt;p&gt;Distributed consensus once felt like arcane wizardry—until I read the &lt;a class=&#34;link&#34; href=&#34;https://raft.github.io/raft.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raft paper&lt;/a&gt; (highly recommended) and built my own implementation. Suddenly, concepts like &lt;strong&gt;leader election&lt;/strong&gt;, &lt;strong&gt;log replication&lt;/strong&gt;, and &lt;strong&gt;network partitions&lt;/strong&gt; clicked, giving me a reliable mental model for any distributed system.&lt;/p&gt;
&lt;h3 id=&#34;from-theory-to-redis&#34;&gt;From Theory to Redis
&lt;/h3&gt;&lt;p&gt;With Raft under my belt, I could immediately grasp how Redis handles replication in its single-master setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Leader Election&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single Redis instance acts as the “master.”&lt;/li&gt;
&lt;li&gt;If it fails or is unreachable, followers hold an election to choose a new master.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replication &amp;amp; Sharding&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Followers continuously pull the master’s write-ahead commands to stay in sync.&lt;/li&gt;
&lt;li&gt;In a clustered setup, Redis shards your keyspace: each master node owns a subset of hash slots (0–16383), and clients must direct commands to the correct node.&lt;/li&gt;
&lt;li&gt;Clients receive a &lt;code&gt;MOVED&lt;/code&gt; or &lt;code&gt;ASK&lt;/code&gt; response when they connect to the wrong shard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-real-world-ssh-tunnel-puzzle&#34;&gt;The Real-World SSH-Tunnel Puzzle
&lt;/h3&gt;&lt;p&gt;Last week, an engineer couldn’t &lt;code&gt;GET&lt;/code&gt; keys through our AWS ElastiCache Redis cluster after I’d set up an SSH tunnel. Here’s what happened:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What We Did&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We tunneled port 6379 on &lt;strong&gt;one&lt;/strong&gt; Redis node through SSH to localhost.&lt;/li&gt;
&lt;li&gt;We pointed our client at &lt;code&gt;localhost:6379&lt;/code&gt; and saw all the keys that lived on &lt;strong&gt;that&lt;/strong&gt; shard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why Other Keys Failed&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis uses the &lt;code&gt;MOVED&lt;/code&gt; response to tell clients when a key lives on another shard.&lt;/li&gt;
&lt;li&gt;A standard Redis client will follow this redirect—unless it’s only connected to a single tunnel endpoint.&lt;/li&gt;
&lt;li&gt;Since we didn’t tunnel the other shards, any &lt;code&gt;MOVED&lt;/code&gt; response couldn’t be followed, and GETs failed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Takeaway&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fundamental model&lt;/strong&gt;: Redis clusters map keys → hash slots → specific nodes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practical fix&lt;/strong&gt;: Either tunnel all cluster nodes (one port per shard) or use a Redis-aware proxy that understands cluster redirections (for example, &lt;a class=&#34;link&#34; href=&#34;https://github.com/antirez/redis/tree/unstable/src/cluster&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redis-cluster-proxy&lt;/a&gt;, which handles MOVED/ASK redirections automatically).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once your mental model of leader election, replication, and sharding is set, implementation details—SSH tunnels or AWS quirks—feel like mere mechanical plumbing.&lt;/p&gt;
&lt;h2 id=&#34;why-you-should-care&#34;&gt;Why You Should Care
&lt;/h2&gt;&lt;p&gt;In software, it’s easy to chase the latest framework or database. One month it’s a shiny JavaScript library; a decade ago, it was the NoSQL craze. But each new tool brings its own rules, quirks, and failure modes. If you only learn surface details, you rebuild mental models from scratch each time—and troubleshooting at 3 AM becomes a frantic search through half-memorized documentation.&lt;/p&gt;
&lt;p&gt;Instead, invest in fundamentals: consensus algorithms, write-ahead logs, and trigger mechanisms. As Daniel Kahneman explains in &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thinking, Fast and Slow&lt;/a&gt;, these become your System 1 intuitions—instant, reliable mental shortcuts. When you grasp systems at their core, mapping any new tool onto those patterns is trivial.&lt;/p&gt;
&lt;p&gt;This pays off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Predictable troubleshooting&lt;/strong&gt;: With mental models ingrained, you diagnose issues by analogy—whether it’s a Raft-based consensus failure or a Redis shard miss—without rummaging through half-learned tutorials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient collaboration&lt;/strong&gt;: Shared fundamentals keep conversations focused on solutions, not on translating tool-specific jargon. You onboard teammates faster and avoid miscommunication by speaking a common language of system design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mastering fundamentals isn’t academic—it’s the key to durable expertise, so you spend less time learning syntax and more time solving real problems, regardless of tomorrow’s hottest technology.```&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Data Serving vs Transactional Systems</title>
        <link>https://osada.blog/posts/data-serving-vs-transactional-systems/</link>
        <pubDate>Sat, 08 Mar 2025 13:31:56 +0000</pubDate>
        
        <guid>https://osada.blog/posts/data-serving-vs-transactional-systems/</guid>
        <description>&lt;img src="https://osada.blog/posts/data-serving-vs-transactional-systems/the-chaffins-Zdf3zn5XXtU-unsplash.webp" alt="Featured image of post Data Serving vs Transactional Systems" /&gt;&lt;h2 id=&#34;a-little-bit-about-my-experience-as-a-software-professional&#34;&gt;A little bit about my experience as a software professional
&lt;/h2&gt;&lt;p&gt;I have now been in the industry close to two decades, and in that time I have moved around a fair bit in terms of&lt;br&gt;
technology stack, the type of systems I work with, the industry I work in, amongst other factors. In my first couple of&lt;br&gt;
years, I worked for a small (at the time!) electronics company that mostly dealt with embedded systems. My work was&lt;br&gt;
mostly concerned with the interface between hardware and software. Though I studied electronics in university, I was always&lt;br&gt;
interested in the programmable aspects of the systems. Accordingly, I got my start in software bringing up development&lt;br&gt;
boards, porting Linux to them, and writing device drivers.&lt;/p&gt;
&lt;p&gt;After a bit of that, it was time to move to a job where I did get to use C++, but for a completely different purpose. I&lt;br&gt;
was now working on trading systems, order processing systems, and other financial markets-related software. I would move&lt;br&gt;
on within the company a couple of times, working on everything from mobile software to security systems software. Then, through another couple of companies where&lt;br&gt;
again I worked on financial systems and an e-commerce platform, I ended up where I am now—at the BBC.&lt;/p&gt;
&lt;p&gt;The first thing that hit me when I joined was the fact that our tech stack was very different—I had never worked in Scala&lt;br&gt;
before. But what hit me even harder: there were no transactions in the system! The system&amp;rsquo;s&lt;br&gt;
primary focus was to serve the data it had in its databases and data stores, but the loading of that data was mostly a batch process.&lt;br&gt;
Even when it wasn’t, there were no constraints in terms of event ordering. We could afford to serve data a little bit&lt;br&gt;
out of date, given that we eventually caught up in a reasonable time period. This was a completely different way of thinking about&lt;br&gt;
systems for me.&lt;/p&gt;
&lt;p&gt;That contrast got me thinking more deeply about what transactional systems really are, and how they shape the way we build software.&lt;/p&gt;
&lt;h2 id=&#34;the-world-of-transactions&#34;&gt;The world of transactions
&lt;/h2&gt;&lt;p&gt;Transactional systems vary a lot in what they do and how they do it. But by and large, they can be described as systems that process&lt;br&gt;
changes in real-world properties in a consistent, atomic, and durable manner. They are meant to model real-world entities such as&lt;br&gt;
bank accounts, sales, orders, and inventories. As you are modeling these real-world entities, it is essential that your code&lt;br&gt;
reflects the true state of the real-life entity and thus needs to be consistent. In an actual warehouse, the inventory of goods&lt;br&gt;
doesn’t become zero even just for a second before assuming the same value as before.&lt;/p&gt;
&lt;p&gt;In other database parlance, these systems are often backed by OLTP databases. OLTP stands for Online Transaction Processing, and they&lt;br&gt;
are optimized for the type of workloads that transactional systems generate—as opposed to OLAP databases, which are optimized&lt;br&gt;
for bulk reads and the types of queries that data-serving systems generate.&lt;/p&gt;
&lt;p&gt;Most of the trading and financial applications that I have worked on followed a simple formula: process transactions as fast as possible in a serial manner,&lt;br&gt;
and then find an axis along which you can shard the system so that the shards can run in a shared-nothing manner. Then you can just throw more&lt;br&gt;
shards at the problem to scale.&lt;/p&gt;
&lt;p&gt;In very low latency systems, multithreading becomes an overhead. You&lt;br&gt;
are much better off focusing on single-threaded performance and optimizing via techniques such as SIMD instructions. But it also means that most of the time you are worrying about write performance and avoiding actual&lt;br&gt;
database writes. You’ll employ everything from in-process caches, out-of-process caches, and write-ahead logs to avoid a&lt;br&gt;
round trip to the database.&lt;/p&gt;
&lt;p&gt;You give very little thought to the querying side of the system apart from basic due diligence. But you really don’t worry about the data model,&lt;br&gt;
because the only way you are going to read the data is the same way you wrote it—as a transaction.&lt;/p&gt;
&lt;p&gt;In contrast, the system I joined at the BBC operated in a fundamentally different way.&lt;/p&gt;
&lt;h2 id=&#34;my-adventures-on-the-other-side-of-the-fence&#34;&gt;My adventures on the other side of the fence
&lt;/h2&gt;&lt;p&gt;The system that my team currently works on is a data-serving platform. It’s not exactly an OLAP platform in that we don’t serve arbitrary queries on the data,&lt;br&gt;
but the ingestion side and serving side are cleanly separated.&lt;/p&gt;
&lt;p&gt;The data load happens through an event feed that uses ingestion logic separate from the serving logic. Ingestion can also be triggered in a batch mode to backfill the full data set if needed.&lt;/p&gt;
&lt;p&gt;The data-serving side works on a request/response model. It’s optimized for sustained workloads and is mostly concerned&lt;br&gt;
with query latency. This is a textbook application of the CQRS model: the read and write sides are completely separate.&lt;/p&gt;
&lt;p&gt;Performance on the read side is determined mostly by the form of the data in the stores—Redis caches or databases. There is very little&lt;br&gt;
processing when serving a request. We mostly just pull the data out, apply a bit of transformation and business logic, and serve it.&lt;/p&gt;
&lt;p&gt;And the other surprising part: write performance mattered very little. Because the system lacked real-time consistency needs, we could batch writes.&lt;br&gt;
Even with ingestion delays, we could catch up when update rates dropped. This was a completely different way of thinking about systems for me. Unsettling at first, but I’ve grown comfortable with it.&lt;/p&gt;
&lt;p&gt;These systems scale along the axis of read traffic. To scale well, you manage users and data.&lt;/p&gt;
&lt;p&gt;The data model should be as close to the query model as possible. The users should be handled as efficiently as possible—avoid per-connection threading and minimize communication overhead.&lt;/p&gt;
&lt;p&gt;Seeing both systems up close helped me crystallize the differences. Here’s a simplified comparison.&lt;/p&gt;
&lt;h2 id=&#34;summarizing-the-differences&#34;&gt;Summarizing the differences
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Property&lt;/th&gt;
          &lt;th&gt;Transactional Systems&lt;/th&gt;
          &lt;th&gt;Data Serving Systems&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Consistency&lt;/td&gt;
          &lt;td&gt;Very important&lt;/td&gt;
          &lt;td&gt;Not as important&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Performance&lt;/td&gt;
          &lt;td&gt;Write performance is key&lt;/td&gt;
          &lt;td&gt;Read performance is key&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Read Data Model&lt;/td&gt;
          &lt;td&gt;Not as important&lt;/td&gt;
          &lt;td&gt;Very important&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Performance Limits&lt;/td&gt;
          &lt;td&gt;Limited by computation&lt;/td&gt;
          &lt;td&gt;Limited by data store performance&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Scaling&lt;/td&gt;
          &lt;td&gt;Single-threaded performance + shared-nothing sharding&lt;/td&gt;
          &lt;td&gt;Data store performance + data model + efficient network stack&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But switching system types wasn’t just a technical shift—it challenged how I thought about engineering altogether.&lt;/p&gt;
&lt;h2 id=&#34;learning-to-think-differently&#34;&gt;Learning to think differently
&lt;/h2&gt;&lt;p&gt;Writing a matching engine or a risk management system, there is rarely a need to model your system beyond a rudimentary way. We would have&lt;br&gt;
well-established patterns and concepts—order book, positions, etc.—that everyone understood. The domains were predefined,&lt;br&gt;
and user needs were prescriptive.&lt;/p&gt;
&lt;p&gt;In adapting to a system where the query model matters, I’ve had to grapple with understanding the business domain. How to model it, speak the language of domain experts,&lt;br&gt;
and translate that into requirements. This requires a mindshift—especially if you’ve built your career being the one who knows things.&lt;/p&gt;
&lt;p&gt;But once you let go of the fear of needing to learn something new, the path forward becomes clearer.&lt;/p&gt;
&lt;p&gt;The most basic thing was talking to people. The team had existed a long time and had built an internal language they all implicitly understood.&lt;br&gt;
But it wasn’t documented. So I asked questions—frequently, but respectfully:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I could nod along and ask later, but that meant I’d only half understand what followed.&lt;/li&gt;
&lt;li&gt;Other new joiners would feel encouraged to ask too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next was widening the circle. The more I explored, the more I realized people didn’t always know systems in depth—even when they spoke confidently. Systems people referred to daily were often not fully understood. I made it a point to talk to folks from across backgrounds and systems to understand the whole ecosystem. Often, they’d say, “Hey, this has been a long-standing problem!”&lt;/p&gt;
&lt;p&gt;Then came understanding common architectural patterns. Whether dealing with out-of-order S3 events or DB query caching with external caches, our org had go-to solutions. Even if a different approach might be incrementally better, sticking to the known pattern made the system easier for others to reason about. If you&amp;rsquo;re not convinced, check out &lt;a class=&#34;link&#34; href=&#34;https://www.enterpriseintegrationpatterns.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;enterprise integration pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Still, your core skills remain useful. Understanding RDBMS internals, query optimization, network stacks, OSI layers, caching strategies—all of that continues to matter. That part never changes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;This post started as a way to contrast two very different types of software systems I’ve worked on—but along the way, it became something else. It became a reflection on how we grow as engineers when the rules of the game change.&lt;/p&gt;
&lt;p&gt;If there’s a core message here, it’s this: foundational skills matter. The ability to understand systems, think clearly about trade-offs, and collaborate with others—those are the real constants. They carry across domains, stacks, and even job descriptions.&lt;/p&gt;
&lt;p&gt;A long time ago, I read a Superman comic that said: “Once you are Superman, you will always be Superman.” That stuck with me. Once you’ve built those fundamentals, you can step into almost any system—and make it better.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@thechaffins?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;The Chaffins&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/person-jumping-on-big-rock-under-gray-and-white-sky-during-daytime-Zdf3zn5XXtU?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Case for Being Lazy</title>
        <link>https://osada.blog/posts/the-case-for-being-lazy/</link>
        <pubDate>Sun, 23 Feb 2025 12:40:47 +0000</pubDate>
        
        <guid>https://osada.blog/posts/the-case-for-being-lazy/</guid>
        <description>&lt;img src="https://osada.blog/posts/the-case-for-being-lazy/virtue-of-lazy.webp" alt="Featured image of post The Case for Being Lazy" /&gt;&lt;hr&gt;
&lt;h2 id=&#34;virtue-of-being-lazy&#34;&gt;Virtue of being lazy
&lt;/h2&gt;&lt;p&gt;Some of my favorite works of fiction are Discworld novels. And of the many great characters I got to meet, there was one that particularly drew my attention—Rincewind. In one of the books, we are told that his father has a particular arrangement for him in order to fund his study. He has to get a particular score in his exams, or otherwise, he will stop receiving the stipend from his father (I have to confess that I don&amp;rsquo;t remember the exact marks needed). On the flip side, if he gets even one mark beyond this score, he will be considered by the university to have passed the exam and become a wizard, therefore ending his stipend again because he is supposed to receive the stipend only to study. But—and here is the crucial detail—if and only if he gets this exact score, he will never be considered passed by the Unseen University, nor will his father consider him failed in his studies. And thus is born an ironic endeavor—he now studies harder than any other student so that he can get exactly the marks he wants. And this is ultimately much harder than just passing the exam. So in order to be lazy and receive the stipend, he needs to study more. And thus, he ends up spending far more energy on &lt;em&gt;not&lt;/em&gt; passing the exam than actually passing the exam.&lt;/p&gt;
&lt;p&gt;Why did I start this blog post with that detail? Because this has been my go-to scene for explaining why I think being lazy is a virtue. And why being lazy is actually far more work than not being lazy. Whether we are talking about automating things for TOIL in the SRE field, optimizing systems or algorithms for cost or performance, or building high-performance teams, this theme keeps popping up.&lt;/p&gt;
&lt;h2 id=&#34;example-1--automate-everything&#34;&gt;Example 1 : Automate Everything!
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/the-case-for-being-lazy/automate-everything.webp&#34;
	width=&#34;1500&#34;
	height=&#34;1178&#34;
	srcset=&#34;https://osada.blog/posts/the-case-for-being-lazy/automate-everything_hu_921a395c35272d73.webp 480w, https://osada.blog/posts/the-case-for-being-lazy/automate-everything_hu_d0c491e549c0af91.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Automate Everything&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;TOIL refers to the repetitive, manual, and automatable tasks that are necessary to maintain a service. According to the &lt;a class=&#34;link&#34; href=&#34;https://sre.google/sre-book/eliminating-toil/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google SRE book&lt;/a&gt;, TOIL is work tied to running a production service that tends to be manual, repetitive, automatable, tactical, devoid of enduring value, and that scales linearly as a service grows. Automating TOIL is beneficial because it frees up engineers to focus on more strategic and value-adding activities, reduces human error, and improves the reliability and efficiency of the service. By minimizing TOIL, teams can invest more time in innovation and improving the overall system.&lt;/p&gt;
&lt;p&gt;And this is a central practice in SRE teams because this allows them to differentiate themselves from a pure Ops team where the proverbial pushing buttons is the main activity. The pushing button work gets repetitive and boring, so wouldn&amp;rsquo;t it be nice if we did not have to do that and could just sit back and let the computers, which are good at repetitive work, do that work instead? It would be grand! But the catch is that for us to be lazy and watch the computers do all the work, we first have to work harder, expend more energy than we otherwise would, and automate these tasks. And that should be an upfront cost that we should be comfortable paying. You may have your own yardsticks as to when it becomes sensible to do so, but to automate things on principle takes a lot of conviction, and that is why building a true SRE practice is actually hard, especially in traditional organizations.&lt;/p&gt;
&lt;h2 id=&#34;example-2--finops-on-public-cloud&#34;&gt;Example 2 : FinOps on public cloud
&lt;/h2&gt;&lt;p&gt;FinOps on public cloud is a prime example of investing effort now to save hassle later. Instead of laboriously poring over monthly bills and manually reconciling cloud usage, savvy teams deploy &lt;a class=&#34;link&#34; href=&#34;https://www.finops.org/introduction/what-is-finops/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;automation tools&lt;/a&gt; and real-time dashboards to monitor and optimize spending. By doing so, they can track costs in real-time, set budgets, and receive alerts when spending deviates from expectations. This transforms an otherwise reactive process into a proactive, manageable workflow that keeps financial surprises at bay.&lt;/p&gt;
&lt;p&gt;However, setting up an effective FinOps practice requires significant upfront effort. Teams need to integrate &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/aws-cost-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cost-tracking tools&lt;/a&gt;, configure alerting mechanisms, and continuously refine cost-optimization strategies. While this initial setup demands time and expertise, it ultimately ensures that engineers and finance teams can focus on strategic planning rather than firefighting unexpected cost spikes. Just like automating TOIL, the effort put into FinOps is about making life easier down the road—by working hard now to be lazy later.&lt;/p&gt;
&lt;p&gt;We went through this as a team recently, and creating the tools required to track costs, alert us to anomalies, and remove inefficiencies was hard work, but ultimately, it paid off. Again, the conviction to prioritize this and get it done requires that we believe that initial hard work will pay off in the end.&lt;/p&gt;
&lt;h2 id=&#34;example-3-building-highly-effective-teams&#34;&gt;Example 3: Building highly effective teams
&lt;/h2&gt;&lt;p&gt;I have now spent more than a decade and a half in this industry, and I am beginning to notice a pattern. Most of the old-timers like myself who have been around more than a couple of teams and/or companies have a favorite company or team they keep referring back to. You can notice that straight away when you get into a &amp;ldquo;Yeah, this sucks, but how do we make it better?&amp;rdquo; conversation. And there are ample opportunities for these in any team. Just pick a subject that seems to frustrate them and start talking about what the potential solutions might be, and you will immediately be greeted with a flashback to what they believe was the &amp;ldquo;best team they were in.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The only part they have missed is how much work went into preparing the groundwork for X to be implemented. This is through no fault of their own. We usually focus on the end result much more than the process to get there, and even if we did not, the process itself might not be visible to folks other than the enablers who made it possible.&lt;/p&gt;
&lt;p&gt;Enabling the team to solve their own problems is hard work. It is very tempting to go in and solve the problem at hand. After all, you (think you) know the answer, and if the team just followed your advice, the problem could be solved by lunchtime! But that would be the wrong instinct. Solving the problem for the team is the easy approach. Coaching them to come up with the solution themselves is significantly harder but much more rewarding in the end—and less work for you ultimately. After all, the definition of good in engineering leadership is to coach yourself out of your job!&lt;/p&gt;
&lt;h2 id=&#34;being-lazy-on-principle&#34;&gt;Being Lazy on Principle
&lt;/h2&gt;&lt;p&gt;Like Bret Victor talks about in his now infamous talk in inventing on principle, when you do something, it is better to do it on principle. In any given situation if you think it applies, ask yourself - what will be the way we can solve this by being maximally lazy? This applies to most software engineering decisions being taken in your day to day work. Especially so if you are a staff+ engineer or an engineering manager. What will be the way that you can make sure the work being done for a given task is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maximally reusable - &lt;br&gt;
So you don&amp;rsquo;t have to repeatedly do the same work. This can take many forms in practice. Maybe you want to put all that code shared by all your microservices in to a &lt;a class=&#34;link&#34; href=&#34;https://buoyant.io/2023/06/01/what-is-a-chassis-service/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;chassis service&lt;/a&gt;? Or maybe you want to gather up all the validation logic spread across different build units in to a single linter tool. Or you go the whole hog and create a &lt;a class=&#34;link&#34; href=&#34;https://www.cncf.io/reports/platform-engineering-whitepaper/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;platform around the reusable parts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;completed with least effort - so you &lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;remove any accidental complexity leaving only inherent complexity in&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;maximally automated - so you remove the human from the equation. this decreases mistakes and maximizes utility of your engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;transitioning-from-mid-to-senior&#34;&gt;Transitioning from Mid to Senior
&lt;/h2&gt;&lt;p&gt;At every software engineer&amp;rsquo;s professional journey, there will be a time when they transition to being a senior engineer. In my opinion a large part of this is getting rid of the desire to be clever and do smart engineering. We all spent some time in our career being awed by all the amazing clever code we could create with the very sharp tools in our repertoire, whether that is Template Meta Programming in C++ or Monkey Patching in Python or Ruby. And then we wanted to emulate that and write come clever™ code.&lt;/p&gt;
&lt;p&gt;There comes a time when we finally understand that it is more important to be understood and write maintainable code than be clever. That&amp;rsquo;s when you learn to be truly lazy and use a very easy to understand subset of the toolbox available to you and realize that this is a feature and not a bug. You don&amp;rsquo;t have to use the full surface area of your language/framework/platform in order to build successful maintainable products. Be a little lazy. Stick to common things.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Being lazy, when done right, is one of the most powerful tools in an engineer&amp;rsquo;s arsenal. It’s not about avoiding work—it’s about making smart decisions that reduce unnecessary effort in the long run. Whether it’s automating toil, optimizing costs, enabling teams to solve their own problems, or simplifying code for maintainability, the principle remains the same: &lt;strong&gt;invest effort upfront to save exponentially more later&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The best engineers and leaders understand that their job is not to write the most code or build the most complex systems, but to ensure that things are done &lt;strong&gt;in the simplest, most efficient, and most reusable way possible&lt;/strong&gt;. True engineering excellence is knowing &lt;strong&gt;where&lt;/strong&gt; to put in effort and &lt;strong&gt;where&lt;/strong&gt; to step back.&lt;/p&gt;
&lt;p&gt;So, if you ever find yourself in a position where brute force feels like the answer, stop and ask: &lt;em&gt;What’s the laziest way to solve this problem?&lt;/em&gt; Chances are, the best solution is also the one that requires the least ongoing work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be lazy. But be lazy on principle.&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Technical Tasks for Managers</title>
        <link>https://osada.blog/posts/technical-tasks-for-managers/</link>
        <pubDate>Sun, 22 Dec 2024 16:18:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/technical-tasks-for-managers/</guid>
        <description>&lt;img src="https://osada.blog/posts/technical-tasks-for-managers/marvin-meyer-SYTO3xs06fU-unsplash.webp" alt="Featured image of post Technical Tasks for Managers" /&gt;&lt;h2 id=&#34;what-does-being-technical-mean-for-engineering-team-leads-and-managers&#34;&gt;What does being technical mean for Engineering Team Leads and Managers
&lt;/h2&gt;&lt;p&gt;I have now been in a management position for the better part of a decade and with that milestone comes a bit of a time to reflect back on how the journey has been and what I have learnt along the way. When I first started leading a team formally back in 2019 I had modeled my expectations on what I would be doing on what my managers up until that point had done. And they had mostly done coding. This was a peculiarity of the company I worked for till then. In that situation team leaders were essentially tech leads that also had 1-1s with you occastionally. There was no real personal development planning or coaching or any of the leadership whizz words that you cannot escape from in any of the engineering leadership text books today. They reviewed most of the code and were very hands on, from forming system designs to actually implementing the solutions they did it all.&lt;/p&gt;
&lt;p&gt;But this came at an expense, because most of the time things had to go through them, they became a bottlenek. They may have been the original implementers of the system, they may have at point or the other had the best contextual knowledge of the system. But that is all a hindrance when the system is being continually updated and you are waiting for their approval to move forward with any of the real work. Even worse they had become silos of information that made the bus factor for the most critical parts of the system one. While this did ensure their job security for the most part it made it very hard to change these systems in even the most basic agile manner.&lt;/p&gt;
&lt;p&gt;So if you cannot be the single most knowledgable person and approver of system designs (dare I say should not!), what should a technical mananager do that will help their team? What should being technical mean for the team lead or manager that wants to empower their teams but do not want to be the bottleneck?&lt;/p&gt;
&lt;p&gt;Over the years I have come to believe that there are a few different things to choose from. It isn&amp;rsquo;t much, but it&amp;rsquo;s mine!&lt;/p&gt;
&lt;h3 id=&#34;toil-automation&#34;&gt;TOIL Automation
&lt;/h3&gt;&lt;p&gt;One of the key areas where a technical manager can add value is by automating repetitive tasks, often referred to as &lt;a class=&#34;link&#34; href=&#34;https://sre.google/sre-book/eliminating-toil/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TOIL&lt;/a&gt;. These are tasks that are manual, repetitive, automatable, and devoid of enduring value. Automating TOIL can free up your team&amp;rsquo;s time to focus on more strategic work. As a manager, you might have the broader perspective needed to identify these tasks and the authority to prioritize their automation. This not only improves efficiency but also boosts team morale by reducing the amount of mundane work.&lt;/p&gt;
&lt;p&gt;There are a few reasons why this is a perfect opportunity for your average engineering team lead with an uninterrupted focus time of 30 minutes max.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;These are usually small enough that you can make significant progress in a short time. So being interrupted mid flow is not devastating to the task at hand.&lt;/li&gt;
&lt;li&gt;They are usually not related to the sprint goals and do not necessarily align with sprint goals. If you are running Scrum teams that go more or less by the book, the team may not necessarily have the ability nor the desire to complete these tasks.&lt;/li&gt;
&lt;li&gt;They are ambiguous in nature and may require a broader perspective than the team members are able to provide.&lt;/li&gt;
&lt;li&gt;Last but not least is the fact that you can use AI tooling for the most part to your heart&amp;rsquo;s content. These tend not to be production code deployed to live environments and therefore allow ample use of AI tooling such as CHOP assuming your organization allows it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some of the example tasks include&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data entry/munging/output automation. Imagine generating reports or sending notifications.&lt;/li&gt;
&lt;li&gt;Developer experience tasks. These are tasks like creating glue tooling for various tools and setup automation tasks for tools like editors. Another example was a tool to list old PRs that are still open grouped by person filtered for active members of the team.&lt;/li&gt;
&lt;li&gt;Developer metrics related work. This is where we try to discover data on the workings of the developers. This maybe data on pull requests, build times or may be you are trying out SPACE metrics. In any case you are trying to find data that will help your team be more effective.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last one may need more of an explanation so we will look at that in detail next&lt;/p&gt;
&lt;h3 id=&#34;developer-metrics-related-work&#34;&gt;Developer Metrics Related Work
&lt;/h3&gt;&lt;p&gt;This is one of the tasks I love doing but do not see a whole lot of discussion about. A long time ago I was talking to a person starting out in a devops adjacent role and we were discussing a code review tool that was open sourced by facebook - &lt;a class=&#34;link&#34; href=&#34;https://secure.phabricator.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;phabricator&lt;/a&gt;. The discussion somehow turned to people&amp;rsquo;s habits around code reviews and we both realized even though we had tons of anecdotal examples from our time as software engineers we had no idea to back up the claims we made as habits of software engineers being either code committers or approvers. For example in our combined experience when the code reviewes were rather large, people tended to in general make a couple of superficial comments and then quickly approve the review. When it was smaller and more digestible, ironically approvers tended to be far more thorough and ask a lot more questions. This meant that people had a perverse incentive to make their code changes large and harder to understand and even though no one said this out loud, people had internalized this lesson.&lt;/p&gt;
&lt;p&gt;We decided the best course of action was to come up with statistical evidence to see if this was true. To do that we had to extract the data from the code review tools internal database and crunch with a python script. Note that there was no strategic directive that we had to do it and it was certainly not a product feature. Nevertheless it answered a big question we had and provided us with a way to optimize our developer workflow and avoid bugs.&lt;/p&gt;
&lt;p&gt;Nowadays most observability platforms have tended to acquire features like this and tend to provide features that do a speed run of these kind of tasks. Maybe they provide ready made reports that expose this information or better still they provide a way to generate these using familiar tooling such as SQL. But if they do not, this is one of the areas where you can make a huge difference and not a lot of teams have capacity to work on with the product feature roadmap they currently have.&lt;/p&gt;
&lt;h3 id=&#34;investigative-work-for-the-team&#34;&gt;Investigative Work for the Team
&lt;/h3&gt;&lt;p&gt;With the pace of technology change being what it is, there tends to be a lot of churn in your stacks relatively speaking these days. Gone are the days where using MSVC++ 6.0 for 12 straight years was just good practice. And there are certain trends that mean the technology stacks change fundamentally and not in a one-to-one mapped way like before. A good example of this is the trend towards more managed services that the big PaaS players and SaaS players offer these days. The move from stock Postgres running as RDS on AWS to Aurora Distributed SQL database for operational reasons is one definitive example of this. Another example in Java world is the move from batteries included frameworks like Spring to micro-frameworks like Quarkus and Micronaut.&lt;/p&gt;
&lt;p&gt;These are disruptive changes to implement therefore there should be some investigative work done in order to determine if the team should even consider these items as options to be implemented next. This presents some unique challenges in doing this work. You need to have a good amount of experience in various technologies to know how this new technology works. You should also know enough of the broader context to know how and when your team can use this functionality. And finally you need someone who does not mind the disruptive nature of learning a completely new tool that your team may or may not end up using.&lt;/p&gt;
&lt;p&gt;As a servant leader, this is something that I can do to spare my team and I love doing this kind of work. And as an added bonus if and when a moonshot idea gets implemented, I get to see the fruits of my labour making a real difference to the team!&lt;/p&gt;
&lt;p&gt;As an example, we were always using a personal access token for a GitHub user that we created for interacting with pull requests from our code build. This is not an ideal solution for various different reasons though and not the least of which is that the team has to manually rotate the PAT every n days to comply with the secinfo policy. So I investigated if any of the other teams had done any work to replace this setup with a GitHub app and it turned out yes, some other team had! Then it was a bit more work to talk to them, find out what they did and why they did it. Afterwards, I followed their suggestions, used some of their work to bootstrap mine. Then another couple of weeks wait to get my thread model checked out and approved and then finally I was on the home stretch. It was halting work waiting for input from several other teams and not very amenable to focus time work. And I was happy to take the work and get it done. It meant I had learned up a lot about TS GitHub libraries, GitHub APIs and GitHub apps. The team had a better security model. A win-win situation for all.&lt;/p&gt;
&lt;h3 id=&#34;documentation-cleanup-and-decommission-work&#34;&gt;Documentation, Cleanup and Decommission work
&lt;/h3&gt;&lt;p&gt;Any sizable project will include components similar to what I have stated above. And these are perfect for folk like me who want to contribute but do not have the capacity to complete tasks in the critical path. By their very nature these tasks do not require coordination with other team members and/or other external teams. Documentation is self contained and allows you to get an overall idea of the changes without bothering about the details. Cleanup and decommission work comes at the end of a project and you can usually do them at your lesuire. Again they usually allow you to get an overall idea of what changed when without a lot of nitty gritty details.&lt;/p&gt;
&lt;h2 id=&#34;how-to-choose-what-to-do&#34;&gt;How to choose what to do
&lt;/h2&gt;&lt;p&gt;Again, I have to caveat everything that follows as being what I do. This works for me in my particular circumstance so this YMMV. Buyers beware and all that!&lt;/p&gt;
&lt;p&gt;The best source for these ideas seem to be meetings that you are in. I know it is fashionable to complain about the meetings that you are in as team lead. It is almost customary to at this point when discussing meetings to let out a deep sign and say in a pained voice &amp;ldquo;Yeah, I do my best to pay attention but OMG meetings are so soul crushing&amp;rdquo;. But these same meetings can be a gold mine for ideas to implement by yourself. For me, I use a few meetings for this purpose.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Engineering Discussions with the team where we discuss general engineering matters.&lt;br&gt;
This is a great place to understand pain points of engineers while they are trying to get work done. Often there will be a throwaway comment from an engineer and there will be murmurs of recognition from others and that is your cue. If appropriate, dig in to it in detail by taking a couple of mins or use a followup chat to understand the problem in detail. And then use that understanding to create a followup work item that will permanently address the issue. A great example of this happening was in a previous team of mine where I created a set of CMake Toolchain files that allowed you to debug programs easily in a VM. It all started because someone dejectedly said in a meeting &amp;ldquo;Yeah, well even if we do that It will take half a day to figure out how to build it to work in my VM&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One on One meetings.&lt;br&gt;
Every one tends to do one on one meetings differently and I think it is only right that you tailor your approach to suit the engineer you are talking to. After all your primary goal is to make sure they are doing ok. I tend to use some of the time to understand what their working week was like and what they lacked during that time to make them more productive. This again tends to be a very good idea generation time. You get their undivided attention and you can dig deep to understand what the exact problem is and what they want you to do to fix it. This last part is very important as I have seen numerous cases where we go ahead and implement something that they never had in mind as the solution after just listening to the issue they had but not what the solution might be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end it all comes down to who will benefit from the work you do. It is a bit like that old adge about jobs - &amp;ldquo;At every job you should either learn or earn. Either is fine. Both is best. But if it&amp;rsquo;s neither, quit.&amp;rdquo;. The technical work you do as a manager should benefit you, your team or ideally both. If it is neither then do not take on that work.&lt;/p&gt;
&lt;h2 id=&#34;what-should-your-goals-be&#34;&gt;What should your goals be?
&lt;/h2&gt;&lt;p&gt;When I set out to do technical tasks, I tend to have only a couple of motivations.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to keep doing technical work so I don&amp;rsquo;t become rusty. I guess this is the primary motivation for almost all of us team leads/managers. The more we not practice the art of code, the less likely we are to feel comfortable picking it up again next time when needed. So for that reason look for tasks that actually require you to develop and apply yourself. Do not choose admin work or just rubber stamping work and convince yourself that somehow they count as technical work. You will be lying to yourself and no on else.&lt;/li&gt;
&lt;li&gt;I want to do something that would improve the working environment for my team. I mostly focus on Developer Experience because I am passionate about it and want to advocate for focusing on it. But it can be anything from FinOps to AI tooling that you think will make the most impact for your team as of right now.&lt;/li&gt;
&lt;li&gt;It should allow for your team to take the work you did forward as a continuation. The best kind of work are not throw aways and allows your team to build on top of it. This allows your team to understand the contribution you made and appreciate it. It also allows your team that work like this that they initiate are valuable and appreciated by others.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;i-dont-know-if-i-have-time-for-this&#34;&gt;I don&amp;rsquo;t know if I have time for this
&lt;/h2&gt;&lt;p&gt;You should always set aside time for your own development and this is a very important part of that. Consider ring-fencing this time. Create an appointment in your calendar to block out a time for you to do a bit of focus work. This does not have to be a huge block of work but it has to be enough so you can make enough progress every single day. And you need to commit to it as well, the more consistent you are, the better you become at getting this work done. Do not be afraid to tell other that you have a commitment to some work that you cannot forgo and to please schedule around you.&lt;/p&gt;
&lt;p&gt;It is ok to take a break, there can be extraordinary circumstances that require your full focus but always return back to your goal of getting some technical work done. There is going to be no substitute for putting in the hours.&lt;/p&gt;
&lt;p&gt;And do use the new AI tooling as much as you can. You have experience to make sure that the hallucinations do not get through and impact the work and you know already what the problem to be solved your. You as a senior practitioner are in a perfect place to exploit CHOP to your benefit.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Project Management for Software Engineers</title>
        <link>https://osada.blog/posts/project-management-for-software-engineers/</link>
        <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/project-management-for-software-engineers/</guid>
        <description>&lt;img src="https://osada.blog/posts/project-management-for-software-engineers/daria-nepriakhina-zoCDWPuiRuA-unsplash.webp" alt="Featured image of post Project Management for Software Engineers" /&gt;&lt;h1 id=&#34;project-management-for-software-engineers&#34;&gt;Project Management for Software Engineers
&lt;/h1&gt;&lt;p&gt;Project management can sometimes feel like madness. However, with the right tools and approaches, you can navigate the chaos effectively. This guide focuses on stakeholder management, communication strategies, risk handling, and fostering collaboration—critical skills for every software engineer leading a project.&lt;/p&gt;
&lt;h2 id=&#34;do-we-need-project-management-in-the-age-of-agile&#34;&gt;Do we need project management in the age of agile?
&lt;/h2&gt;&lt;p&gt;Nowadays it is hard to find a software team or company that does not implement some form of agile methodology weather it is Scrum or Kanban or one of the many agile flavors. And a genuine question you might have is, why we need project management skills if we have agile methodologies being implemented in our teams. The key point here is that none of the agile methodologies are project management frameworks. Rather they more or less focus on delivering working software following on from the principles laid out in the Agile Manifesto. They have very little to say about communications with and management of external stakeholders such as customers, executives and other sponsors. Nor are there a special focus on management of risks on the project. In real world very few scrum teams can be completely autonomous so there will be responsibilities distributed across multiple teams. And thus the reason for managing projects outside of the frameworks like scrum.&lt;/p&gt;
&lt;h2 id=&#34;managing-stakeholders&#34;&gt;Managing Stakeholders
&lt;/h2&gt;&lt;p&gt;The largest part of managing an epic or project is understanding and addressing the needs of stakeholders. Here’s how to start:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Stakeholders:&lt;/strong&gt;&lt;br&gt;
Begin by identifying all relevant stakeholders for the project. This includes anyone who will contribute to or be impacted by the project. Sometimes, this process is straightforward, but other times, you may need to dig deeper to uncover less obvious stakeholders. It’s crucial to ensure no group is overlooked, as unidentified stakeholders can later disrupt project progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Group Stakeholders:&lt;/strong&gt;&lt;br&gt;
Once you have a list, categorize stakeholders into meaningful groups. Stakeholder mapping tools can help unearth relationships and interdependencies. For instance, you may group them by their influence, interest, or role in the project. This step lays the foundation for managing their needs effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Engage Effectively:&lt;/strong&gt;&lt;br&gt;
Tailor your engagement strategy to the needs of each stakeholder group. Some stakeholders might require frequent updates, while others might only need periodic reports. Knowing how to address each group ensures their concerns are managed proactively, reducing potential friction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-stakeholder-onion&#34;&gt;The Stakeholder Onion
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/project-management-for-software-engineers/stakeholder-onion.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Example Stakeholder Onion&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The Stakeholder Onion framework helps you understand stakeholder involvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Layer 1:&lt;/strong&gt; Direct contributors, such as developers, designers, and QA engineers, who are integral to building the product.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 2:&lt;/strong&gt; Individuals whose workflows change due to the solution, like support teams or operations staff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 3:&lt;/strong&gt; Sponsors, executives, and subject matter experts who provide guidance and approval but are less involved in day-to-day activities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 4:&lt;/strong&gt; External parties like customers, regulators, and suppliers, who influence the project&amp;rsquo;s broader context.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understanding these layers clarifies how and when to engage with each group.&lt;/p&gt;
&lt;h3 id=&#34;stakeholder-mapping&#34;&gt;Stakeholder Mapping
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/project-management-for-software-engineers/stakeholder-quadrant.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Stakeholder Mapping Quadrant Diagram&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Ask the following questions to refine your stakeholder map:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who has the most influence?&lt;/strong&gt; Recognize stakeholders who can accelerate or block progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who is most affected?&lt;/strong&gt; Prioritize those whose success depends on your project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What about key influencers outside the project?&lt;/strong&gt; Identify influential individuals who may not be direct stakeholders but still impact decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who controls resources?&lt;/strong&gt; Pinpoint decision-makers for funding, personnel, or infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What are their motivations?&lt;/strong&gt; Understanding what drives stakeholders helps you align the project goals with their interests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-raci-matrix&#34;&gt;The RACI Matrix
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/project-management-for-software-engineers/raci-matrix-example.webp&#34; width=&#34;75%&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Example RACI Matrix&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The RACI framework defines clear roles and responsibilities, avoiding confusion:&lt;/p&gt;
&lt;p&gt;One of the most powerful frameworks in software project management is RACI, which brings clarity to roles and responsibilities across the team. In complex software projects where multiple stakeholders are involved, understanding who does what can mean the difference between smooth execution and chaotic confusion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;R - Responsible:&lt;/strong&gt; These team members execute tasks and ensure deliverables.&lt;/p&gt;
&lt;p&gt;RACI breaks down team member involvement into four distinct categories. The &amp;ldquo;Responsible&amp;rdquo; individuals are your doers – the developers, designers, and other team members who actively work on tasks and ensure deliverables meet specifications. They&amp;rsquo;re the ones writing the code, creating the designs, or testing the features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A - Accountable:&lt;/strong&gt; This role confirms that tasks are completed as expected.&lt;/p&gt;
&lt;p&gt;This is different from the responsible role in that the accountable person may or may not be the actual doer. But they are ultimately responsible for making sure the task has been completed and meets the expectations of what it consists of. In scrum teams for example, the scrum team is collectively responsible for the stories on the product increment and that it meets the definition of done set by the organization. In practice if the communication happens outside the team it will be either the scrum master or the team that will end up representing the team and being responsible for the delivery of the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C - Consulted:&lt;/strong&gt; These individuals provide input before work is performed.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Consulted&amp;rdquo; category includes subject matter experts and stakeholders whose input is valuable before or during task execution. These might be senior developers offering architectural guidance, security experts providing best practices, or UX specialists sharing user research insights. These for example may come in the form of centers of excellence. A few I have seen over the years are, data analytics, experimentation and security policy. Note that this is an active relationship in that the consultation should happen before the work gets done and will affect how the work gets done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I - Informed:&lt;/strong&gt; Stakeholders who need updates but don’t contribute directly.&lt;/p&gt;
&lt;p&gt;Finally, we have the &amp;ldquo;Informed&amp;rdquo; stakeholders. These individuals need to stay in the loop but don&amp;rsquo;t directly contribute to the work. They could be executives tracking project progress, client representatives monitoring development, or team members whose work might be impacted by changes. These stakeholders are informed in a passive manner and this activity is not in the critical path.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By implementing RACI in software projects, teams can eliminate the all-too-common &amp;ldquo;too many cooks in the kitchen&amp;rdquo; problem. It creates clear lanes of responsibility, streamlines decision-making, and ensures that everyone knows exactly what&amp;rsquo;s expected of them. This clarity is particularly valuable in agile environments where roles and responsibilities might otherwise become blurred during rapid development cycles.&lt;/p&gt;
&lt;h2 id=&#34;communication-management&#34;&gt;Communication Management
&lt;/h2&gt;&lt;p&gt;Clear communication is the backbone of any successful project. Miscommunication can lead to delays, confusion, and even project failure.&lt;/p&gt;
&lt;h3 id=&#34;communications-plan&#34;&gt;Communications Plan
&lt;/h3&gt;&lt;p&gt;At its core, a robust communication strategy in software development rests on five essential elements that work together to ensure smooth information flow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selecting the Right Method&lt;/p&gt;
&lt;p&gt;Communication channels aren&amp;rsquo;t one-size-fits-all. Each project phase and message type demands its own approach. Technical discussions about code architecture might thrive in collaborative tools like Slack or Microsoft Teams, while major milestone updates often deserve dedicated video conferences. Daily standups work best in person or through video calls, while documentation updates can be effectively shared through project management platforms or wikis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Establishing Communication Rhythm&lt;/p&gt;
&lt;p&gt;Consistency is key in project communication. A well-defined cadence helps team members and stakeholders plan their work and expectations. This might mean daily standups for development teams, weekly progress reports for project sponsors, or monthly strategic reviews for executive stakeholders. The key is finding a rhythm that provides timely information without becoming burdensome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Purposeful Communication&lt;/p&gt;
&lt;p&gt;Every message should serve a clear purpose. Status updates should focus on progress, blockers, and next steps. Design reviews need to center on gathering specific feedback. Bug reports must contain steps to reproduce and impact assessments. When team members understand the goal of each communication type, they can provide more focused and actionable information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear Ownership&lt;/p&gt;
&lt;p&gt;Communication ownership prevents the &amp;ldquo;somebody else&amp;rsquo;s problem&amp;rdquo; syndrome. Whether it&amp;rsquo;s the scrum master owning sprint ceremonies, the project manager handling stakeholder updates, or developers responsible for technical documentation, clear ownership ensures nothing falls through the cracks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Audience-Centric Messaging&lt;/p&gt;
&lt;p&gt;Different stakeholders need different levels of detail. Technical teams need specifics about implementation details, while executives might only need high-level progress updates and risk assessments. Tailoring your message to your audience saves time and increases engagement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the most common pitfalls in project communication is overwhelming stakeholders with too much information. Here&amp;rsquo;s how to keep communications lean and effective:&lt;br&gt;
Remember, the goal isn&amp;rsquo;t to communicate more, but to communicate better. By following these principles and remaining mindful of your audience&amp;rsquo;s needs, you can create a communication plan that supports rather than hinders project progress.&lt;/p&gt;
&lt;h2 id=&#34;managing-risks&#34;&gt;Managing Risks
&lt;/h2&gt;&lt;p&gt;Risk management ensures you’re prepared for challenges and can respond effectively when they arise.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Risks:&lt;/strong&gt;&lt;br&gt;
List all potential risks, including technical, financial, and operational threats. For instance, a risk might be a dependency on an unstable vendor or the possibility of budget overruns. A comprehensive list is the first step toward managing risks effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Classify &amp;amp; Prioritize:&lt;/strong&gt;&lt;br&gt;
Not all risks are equal. Classify them based on their likelihood of occurring and the severity of their impact. High-probability, high-impact risks should take precedence in your planning efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Develop Action Plans:&lt;/strong&gt;&lt;br&gt;
For each significant risk, create a plan detailing mitigation strategies. For example, if your project depends on a specific vendor, have an alternative supplier ready in case of delays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor Continuously:&lt;/strong&gt;&lt;br&gt;
Risks evolve over time. Regularly revisit your risk register to identify new risks and reassess existing ones. This keeps your project agile and prepared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Respond to Threats:&lt;/strong&gt;&lt;br&gt;
When a risk materializes, act immediately using your predefined plan. This minimizes disruption and keeps the project on track.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Foster Communication:&lt;/strong&gt;&lt;br&gt;
Encourage team members to share insights about potential risks. Transparent communication allows you to identify issues early, before they escalate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-raid-register&#34;&gt;The RAID Register
&lt;/h3&gt;&lt;p&gt;The RAID framework is a vital tool for managing risks and ensuring project success by bringing structure and clarity to potential challenges. It allows project teams to focus on four key areas: Risks, Assumptions, Issues, and Dependencies. By categorizing and tracking these elements, the RAID register provides a centralized view of project risks and dependencies, improving decision-making and enabling proactive planning.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Risks&lt;/p&gt;
&lt;p&gt;represent potential threats that could disrupt the project or derail its success. These could include technical failures, missed deadlines, or budget overruns. Identifying risks early allows the team to devise mitigation strategies, such as creating contingency plans or allocating additional resources to high-risk areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assumptions&lt;/p&gt;
&lt;p&gt;are the factors or conditions believed to be true for the project to proceed smoothly. For example, the availability of key resources or the reliability of vendors are often significant assumptions. Documenting these assumptions ensures that all stakeholders have a shared understanding of the project&amp;rsquo;s foundational expectations and highlights areas that may require re-evaluation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues&lt;/p&gt;
&lt;p&gt;are the current challenges that need immediate attention. These can range from delays in securing approvals to the dreaded scope creep, where the project&amp;rsquo;s requirements expand without corresponding adjustments to time, budget, or resources. By maintaining a clear record of issues, teams can prioritize their resolution and prevent them from escalating into more significant problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependencies&lt;/p&gt;
&lt;p&gt;refer to external factors that the project relies on for successful completion. These could include third-party integrations, regulatory clearances, or the timely delivery of critical components from suppliers. Tracking dependencies in the RAID register helps identify bottlenecks and plan for alternative solutions if dependencies are not met as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By consolidating all these elements into a single RAID register, teams achieve better visibility into the project&amp;rsquo;s risk landscape. This centralized approach fosters proactive management, enabling teams to address potential pitfalls before they escalate. The RAID framework empowers project managers to make informed decisions, plan effectively, and keep projects on track, ultimately driving more predictable and successful outcomes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;estimates-the-necessary-evil&#34;&gt;Estimates: The Necessary Evil
&lt;/h2&gt;&lt;p&gt;Estimates are an essential part of project management, offering stakeholders a roadmap for planning and decision-making. However, they are inherently uncertain, and managing this uncertainty is key to making them effective and reliable. But refusing to make estimates does not solve any problems. It is just refusing to be accountable. Any organization runs on plans and roadmaps and people depend on those to guide their work and plan for their future work.&lt;/p&gt;
&lt;p&gt;Start by understanding your team’s cadence, which involves learning how your team works, their delivery patterns, and leveraging historical data. This understanding helps you create more accurate and realistic predictions about timelines and workloads. Complement this with visualization tools like Mermaid or draw.io, which can illustrate project timelines, dependencies, and potential bottlenecks, making it easier to communicate the big picture to stakeholders.&lt;/p&gt;
&lt;p&gt;When circumstances change, it’s critical to communicate changes proactively. Updating estimates and informing stakeholders early prevents misunderstandings and helps them adjust their plans accordingly. Finally, treat estimates as an accountability tool. Stakeholders rely on your timelines to plan their activities, so handle this responsibility with care, always striving for transparency and accuracy.&lt;/p&gt;
&lt;p&gt;By following these principles, you can create estimates that are both dependable and adaptable, setting the stage for project success.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;Project management for software engineers goes beyond the scope of agile methodologies, addressing essential areas like stakeholder management, communication, risk mitigation, and collaboration. While agile frameworks focus on delivering working software, project management ensures effective coordination with external stakeholders, proactive risk handling, and clarity in roles and responsibilities.&lt;/p&gt;
&lt;p&gt;This guide emphasizes the importance of identifying and engaging stakeholders using tools like the Stakeholder Onion and the RACI matrix, enabling clear accountability. Communication is highlighted as a cornerstone for success, with practical tips on creating a communication plan tailored to audience needs. Risk management is demystified through the RAID framework, ensuring transparency and preparedness for potential challenges.&lt;/p&gt;
&lt;p&gt;Additionally, the post underscores the value of reliable estimates and their role in guiding stakeholders, as well as fostering a culture of delegation and teamwork. By mastering these elements, software engineers can effectively navigate the complexities of project management, ensuring aligned goals, clear communication, and successful outcomes in an ever-evolving landscape.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Valkey: The New Redis Alternative</title>
        <link>https://osada.blog/posts/valkey-the-new-redis-alternative/</link>
        <pubDate>Sun, 17 Nov 2024 13:29:22 +0000</pubDate>
        
        <guid>https://osada.blog/posts/valkey-the-new-redis-alternative/</guid>
        <description>&lt;img src="https://osada.blog/posts/valkey-the-new-redis-alternative/valkey.webp" alt="Featured image of post Valkey: The New Redis Alternative" /&gt;&lt;h2 id=&#34;what-is-redis&#34;&gt;What is Redis?
&lt;/h2&gt;&lt;p&gt;Redis (Remote Dictionary Server) is an open-source, in-memory data structure store that functions as a database, cache, and message broker. Known for its high performance and versatility, Redis supports low-latency operations crucial for real-time applications. At its core, Redis organizes data as key-value pairs but extends its functionality with advanced data structures (ADTs), streaming capabilities, and persistence options.&lt;/p&gt;
&lt;p&gt;Redis offers rich data types, including strings, lists, sets, sorted sets, hashes, bitmaps, and hyperloglogs. These enable complex operations like leaderboard maintenance, set intersections, or approximate cardinality estimation. Redis Streams further enhance its capabilities, enabling real-time data processing and message queuing with features like consumer groups, automatic message acknowledgment, and ordered, append-only data logs.&lt;/p&gt;
&lt;p&gt;Redis also supports data durability through mechanisms like snapshots (RDB files) and append-only file (AOF) logs. Snapshots provide periodic states of the database, while AOF logs persist each write operation. These features make Redis suitable for both ephemeral and long-term data storage. With additional functionalities like replication, clustering, Lua scripting, and pub/sub messaging, Redis remains a critical component in modern web architectures.&lt;/p&gt;
&lt;h2 id=&#34;a-brief-history-of-redis&#34;&gt;A Brief History of Redis
&lt;/h2&gt;&lt;p&gt;Redis was created in 2009 by Salvatore Sanfilippo to address the performance limitations of disk-based databases for his Italian startup. Redis quickly gained traction for its innovative, memory-first design and simple API, becoming a go-to tool for applications requiring fast and reliable data access.&lt;/p&gt;
&lt;p&gt;Redis transitioned to open-source early in its development, encouraging community contributions. By 2015, Redis Labs (now Redis Inc.) became the commercial steward of the project, adding enterprise-grade features and cloud-based services. Today, Redis powers platforms ranging from small startups to tech giants like Twitter and Airbnb.&lt;/p&gt;
&lt;p&gt;In 2018, Redis Inc. introduced the Server Side Public License (SSPL) for certain modules to prevent cloud providers from monetizing Redis without contributing back. This sparked debates within the open-source ecosystem about software freedom. Around this time, the community-driven Valkey project emerged as an open-source alternative to Redis under a permissive BSD license, addressing concerns over licensing restrictions while retaining Redis compatibility.&lt;br&gt;
Valkey on AWS&lt;/p&gt;
&lt;p&gt;When Valkey was announced, major PaaS providers rapidly adopted it. AWS, in particular, introduced a Valkey-based caching option with two notable characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pricing Advantage: AWS provides a 20% discount on Valkey caches compared to Redis OSS caches. AWS even promotes Valkey through console notifications encouraging users to switch, with text like &amp;ldquo;Create clusters for as little as $6 per month.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Serverless Only: Unlike traditional serverful Redis offerings, AWS Valkey is exclusively available as a serverless service. While I am usually skeptical of AWS&amp;rsquo;s serverless and managed options—such as Aurora Serverless, which can be prohibitively expensive for consistent workloads—this approach intrigued me enough to explore further.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AWS offers Valkey as an engine in its ElastiCache service. So provisioning a valkey cluster is largely similar to the process of getting any other elasticache cluster. Below is a sample AWS CDK script for provisioning a Valkey cache:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Create the User for the valkey cache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CfnUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ServerlessCacheUserDefault&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;redis&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;valkey-user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;valkey-user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;noPasswordRequired&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generatedUserIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getUserId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generatedUsers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Now create the user group to include the user in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userGroup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CfnUserGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ServerlessCacheUserGroup&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;redis&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;userGroupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;valkey-cache-usergroup&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;userIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generatedUserIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addDependency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generatedUsers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CfnUser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Now for the security group for the elasticache cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverlessCacheSG&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecurityGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ServerlessCacheSecurityGroup&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;securityGroupName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;valkey-cache-sg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;vpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mainVPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Allow traffic in to default redis/valkey port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverlessCacheSG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addIngressRule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Peer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ipv4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cidrIpRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValueAsString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Build the actual cache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverlessCache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CfnServerlessCache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ServerlessCache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;serverlessCacheName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;shared-cache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;valkey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;userGroupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getUserGroupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;securityGroupIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverlessCacheSG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSecurityGroupId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subnetIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Vpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPrivateSubnets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISubnet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSubnetId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverlessCache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addDependency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;from the top, we start setting up users for the valkey cache, then a user group for it. The documentation for each can be found &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticache.CfnUser.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticache.CfnUserGroup.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. For more information you can refer to their Cloudformation counterparts &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-user.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-usergroup.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.After that is done, we create the security group and add a ingress rule allowing incoming connections to server port 6379 which is the default for valkey. Then finally we build the actual cache using the user, usergroup and security group.&lt;/p&gt;
&lt;h2 id=&#34;how-valkey-compares-with-serverful-redis&#34;&gt;How Valkey compares with serverful redis.
&lt;/h2&gt;&lt;p&gt;I was already benchmarking a couple of different approaches for one our applications and had a benchmarking script lying around that I used for this not-so-scientific benchmarking process. The salient points of the benchmarking points are as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wanted to see what the best way to store relatively large blobs of json efficiently in redis were. Note that the best practice for storing values on redis is to break large values down to smaller parts. But that is not possible in this case. We are basically utilizing elasticache as a shared (amongst instances of a micro-service) look aside cache.&lt;/li&gt;
&lt;li&gt;The alternatives I was testing were
&lt;ol&gt;
&lt;li&gt;JSON capability via &lt;a class=&#34;link&#34; href=&#34;https://github.com/RedisJSON/RedisJSON&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redisJSON&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Just plain old string after converting from in memory representation of JSON&lt;/li&gt;
&lt;li&gt;Compressing in order to make it more efficient while in transit and storage. For compression algorithm I was weighing between using &lt;a class=&#34;link&#34; href=&#34;https://github.com/lz4/lz4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LZ4&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/facebook/zstd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Zstd&lt;/a&gt; and opted for zstd in the end.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I used faker because just generating random values does not really reflect the characteristics of the data we store. I have aspirations to turn this in to general tool for stressing our databases and caches for given traffic patterns and this might become useful in that sense.&lt;/li&gt;
&lt;li&gt;We are not including time for compressing the data as I didn&amp;rsquo;t include the time for JSON encoding the data either. Ideally we would measure Wall time from data being in-memory to&lt;/li&gt;
&lt;li&gt;The workloads that we typically see in our workloads tend to be rather write heavy. This is to be expected since the personalized content that we serve are really one use for the most part. Therefore I set the read/write split of the workload at 20/80 for this run of the benchmarking script.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
	&lt;summary&gt;Click to Expand: Python script for benchmarking redis/valkey for our use-case&lt;/summary&gt;
	&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;redis&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;faker&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Faker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;zstandard&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;zstd&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Configs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HOST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NUM_KEYS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;READ_PERCENTAGE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;WRITE_PERCENTAGE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VALUE_SIZE_KB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;KEY_LENGTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fake_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;phone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;company&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;json_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dumps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fake_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VALUE_SIZE_KB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_random_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ascii_lowercase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compress_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zstd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZstdCompressor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decompress_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;dctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zstd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZstdDecompressor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decompress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;benchmark_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;read_ops_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;write_ops_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;READ_PERCENTAGE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;JSON.SET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;JSON.GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;read_ops_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;JSON.SET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;write_ops_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;JSON Workload benchmark completed in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; seconds.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Read operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_ops_json&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, Write operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_ops_json&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;benchmark_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;READ_PERCENTAGE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;String Workload benchmark completed in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; seconds.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Read operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, Write operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;benchmark_compressed_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;READ_PERCENTAGE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OPERATIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;compressed_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:binary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compressed_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_reads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:binary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;decompressed_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decompress_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compressed_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_writes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;compressed_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:binary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compressed_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;String Workload (Compressed) benchmark completed in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; seconds.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Read operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_ops_string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, Write operations: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_ops_string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StrictRedis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ssl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ssl_cert_reqs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rms-tyga&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;password12345678&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;faker&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Faker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NUM_KEYS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rms-tyga:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generate_random_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KEY_LENGTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generate_json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;JSON.SET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;benchmark_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;benchmark_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;benchmark_compressed_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;The results from running this script against a t4g.medium based 2 node, 1 shard redis cluster was as follows&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(redis-json-benchmark) ➜  redis-json-benchmark ./benchmark.py
JSON Workload benchmark completed in 386.04 seconds.
Read operations: 2000, Write operations: 8000

String Workload benchmark completed in 381.14 seconds.
Read operations: 2000, Write operations: 8000

String Workload (Compressed) benchmark completed in 381.77 seconds.
Read operations: 2000, Write operations: 8000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Same script when run against the Serverless valkey cache yeilds&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(redis-json-benchmark) ➜  redis-json-benchmark ./benchmark.py
JSON Workload benchmark completed in 324.97 seconds.
Read operations: 2000, Write operations: 8000

String Workload benchmark completed in 326.84 seconds.
Read operations: 2000, Write operations: 8000

String Workload (Compressed) benchmark completed in 324.98 seconds.
Read operations: 2000, Write operations: 8000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So as can be seen valkey performs roughly 15% better than the serverful version. Now, the fact that it is a burstable VM may have something to do with it, but note that the CPU usage did not go beyond 5% the whole time I ran the benchmark for the redis version. So I do not think it had a huge impact. The scaling seems pretty good as well. According to docs from cold it can scale up to 30K ECPU operations for a single shard and for read replicas can scale up to 90K.&lt;/p&gt;
&lt;p&gt;Note that using redisJSON has more advantages than pure speed. You also get ability to operate on the JSON using operators that understand the JSON structure. For example you can use &lt;a class=&#34;link&#34; href=&#34;https://github.com/json-path/JsonPath&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSONPath&lt;/a&gt; queries on the data and fetch partial fragments from the data if needed.&lt;/p&gt;
&lt;h3 id=&#34;side-note-on-compression-algorithms-for-use-with-data-storagetransfer&#34;&gt;Side note on compression algorithms for use with data storage/transfer.
&lt;/h3&gt;&lt;p&gt;I tried out a couple of different options for the compression algorithm here starting with standard gzip. What I found out was the unless you were using a newer standard that optimized for faster compression/decompression, it was really hard to get the compression to make a difference.&lt;/p&gt;
&lt;p&gt;The options I tried were&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ZLib for GZip - This is included in the standard library for python and very easy to use. But since decompression seems highly costly, it took the scores way higher than it should have. So I abandoned that option.&lt;/li&gt;
&lt;li&gt;LZ4 - This is the first of a new breed of compression formats that was introduced to make inline compression of data possible for large streams of data. Created by google and widely adopted since then, this improved matters quite a bit. Note that it optimizes for compression speed and not size. It is also quite light on the CPU usage compared to others.&lt;/li&gt;
&lt;li&gt;Zstd - This is the newest kid on the block from what I know and was created at facebook. This is what I ended up using and game me the best results out of the three. This algorithm gives much better compression ratios than lz4 at the cost of more CPU usage. So as always, it is a tradeoff.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are interested in these algorithms and are considering which one to use, you can find an interesting discussion where author of Zstd shows up on hacker news &lt;a class=&#34;link&#34; href=&#34;https://news.ycombinator.com/item?id=19678115&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;valkey-pricing&#34;&gt;Valkey pricing
&lt;/h2&gt;&lt;p&gt;You would have noticed the unit ECPU in the paragraph above and as is customary for AWS this is a very complicated term that seems to be used for billing for it&amp;rsquo;s serverless option. In simple terms a GET or a SET of a 1 KB data blob will take 1 ECPU. For commands that have higher CPU usage like HMGET, the CPU usage dimension becomes higher and for HMGET specifically it is 3 times the base case. And the pricing is set by the dimension that is the highest. Thus if you do an operation that GETs 2 KB of data using HMGET you get charged 3 ECPUs.&lt;/p&gt;
&lt;p&gt;This all makes for a rather complex pricing structure as you can imagine but if you use redis servers today, a rough idea of pricing can be had by looking at the no of GET/SET/etc operations and your traffic in and our in your metrics. In our cases the cache nodes were quite underutilized so there was an upside to using valkey in pricing as well.&lt;/p&gt;
&lt;h2 id=&#34;should-i-use-valkey&#34;&gt;Should I use Valkey?
&lt;/h2&gt;&lt;p&gt;So for AWS, GCP and Azure it is a no brainer that everyone should switch to Valkey. But should you? For me that depends. Redis is a very very complex beast nowadays. It is no longer a memcached replacement only and has everything from ADTs, probabilistic data structures, streaming to vector storage. And as always the best practice is to compare your use case amongst the two options. Start by creating a sample workload that simulates your real workload and then run it on both infrastructure and compare the results so you have an apples to apples comparison. Don&amp;rsquo;t forget to take in to account all the aspects like cost and performance.&lt;/p&gt;
&lt;p&gt;What about the serverless aspect? Is it worth it to avoiding sys admin work on the nodes and engine when you are running on your own provisioned servers? So far that does not seem like a huge task. RDS upgrades are by far a bigger headache with trying to convince DMS and pg_replication to play nicely and making sure to move the bits of the schema that DMS won&amp;rsquo;t move. Redis by comparison seems so simple but it &lt;em&gt;is&lt;/em&gt; another thing to do.&lt;/p&gt;
&lt;p&gt;All in all, this seems like something that is worth evaluating at least so give it a go. Only thing I am wondering where else the same drama will play out now that the VCs are coming for their pound of flesh and the OSS startup are pulling the draw bridges up?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>What Determines Your Engineering Organization&#39;s Culture</title>
        <link>https://osada.blog/posts/what-does-your-engineering-team-value/</link>
        <pubDate>Thu, 25 Jul 2024 03:58:57 +0100</pubDate>
        
        <guid>https://osada.blog/posts/what-does-your-engineering-team-value/</guid>
        <description>&lt;img src="https://osada.blog/posts/what-does-your-engineering-team-value/this-is-engineering.webp" alt="Featured image of post What Determines Your Engineering Organization&#39;s Culture" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#all-happy-families&#34;&gt;All Happy Families&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-overall-engineering-organizations-reporting-structure&#34;&gt;The Overall Engineering Organization&amp;rsquo;s Reporting Structure&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#everyone-reports-to-engineering&#34;&gt;Everyone Reports to Engineering&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#everyone-reports-to-delivery&#34;&gt;Everyone Reports to Delivery&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#everyone-reports-to-the-core-business&#34;&gt;Everyone Reports to the Core Business&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-gets-valued-in-the-engineering-organization&#34;&gt;What Gets Valued in the Engineering Organization&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#amount-or-impact-of-product-features-the-team-developed&#34;&gt;Amount or Impact of Product Features the Team Developed&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-depth-of-knowledge-and-experience-in-the-product&#34;&gt;The Depth of Knowledge and Experience in the Product&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#engineering-prowess-and-innovativeness&#34;&gt;Engineering Prowess and Innovativeness&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#final-thoughts&#34;&gt;Final Thoughts&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h1 id=&#34;what-determines-your-engineering-organizations-culture&#34;&gt;What Determines Your Engineering Organization&amp;rsquo;s Culture
&lt;/h1&gt;&lt;div style=&#34;border: 1px solid #ccc; background-color: #f9f9f9; padding: 10px; margin-top: 10px; font-size: 0.9em; color: #555;&#34;&gt;
    Photo by &lt;a href=&#34;https://unsplash.com/@thisisengineering?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;ThisisEngineering&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/person-holding-white-printer-paper-WDCE0T4khsE?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;Unsplash&lt;/a&gt;
&lt;/div&gt;
&lt;h2 id=&#34;all-happy-families&#34;&gt;All Happy Families
&lt;/h2&gt;&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Anna_Karenina_principle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anna Karenina Principle&lt;/a&gt; states that &amp;ldquo;All happy families are alike; each unhappy family is unhappy in its own way.&amp;rdquo; This was originally coined by the philosopher and writer Leo Tolstoy. The idea behind this principle is that all unhappy families are unhappy due to some trait that they have that prevents them from becoming happy. Happy families are alike in the sense that they avoid those traits to achieve happiness.&lt;/p&gt;
&lt;p&gt;This principle can be seen in many real-world examples. One notable example comes from the book &amp;ldquo;Guns, Germs, and Steel&amp;rdquo; by Jared Diamond. In this book, the author argues that the rise of the modern world was due to the introduction of firearms and the spread of disease. He looks at domesticated animals as an application of the Anna Karenina principle, arguing that for an animal to be domesticated, several properties should hold for that species such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It should be easy to feed.&lt;/li&gt;
&lt;li&gt;It should grow up quickly.&lt;/li&gt;
&lt;li&gt;It should breed in captivity.&lt;/li&gt;
&lt;li&gt;It should be easy to handle.&lt;/li&gt;
&lt;li&gt;It should be easy to train.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any species that does not have at least one of these attributes will not be able to be domesticated. In this manner, all domesticated animals are alike in that they all share these attributes.&lt;/p&gt;
&lt;p&gt;From my experience, engineering teams have a few key attributes that determine if they are effective. I do not believe dogmatically that there is only one right way to run a software engineering team, but rather, I want to argue that there are various wrong ways. Amongst the key attributes, two stand out for me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The overall engineering organization&amp;rsquo;s reporting structure.&lt;/li&gt;
&lt;li&gt;The values that get the most airtime in the organization.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-overall-engineering-organizations-reporting-structure&#34;&gt;The Overall Engineering Organization&amp;rsquo;s Reporting Structure
&lt;/h2&gt;&lt;p&gt;I have been fortunate enough to work for several different companies in very different businesses and engineering organizations organized in various ways. I have also had the pleasure of working with and knowing folks from very different companies—from startups to enterprises, from contracting houses to product companies, and from 30+ year-old companies to ones that started within the last year.&lt;/p&gt;
&lt;p&gt;One of the most crucial ways in which the organizations differed, and one that they responded most to, is who reported to whom. Note that the formal organizational structure does not really matter in this regard. More important is the informal structure. You can observe this by looking closely at the senior executive-level interactions in the company—who is holding who accountable. Mostly this will depend on whether there is explicit reporting of one discipline to another. But in organizations that ostensibly put these various disciplines on equal terms, you get a sense of who is ultimately holding who accountable when you look at senior-level interactions.&lt;/p&gt;
&lt;h3 id=&#34;everyone-reports-to-engineering&#34;&gt;Everyone Reports to Engineering
&lt;/h3&gt;&lt;p&gt;This is mostly true for engineering shops that do consulting and long-term contracting from what I have seen. The whole business is one of creating engineering talent and shopping that around. So the whole business is structured to allow that to be easy. Everyone from Delivery, Business Analysts to Marketing and Sales really report to the engineering counterparts. The CTO holds the most power at the executive level and that reflects back on the ranks.&lt;/p&gt;
&lt;p&gt;This has interesting consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineering becomes, by necessity, multidisciplinary. Since they need to control all the other aspects, they become very good at understanding and directing other disciplines. They are most likely to know the vocabulary of other teams, the ways of working of them, and so on. These engineering teams interface with the other teams a lot so they learn how to direct them and get the output they want from the Delivery, Sales, and other teams.&lt;/li&gt;
&lt;li&gt;Engineering feats become the most celebrated achievements, but they should be of the sellable variety. What gets people paid is creating the engineering output either in terms of actual software or in terms of processes/tools that can be sold, so they tend to celebrate that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;everyone-reports-to-delivery&#34;&gt;Everyone Reports to Delivery
&lt;/h3&gt;&lt;p&gt;Some organizations I have seen have everyone reporting to delivery or project management teams. The delivery teams report back to a senior executive that is in charge of software services, and these companies, in general, tend to be in the software services business. The delivery teams are in charge because that is how people in these companies get paid. If the service is not delivered, no one gets paid. This again has some interesting characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any piece of engineering is measured by how easy it was to deliver, how much effort it took, how many resources it consumed, and how on-time the delivery was. This becomes the yardstick by which the teams are measured. The actual engineering that goes into the product or the service does not matter as much as how quickly it was delivered. Therefore, these companies tend to be extremely conservative in tech usage and can take years to switch away from legacy tech.&lt;/li&gt;
&lt;li&gt;Because output is all that matters, there tends to be a lot of corner-cutting and papering over issues. A bug that can be solved with a Standards Of Practice (SOP) document is a bug that does not have to be fixed. Every bug gets triaged with the idea that as long as it matches the customer requirement of the user story, it is not a bug. And if it needs changing, you need a Change Request (CR).&lt;/li&gt;
&lt;li&gt;Consequently, these organizations tend to be process-heavy because the idea is to minimize risk. Everything will be documented, and the processes will be followed as much as possible to make sure there is no disruption or even if there was, it could not be traced back to the engineering organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;everyone-reports-to-the-core-business&#34;&gt;Everyone Reports to the Core Business
&lt;/h3&gt;&lt;p&gt;This is probably the case for the majority of product-centered organizations. In this case, engineering ends up reporting to the product team. The technical roadmap tends to be merged with the product roadmap, and the technical decisions are mostly driven by how much impact they have on the product. The quality of the engineering tends to be closely correlated to the quality of the product development vision and discipline.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any piece of engineering is measured by how much business value it delivers. In good organizations, this would be measured by a good OKR-based system that evaluates the impact it has on the fundamental agility of the product and the value delivered to the consumer. In other organizations, this may be measured by more superficial means such as the number of features a given piece of work enabled. The less deeply measured the impact is, the less inspired the team becomes, and that is the true danger here.&lt;/li&gt;
&lt;li&gt;If the team goes to the extreme end of feature delivery, they basically become a feature factory powered by short-term thinking, code-slinging with little thought given to the consequences of the architecture being created, and no real ownership of the system.&lt;/li&gt;
&lt;li&gt;The processes tend to be minimal, and even if they are in place, usually the organization tends to keep them as light as possible. Because the product team tends to have a bigger say in the deadlines, you usually get more cases where engineering works to given deadlines and tries to shape the work to fit the time available. This means the output is much faster compared to engineering-led organizations but mostly not as consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-gets-valued-in-the-engineering-organization&#34;&gt;What Gets Valued in the Engineering Organization
&lt;/h2&gt;&lt;p&gt;This may seem like a surprising aspect to consider in determining how a given engineering team performs, but I think it is one of the most overlooked pieces of information. Even when you are interviewing with an organization, pay attention to what the interviewers seem to consider great achievements their organization has made. Note that none of these are either good or bad. Each should be valued to some extent, and we should take care not to go to extremes on any of them. Because when that happens, we create an imbalanced culture that has blind spots to its own weaknesses.&lt;/p&gt;
&lt;h3 id=&#34;amount-or-impact-of-product-features-the-team-developed&#34;&gt;Amount or Impact of Product Features the Team Developed
&lt;/h3&gt;&lt;p&gt;Organizations that score themselves based on the product features they deliver tend to be very lean and delivery-driven. Engineering quality will often take a backseat and be only talked about in the context of how much it makes it easier to deliver the next product features.&lt;/p&gt;
&lt;h3 id=&#34;the-depth-of-knowledge-and-experience-in-the-product&#34;&gt;The Depth of Knowledge and Experience in the Product
&lt;/h3&gt;&lt;p&gt;This one surprised me when I first encountered it. But there are some organizations where the arcane knowledge of the product is what is valued. Usually, this happens because of a poor knowledge-sharing culture and high attrition. A product that contains lots of surprises in its design causes everyone to be cautious in making changes. Deep product knowledge becomes more valuable because the barrier to understanding and changing the product is high.&lt;/p&gt;
&lt;h3 id=&#34;engineering-prowess-and-innovativeness&#34;&gt;Engineering Prowess and Innovativeness
&lt;/h3&gt;&lt;p&gt;This tends to be the case for some of the larger tech-focused businesses. The ones that pride themselves on their ability to hire the best of the best tend to have a great respect for engineering prowess and innovativeness. This can be good, but it can also lead to engineers working on shiny new tech for vanity projects. The organizations should always be on guard against this tendency.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts
&lt;/h2&gt;&lt;p&gt;As I have mentioned before, this post is mostly based on my experiences and the discussions I have had with others in the industry. While I am generalizing here based on anecdotal evidence, I think there are strong correlations between what I have seen and what I am arguing here. At the end of the day, human nature and incentives are likely to create the outcomes I have described above. However, if you believe I have misrepresented something here or if you have had very different experiences, please reach out to me on &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/osadalakmal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Compromises and Moving Forward</title>
        <link>https://osada.blog/posts/compromises-and-moving-forward/</link>
        <pubDate>Tue, 21 Nov 2023 15:03:08 +0000</pubDate>
        
        <guid>https://osada.blog/posts/compromises-and-moving-forward/</guid>
        <description>&lt;img src="https://osada.blog/posts/compromises-and-moving-forward/desola-lanre-ologun-IgUR1iX0mqM-unsplash.webp" alt="Featured image of post Compromises and Moving Forward" /&gt;&lt;h2 id=&#34;move-fast-and-break-things-or-slow-and-steady-wins-the-race&#34;&gt;Move fast and break things? Or slow and steady wins the race?
&lt;/h2&gt;&lt;p&gt;While researching a topic at work, I was referring to several conference talks as well as blog posts on how to evolve architecture of systems in a practical manner taking in to account the human element. In between getting my self bored and going &amp;ldquo;aha!&amp;rdquo;, very loudly to the utter annoyance of my kids, I managed to gather some good insights. But the breakthrough came when a colleague mentioned the fact that product as a discipline always seem to have urgency in mind. Everything needed to be done now or even better still, yesterday. So what drives them? Are they truly evil? Out to foil the genuine do-goodder attempts of development and architecture teams? Or are they simply misunderstood most of the time?&lt;/p&gt;
&lt;style&gt;
.flex{display: flex;}
figure {
  display: table;
  width: 80%;
  margin:0;
}

figcaption {
  display: table-caption;
  caption-side: bottom;
}

#content {
  max-width: 100%;
  height: 100%;
}

.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: auto;
  text-align: center;
}
&lt;/style&gt;
&lt;div id=&#34;content&#34; class=&#34;center&#34;&gt;
&lt;div class=&#34;flex&#34;&gt;
&lt;figure&gt;
&lt;img src=&#34;https://osada.blog/img/compromises/joker.jpg&#34; width=&#34;50%&#34;&gt;  &lt;br/&gt;
&lt;figcaption&gt; Truly Evil? &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;https://osada.blog/img/compromises/joker-misunderstood.jpg&#34; width=&#34;50%&#34;&gt;  &lt;br/&gt;
&lt;figcaption&gt; Misunderstood? &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;understanding-the-product-drive-to-get-things-done&#34;&gt;Understanding the product drive to get things done
&lt;/h2&gt;&lt;p&gt;For this, it is essential that you develop empathetic views of the various disciplines involved in the process. The whole point of the product development as a discipline is to map out a roadmap for the product that the users of the system will find useful and will be willing to pay for. For them, the clients are the users of the system. And I am using the word &amp;lsquo;client&amp;rsquo; here to mean the immediate group of people that the particular discipline&amp;rsquo;s work &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Objectives_and_key_results&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OKRs&lt;/a&gt; are impacted by. For product, this group of people is the immediate users of the product. And the most universally effective way of keeping them happy and hitting the related OKRs is to deliver what they want, before they want it.&lt;/p&gt;
&lt;p&gt;Now there does exist the odd bad product team, but disregarding the concept of cartoonish evil product teams, mostly they want to be able to deliver features to their users. They do understand that the delivery of features does not happen in a vacuum, that it happens within the context of the platform. They do understand that features should not increase the overall complexity of the platform as much as possible and make the development of features in the future as easy as possible. If they do not understand this, the team leads, tech leads, and the engineering managers should get better at communicating this aspect. I understand this sounds glib, but it is true - there is no solution for insufficiently good communication. And how to communicate effectively is several full books essentially. So that will have to wait!&lt;/p&gt;
&lt;h2 id=&#34;handling-the-quick-wins&#34;&gt;Handling the quick wins
&lt;/h2&gt;&lt;p&gt;So it is a fact of life that product will keep on asking for quick wins but what can we do about it? Two courses of action and one question - How costly is it to reverse your decision? Your course of action will depend on this one question and you should know the answer quite confidently. Can you reverse your decision given the architectural changes this decision will entail with a reasonable cost? If the answer is yes - do the change, if the answer is no - do not do the change.&lt;/p&gt;
&lt;h3 id=&#34;do-the-required-feature-as-a-quick-win&#34;&gt;Do the required feature as a quick win
&lt;/h3&gt;&lt;p&gt;Do play along and find a way to deliver the same effect as they are asking for. Assuming that the feature does not adversely affect the architecture of the platform no matter the implementation, great no issues then. But assuming as almost always there are several different ways to get the same thing done and the quickest is the dirtiest, how do you deliver the work? You compromise and say we will get you the feature in this manner and it will take 2 weeks instead of 6 but it is going to be hacky and we will need to take another 4 weeks to refactor so this feature does not impede us in the future. Weather you use branch by abstraction, feature flags or a combination, the concept remains the same - the audience gets the feature quickly and product are happy. Engineering gets to tidy up the implementation and they are happy. As a bonus point, often there will be some feedback from the client in the middle of your refactor which you can just incorporate into your code and make the implementation better. But remember this all depends on you being able to change the initial quick hack you deliver to a proper sustainable architecture afterward.&lt;/p&gt;
&lt;h3 id=&#34;dont-do-the-required-feature-as-a-quick-win&#34;&gt;Don&amp;rsquo;t do the required feature as a quick win
&lt;/h3&gt;&lt;p&gt;If the required feature cannot be delivered as a quick win and requires long term platform building work to be done first, do not give in and do it as a quick hack. It may be tempting given that it will make the product team happy and will definitely make your life easy. But understand that you will be paying for this decision later on when it breaks your team&amp;rsquo;s agility. The most important thing though is not the &amp;ldquo;No, we cannot&amp;rdquo; but &amp;ldquo;This is how we can do it&amp;rdquo;. A can-do attitude is worth its weight in gold in software architecture/development lead land because so many of us will stop after the initial no. Plot a course for the product and communicate what needs to happen in order for you to build this feature. Break it down into the smallest parts possible and explain each one. The changes are these steps can be reused for some other purpose and if the product can align their feature roadmap along those lines, most of the time you will get the go-ahead to implement the long term architectural plan.&lt;/p&gt;
&lt;h2 id=&#34;cathedral-building---one-brick-at-a-time&#34;&gt;Cathedral building - one brick at a time
&lt;/h2&gt;&lt;p&gt;To expand on the second answer above, because the first answer is quite simple and requires no elaboration, let us consider a simple media streaming solution. Your product managers ask you to implement a feature that allows your curation team to put together a Christmas playlist for the app. Now say you do not have a good way of putting custom styling on this play list to match Christmas theme right now. How can you achieve this? One way would be to refuse to do custom styling because this is a one-off thing that won&amp;rsquo;t last beyond Christmas and you don&amp;rsquo;t want to do a quick hack on the client side because this information should be propagated through the backend to be a proper sustainable, uniform implementation in the long run.&lt;/p&gt;
&lt;p&gt;But going beyond that, you can suggest an approach like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implement the styling as a quick hack but make sure to get the styling data from an opaque interface ( let&amp;rsquo;s be original and call it StyleProvider )&lt;/li&gt;
&lt;li&gt;Get this in front of internal testers, accessibility teams, and beta testers to get feedback&lt;/li&gt;
&lt;li&gt;Meantime let backend team do a quick implementation where they put the styling info in an app config and directly serve it as an API&lt;/li&gt;
&lt;li&gt;Connect frontend to this API and use that to create the proper styling&lt;/li&gt;
&lt;li&gt;Create a proper styling authoring tool that writes to the config that the curation teams can use&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now this may sound very much like a cathedral-building exercise but understand that we had already shipped things to clients at #1 and we have a sustainable architecture at #4. You may be surprised at how many product teams you can convince to go with this approach.&lt;/p&gt;
&lt;h2 id=&#34;how-to-approach-compromises&#34;&gt;How to approach compromises
&lt;/h2&gt;&lt;p&gt;I do kind of make it sound too easy in the above example as you can see. In the real world, it is rarely that straightforward and you have to take in different actors in the system and how they interact. But the gist of the approach remains the same. Make sure that your product team understands that you are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Doing them a favor by prioritizing feature delivery against creating technical debt in the short term&lt;/li&gt;
&lt;li&gt;That this technical debt must be paid off before interest accrues in the long term&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember, debt is good if the use that you put that debt to is good. Mortgages allow you to live in a house now and pay later. But they are not good if you neglect the debt, do not service it and have no regard for the resulting architecture. You should always plan for and execute a refactoring strategy so you are not penalized in the long term for this technical debt. Remember - technical debt has an interest that you need to pay!&lt;/p&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/compromises-and-moving-forward/technical-debt.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Technical Debt and the Interest Accrued&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Make sure that this compromise is front and center in all discussions. It should be the basis of all discussions. Once you have done something similar, you would have built up some trust and comfort for this approach which you can reuse going forward. Once the team and stakeholders are comfortable with this approach, it becomes much easier to get people&amp;rsquo;s buy-in by pointing to previous examples of good execution of this idea.&lt;/p&gt;
&lt;h2 id=&#34;coming-back-for-the-refactor&#34;&gt;Coming back for the refactor
&lt;/h2&gt;&lt;p&gt;Now, you will be tempted to call the follow on work from the initial implementation as &amp;ldquo;Clean Up Work&amp;rdquo;. I think this will be a mistake - impressions matter and this is the wrong impression to make. Refactoring will be a more suitable and a neutral term that communicates the fact we are not making any changes to the observable behavior of the implementation but just making sure the work is arranged in such a manner as to increase comprehension for engineers and to make it easy to build on top of. There are a few ways in which you can do this.&lt;/p&gt;
&lt;p&gt;If like most organizations in this time you are using some sort of a agile project tracker, you can create two projects or epics for each phase of the project. First phase will last from initial ideation through to delivery of the quick win. The second phase will start from just before or after that to when refactoring is completed and delivered to production with all the client feedback. Another way might be to treat this as a single epic but create all stories beforehand. Now if you use a concept like &lt;a class=&#34;link&#34; href=&#34;https://martinfowler.com/bliki/BranchByAbstraction.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;branch by abstraction&lt;/a&gt; you can even have two teams working on two phases at the same time.&lt;/p&gt;
&lt;p&gt;You can also make use of other tooling such as &lt;a class=&#34;link&#34; href=&#34;https://martinfowler.com/articles/feature-toggles.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;feature flags&lt;/a&gt; for de-risking the actual production deployment. The key thing is to remember that whatever tools or techniques that you end up using, they should be used with a good process in place. What I mean by that is there should be a well known process, preferably documented and accessible easily that describes how all these tools are used in shipping features quickly. Then there can be no confusion regarding architecture and how it is made sustainable. Otherwise you will be doing that communication work every time this kind of compromise happens. Do the work for documenting these processes beforehand and save yourselves a whole bunch of time.&lt;/p&gt;
&lt;h2 id=&#34;follow-ups-demonstrations-and-retros&#34;&gt;Follow-ups, Demonstrations, and Retros
&lt;/h2&gt;&lt;p&gt;It is probably a good idea to demonstrate these actions in a retrospective about the project. If this is not standard practice, schedule a one off meeting and show it to all the stakeholders. Demonstrate the narrative of Engineering delivering something in short term by compromising ideal architecture, and recovering and perfecting the result with feedback and getting back to idea architecture. It is probably a good idea to keep a list of these occasions and their details. You would likely want to refer to this for further details, weather it is to come up with a future estimate, to recount a good year or for new team members, stakeholders or leadership to get familiarized with how compromise works in your team. It will help bring them in line with the rest of the team.&lt;/p&gt;
&lt;p&gt;Banner Photo by &lt;a href=&#34;https://unsplash.com/@disruptxn?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;Desola Lanre-Ologun&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/woman-and-man-sitting-in-front-of-monitor-IgUR1iX0mqM?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Lies, Damn Lies and Engineering Metrics</title>
        <link>https://osada.blog/posts/lies-damn-lies-and-engineering-metrics/</link>
        <pubDate>Tue, 31 Oct 2023 21:18:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/lies-damn-lies-and-engineering-metrics/</guid>
        <description>&lt;img src="https://osada.blog/posts/lies-damn-lies-and-engineering-metrics/banner.webp" alt="Featured image of post Lies, Damn Lies and Engineering Metrics" /&gt;&lt;h2 id=&#34;tldr-summary&#34;&gt;TL;DR Summary:
&lt;/h2&gt;&lt;p&gt;In the world of engineering, metrics are critical for evaluating performance and progress. But relying on subjective views and opinions can lead to flawed assessments. To determine the effectiveness of engineering practices, we need unbiased and objective metrics. The choice of metrics depends on an organization&amp;rsquo;s specific goals. Metrics should be automated, transparent, and integrated into the culture. Avoid using easily gamed or individual-level metrics. The post also explores DORA and SPACE metrics and emphasizes that there is no one-size-fits-all solution in engineering metrics.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-know-were-good&#34;&gt;How Do We Know We&amp;rsquo;re Good?
&lt;/h2&gt;&lt;p&gt;In engineering, a discipline underpinned by the scientific method, it seems we should always seek validation of our progress using scientific methods. However, in many engineering teams I&amp;rsquo;ve encountered, there is a propensity to rely on phrases like &amp;ldquo;I feel like,&amp;rdquo; &amp;ldquo;I think,&amp;rdquo; and &amp;ldquo;My point of view is.&amp;rdquo; Such subjective views, unconscious biases, and preconceived opinions can skew measurements.&lt;/p&gt;
&lt;p&gt;Presuming that the goal of an engineering management structure is to enable the formation and maintenance of high-performance teams, we need to ask how we will recognize a high-performing team. Some aspects can be measured manually, such as team health and team happiness, through surveys and one-on-one meetings. However, the measurement of the effectiveness of engineering practices requires unbiased and objective metrics. These metrics are the only way we can truly know if our engineering practices are achieving the goals we set out to accomplish.&lt;/p&gt;
&lt;p&gt;Now, whenever metrics are mentioned people tend to get skeptical and usually with good cause. After all as the title alludes to statistics and metrics have been used to dubious effect since they were invented. You may have heard any number of horror stories regarding the misuse of these. However it does not have to be that bad necessarily. Used with prudence these can provide a huge benefit to any software engineering team. That prudence is what I am setting out to put in to words in this blog post.&lt;/p&gt;
&lt;h2 id=&#34;do-we-agree-on-what-blue-is&#34;&gt;Do We Agree on What &amp;ldquo;Blue&amp;rdquo; Is?
&lt;/h2&gt;&lt;p&gt;A meme that originated on Reddit comes to mind. It featured a dress found in a charity or second-hand shop. What made it notable was the debate surrounding its color. The poster thought it was blue, but a significant number of replies argued it was gold. This seemingly simple question, &amp;ldquo;Do we all agree on what blue is?&amp;rdquo; led to a divisive dispute. It may seem strange that a seemingly straightforward matter could be so divisive. After all, defining &amp;ldquo;blue&amp;rdquo; isn&amp;rsquo;t a complex concept; even a preschooler could define it confidently.&lt;/p&gt;



&lt;figure&gt;
    &lt;a href=&#34;https://en.wikipedia.org/wiki/The_dress&#34;&gt;
        &lt;img src=&#34;https://osada.blog/posts/lies-damn-lies-and-engineering-metrics/The_dress_blueblackwhitegold.webp&#34;/&gt; &lt;/a&gt;&lt;figcaption&gt;
                
                    &lt;h4&gt;The controversial dress in question&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This story illustrates how challenging it is to reach a consensus, even on straightforward matters, within a group. Now, imagine trying to measure things like software engineering team or organizational performance and achieve a consensus within your entire organization on whether engineering is doing a good job or not. Let&amp;rsquo;s heed the lesson of the blue/gold dress people!&lt;/p&gt;
&lt;h2 id=&#34;what-do-we-want-to-measure-anyway&#34;&gt;What Do We Want to Measure, Anyway?
&lt;/h2&gt;&lt;p&gt;Before defining the exact metrics, let&amp;rsquo;s consider what qualities of teams we want to measure. While this question seems straightforward, it&amp;rsquo;s fraught with perils for those attempting to answer it. The most important thing to understand is that this is likely to vary from one organization to another. Like many of the best answers, the answer to this question is &amp;ldquo;it depends.&amp;rdquo; The main point to keep in mind is to consider the needs of your business. Unless you&amp;rsquo;re working on a hobby project, any organization, whether it&amp;rsquo;s a business or not, will have goals. Your software engineering team does not operate in isolation but supports the organization&amp;rsquo;s goals.&lt;/p&gt;
&lt;p&gt;For example, if you&amp;rsquo;re working in a charity organization helping vulnerable women in the community, your goals for your systems might include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ease of use and accessibility&lt;/li&gt;
&lt;li&gt;Security and confidentiality&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are top priorities because you serve vulnerable individuals who need help promptly, securely, and without unnecessary effort. Security is paramount because their personal data is stored in the systems, and lives may be at stake. Availability is crucial because helping people is not an optional service; it&amp;rsquo;s a critical service.&lt;/p&gt;
&lt;p&gt;However, if you&amp;rsquo;re working for an e-commerce startup in private beta, your goals might be different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Team velocity&lt;/li&gt;
&lt;li&gt;Bug leakage&lt;/li&gt;
&lt;li&gt;Website performance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your priorities are to ship features quickly and make them fast at any cost. Your company&amp;rsquo;s survival depends on emerging from stealth mode as swiftly as possible.&lt;/p&gt;
&lt;h2 id=&#34;from-objectives-to-metrics&#34;&gt;From Objectives to Metrics
&lt;/h2&gt;&lt;p&gt;In the business world, you&amp;rsquo;ve probably heard of OKRs (Objectives and Key Results). OKRs function similarly. You identify the areas you want your development team to focus on and select representative metrics that signify your work in those areas. Selecting these metrics is as much an art as a science. There are numerous courses available, from LinkedIn Learning and Coursera to Udemy and elsewhere. However, I can offer a couple of pointers specific to the software world.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Select Metrics Directly Correlated with Development Actions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This should be obvious given all the horror stories circulating in the community regarding metrics such as lines of code or bugs closed. Elon Musk famously touted lines of code committed as a measure of developer productivity and was roundly ridiculed for it, quite rightly. &lt;a class=&#34;link&#34; href=&#34;https://waitbutwhy.com/2015/01/artificial-intelligence-revolution-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Here&lt;/a&gt; is an essay where another developer talks about a colleague who was the least productive under this metric. The problem here is selecting a simple one-to-one correlation metric, which will contain all the noise and gaming that can occur in the real world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Select Individual-Level Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Select metrics that you can collectively hold a team responsible for. After all, your goal is to build high-performing teams, not high-performing individuals. There will always be individuals, like in the essay above, who may not directly work on something, but without them, the team would fall far short of the metrics being measured. This would be unfair to those individuals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Choose Targets and Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This departs from the central idea in key results. For key results in OKRs, they are clearly targets to be achieved. However, the problem with targets in the engineering domain is that any metric that becomes a target will end up being gamed. This most famously happens with unit testing coverage metrics. There have been numerous cases of people writing nonsensical &amp;ldquo;unit tests&amp;rdquo; that do not test anything but call all the functions they can fit in so that the coverage target can be gamed. The only effect of this is to increase the amount of code you have to change every time you modify an interface. So, please do not do this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-gets-measured-gets-done&#34;&gt;What Gets Measured Gets Done
&lt;/h2&gt;&lt;p&gt;To measure the chosen metrics, you&amp;rsquo;ll need to put automated facilities in place. Unless the input is human-dependent, it should always be automated. These metrics should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be simple to calculate&lt;/li&gt;
&lt;li&gt;Be always available&lt;/li&gt;
&lt;li&gt;Be transparent&lt;/li&gt;
&lt;li&gt;Be easily verifiable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rationale behind these requirements should be self-evident by now. Without these qualities, you cannot create a pervasive metric-driven culture.&lt;/p&gt;
&lt;h3 id=&#34;people-need-to-know-the-metrics&#34;&gt;People Need to Know the Metrics
&lt;/h3&gt;&lt;p&gt;This information should be easily accessible. It should be included in as many documents as possible, from onboarding documentation for newcomers to the main page of your chosen Wiki or documentation site, be it Confluence, SharePoint, or Asana. There should be no doubt in anyone&amp;rsquo;s mind regarding where to find the metrics.&lt;/p&gt;
&lt;h3 id=&#34;people-need-to-talk-in-terms-of-metrics&#34;&gt;People Need to Talk in Terms of Metrics
&lt;/h3&gt;&lt;p&gt;Ensure that team members, managers, and even senior leaders speak the language of the metrics. They should bring up metrics whenever discussions about team performance arise. Make sure to incorporate metrics into the conversation if someone uses softer language that doesn&amp;rsquo;t explicitly reference relevant metrics. For example:&lt;/p&gt;
&lt;p&gt;Senior Manager: &amp;ldquo;I&amp;rsquo;ve seen that the backend team for the app has done a marvelous job in managing the infrastructure and keeping the app available.&amp;rdquo;&lt;br&gt;
You, as a Team Lead: &amp;ldquo;Absolutely, Jeff, and all the credit should go to my wonderful team who worked diligently to maintain our availability metric at 99.995%, exceeding the target availability of 99.99%. Great work, team!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t correct people but add this as a clarification or elaboration. This is crucial because you want people to ultimately think in terms of the language of the metrics. You want them to think not &amp;ldquo;What will happen if we improve our app&amp;rsquo;s performance?&amp;rdquo; but &amp;ldquo;What will happen if we improve the response time for the main app to an average of 150ms from 200ms.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;the-measurements-have-to-be-transparent-public-and-in-your-face&#34;&gt;The measurements have to be transparent, public and IN YOUR FACE
&lt;/h3&gt;&lt;p&gt;The more pervasive the metric is, the stronger it get&amp;rsquo;s ingrained to peoples minds. I worked in one organization where there was only one metric that mattered. And that metric was everywhere. It was on any number of TV screens scattered across the office. It was on the login screen some days. All big meetings started with that number and the causes of that. The bonus was directly linked to that. There was no ambiguity in where the number came from, what value it had at any given point.&lt;/p&gt;
&lt;p&gt;Same applies to engineering metrics have a single live dashboard where the metric gets displayed and updated in real time. And make sure it is prominently visible in whatever work environment you have. Obviously this will change according if your organization is office based, hybrid or remote only. Whatever the format, make sure that this information is easily accessible.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples
&lt;/h2&gt;&lt;p&gt;This is something I have put together in the past in some of the organizations I have worked with. This mostly emphasizes devops, delivery, and performance metrics. The nature of the business was a mobile application serving a large amount of data. The team was starting to get around to doing their own devops, so this was a big part of the spotlight. Also, we were under tight deadlines to deliver the project, so delivery metrics were crucial. The performance was the biggest ask from the product team, so we added a metric for that as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Objectives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excel at implementing devops practices within the team&lt;/li&gt;
&lt;li&gt;Delivering the project under the agreed deadlines&lt;/li&gt;
&lt;li&gt;Maintain the response times for the app under 300ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lead time for change&lt;/li&gt;
&lt;li&gt;Deployment frequency&lt;/li&gt;
&lt;li&gt;Bug leakage&lt;/li&gt;
&lt;li&gt;Team delivery velocity&lt;/li&gt;
&lt;li&gt;Mean response time on the homepage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We got the sign-off from the project team and then the management for the metrics and created a dashboard containing real-time tracking for the above metrics. The team knew where they stood as well as management and the business.&lt;/p&gt;
&lt;h2 id=&#34;what-about-dora-or-space&#34;&gt;What About DORA or SPACE?
&lt;/h2&gt;&lt;p&gt;A final note about &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DORA&lt;/a&gt; (DevOps Research and Assessment) and SPACE. DORA metrics represent Deployment Frequency (DF), Lead Time for Changes (LT), Time to Restore Service (TRS), and Change Failure Rate (CFR). DORA metrics are widely used to assess the performance of DevOps and Continuous Delivery practices. First of all, the team you are in may not even practice DevOps. And even if you do, you may not want those DORA metrics to be a component of the full team&amp;rsquo;s metric set. You can and should probably use DORA metrics for evaluating your DevOps team&amp;rsquo;s performance if you have such a team. But that does not mean the full organization should be measured on it or that it should form the full criteria upon which you measure the performance of the team.&lt;/p&gt;
&lt;p&gt;SPACE is an emerging framework aimed at evaluating the competencies within software development teams. It stands for Satisfaction &amp;amp; Well-Being, Performance, Activity, Collaboration &amp;amp; Communication, and Efficiency &amp;amp; Flow. SPACE is designed to optimize the team&amp;rsquo;s capabilities and well-being. It looks beyond technical processes to include &amp;lsquo;soft&amp;rsquo; factors like team morale, communication, and overall well-being. Again, it is a good measure if your goal is to create an environment where your teams thrive, innovate, and grow. But it may not directly correspond to business requirements.&lt;/p&gt;
&lt;p&gt;The conclusion in both cases is the same as what Fred Brooks said in his seminal work, &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;The Mythical Man-Month&amp;rdquo;&lt;/a&gt;, there is no silver bullet. There is no one solution that will work in all situations for all teams. Choose the right tool for the job and ignore the current hype.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Stakeholder Management and Alliance Forming</title>
        <link>https://osada.blog/posts/stakeholders-and-alliances/</link>
        <pubDate>Sun, 08 Oct 2023 10:51:19 +0100</pubDate>
        
        <guid>https://osada.blog/posts/stakeholders-and-alliances/</guid>
        <description>&lt;img src="https://osada.blog/posts/stakeholders-and-alliances/working-together.webp" alt="Featured image of post Stakeholder Management and Alliance Forming" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#on-new-beginnings-old-dogs-and-new-tricks&#34;&gt;On new beginnings, old dogs and new tricks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#stakeholder-management&#34;&gt;Stakeholder management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-to-keep-in-mind&#34;&gt;What to keep in mind&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#understand-what-motivates-people-understand-what-is-important-to-them&#34;&gt;Understand what motivates people. Understand what is important to them&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#use-this-knowledge-to-make-sure-their-goals-are-alignd-or-at-least-point-in-the-same-direction-as-you&#34;&gt;Use this knowledge to make sure their goals are alignd or at least point in the same direction as you&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#in-the-long-run-if-your-goals-are-not-aligned-the-best-thing-to-do-is-remove-the-need-to-coordination&#34;&gt;In the long run if your goals are not aligned, the best thing to do is remove the need to coordination.&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#alliances&#34;&gt;Alliances&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#actionable-steps&#34;&gt;Actionable Steps&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#last-thoughts&#34;&gt;Last thoughts&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h1 id=&#34;stakeholders-and-alliances&#34;&gt;Stakeholders and Alliances
&lt;/h1&gt;&lt;h2 id=&#34;on-new-beginnings-old-dogs-and-new-tricks&#34;&gt;On new beginnings, old dogs and new tricks
&lt;/h2&gt;&lt;p&gt;It was a couple of years back and I had just embarked on a new role as a Solution Architect and Engineering Manager for a significant program. My responsibilities included overseeing the development of mobile apps and data analytics software. Before officially taking the reins, I faced a pivotal interview with a CXO level senior leader. This role came with hefty responsibilities, overseeing our technical portfolio, including customer-facing software, IT systems, and backend LOB software. It marked a significant transition from my previous roles – from managing single projects to overseeing an entire program.&lt;/p&gt;
&lt;p&gt;Expecting a grueling interview, most questions turned out to be quite straightforward. However, one question caught me off guard. The senior leader asked, &amp;ldquo;Who are your allies in this endeavor?&amp;rdquo; I listed our senior team members: a project manager, business manager, product manager, and operations manager. But that wasn&amp;rsquo;t what the question was about. The senior leader stressed the importance of identifying major stakeholders who had a lot of influence in the stakeholder quadrant—those who played a central role in supporting IT operations.&lt;/p&gt;
&lt;p&gt;It dawned on me that the real challenge lay not with my project team, but with the team responsible for supporting IT operations. The senior leader&amp;rsquo;s message was crystal clear: form an alliance, collaborate closely in the short term, and figure out a way to permanently resolve this bottleneck. This was the missing piece of the puzzle.&lt;/p&gt;
&lt;p&gt;For a brief moment, I felt out of my depth and vulnerable. I was familiar with programming and systems, but this was entirely new territory. Can an old dog learn new tricks?&lt;/p&gt;
&lt;h2 id=&#34;stakeholder-management&#34;&gt;Stakeholder management
&lt;/h2&gt;&lt;p&gt;This led me to go on a whirlwind tour of the subject of stakeholder management. After a few linkedin courses and HBR articles later, I had started to realize the importance of the senior leader who interviewed me said. I was very focused on how my team and I were going to deliver the product that I had lost sight of how important the rest of the organization was to deliver the product.&lt;/p&gt;
&lt;p&gt;This is true in any organization but specially true in larger organizations. There are several departments that specialize in one thing. Which means that to get anything done in such a company you need a few of those organizational units to work together. You may call them departments, divisions etc but whatever the name is the central theme is that in order to do anything useful you have to get them together and work with each other.&lt;/p&gt;
&lt;p&gt;Even in a small organization it is quite likely you will be involved with many functions other than just software development. Everyone from business analysts to delivery management is crucial to developing a software product. In order to make sure the software product gets made according to the project plan then, we need to make sure that all of these people are on the same page about where the project is currently, where you want to get to and how you will get there. And this requires explicit communication and active stakeholder management&lt;/p&gt;
&lt;h2 id=&#34;what-to-keep-in-mind&#34;&gt;What to keep in mind
&lt;/h2&gt;&lt;p&gt;Now I am not going to tell you what stakeholder management is or how to do it. That you can learn from any number of online or offline resources. What I am going to tell you is what you have to keep in mind practically when doing this.&lt;/p&gt;
&lt;h3 id=&#34;understand-what-motivates-people-understand-what-is-important-to-them&#34;&gt;Understand what motivates people. Understand what is important to them
&lt;/h3&gt;&lt;p&gt;This is the most important thing of all. And the textbooks will usually skip this because it may not be acceptable in a corporate environment to admit that not all parts of an oraganization will work towards the same goal. But the simple truth is that they do not.&lt;/p&gt;
&lt;p&gt;Maybe one team lacks the required resources so maybe their focus is on reducing the workload as much as possible so they will have some hope of maintaining a work life balance. Maybe one team is led by someone who is looking for a promotion next year so they are focused on catching all the low hanging fruit they can get their hands on. The motivations differ but the pattern stays the same. Understand the motivation and you understand how to get them to do what you want.&lt;/p&gt;
&lt;h3 id=&#34;use-this-knowledge-to-make-sure-their-goals-are-alignd-or-at-least-point-in-the-same-direction-as-you&#34;&gt;Use this knowledge to make sure their goals are alignd or at least point in the same direction as you
&lt;/h3&gt;&lt;p&gt;This does not necessarily have to mean that you convince them your goals are the best so they should adopt them. This involves creating an incentive structure that ultimately helps your team achieve their goals by providing the necessary support. This might mean making sure they get easier work from you or you work extra hard to make sure you get the news of all of the &lt;em&gt;great work&lt;/em&gt; that they are doing to senior management.&lt;/p&gt;
&lt;p&gt;For example you are working with a cyber security team that has a mandate for making sure that all the systems in the enerprise gets characterized according to the risk level a penetraton would pose. You can make sure you always pre-label your systems to make their job easier. You can help them convince other teams the value of this and evangelize this work. You can create small tools that may help this work. All of this is to make sure that they understand that their goals and yours are aligned.&lt;/p&gt;
&lt;h3 id=&#34;in-the-long-run-if-your-goals-are-not-aligned-the-best-thing-to-do-is-remove-the-need-to-coordination&#34;&gt;In the long run if your goals are not aligned, the best thing to do is remove the need to coordination.
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/stakeholders-and-alliances/escape.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Escape Hatch!&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The above steps are good as long as there is no long term misalignment between your goals and theirs. But when there are, this means that you will be expending more energy trying to get people to do their own jobs than you are expending energy to do your own job. This is &lt;strong&gt;not a heathy place&lt;/strong&gt; to be.&lt;/p&gt;
&lt;p&gt;This is when you should stop trying to build alliances and just try to move your dependency off that particuar team. This can take the form of outsourcing things done by this particular team currently. This can also mean that you get a new team allocated to you. Perhaps an option is to bring that function in to your team and stop depending on an external team. Whatever form this action takes, the end result must be the same. Your dependency on the external team is removed or reduced so that stakeholder management stops being the obstacle that it has been.&lt;/p&gt;
&lt;p&gt;I have had to do the same when it turned out an IT support team within our organization was incapable of being responsive as much as we wanted them to be. They were responsible for infrastructure provisioning and even though they were on public cloud, provisioning a simple 2 tier app stack took weeks. The reason was were were not the companies main product line and thus features very less in their own KPIs. So we were never a priority for them. Once we outsourced it, we were always the priority since we were paying the bill.&lt;/p&gt;
&lt;h2 id=&#34;alliances&#34;&gt;Alliances
&lt;/h2&gt;&lt;p&gt;Once you have the basic stakeholder management practices in place, it is important to form strategic alliances. These maybe explicit or implicit, it does not really matter. What matters is that you and the other team lead have a common understanding of where you want your mutual organizations to end up in and what each of you are doing in order to achieve that. This kind of partnership allows you to move fast and take decisions that otherwise will have to go through numerous catch ups and sign off meetings. When you have formed an alliance you have an implicit trust put in place that allows you to take a decision almost unilaterally and have your allies interpret this in the best light possible rather than assume worst.&lt;/p&gt;
&lt;p&gt;This is the most important outcome you want. If you get stuck in the quagmire of committee based decision making or you need to run to your common superior every time you need to take a decision, you will not be going anywhere in a hurry. If you are to move fast, you need this essential to be in place.&lt;/p&gt;
&lt;p&gt;And there is one very important side effect of this - now you have a rant buddy. Day not going well - rant to your ally. Latest strategic plan stuck in committee - rant to your ally. You can do this safely in the knowledge that as long as you both agree on the goals of your organization, you can complain about not achieving your goals to each other. Considering how lonely team leaderships and management positions can be, this can be a lifeline!&lt;/p&gt;
&lt;h2 id=&#34;actionable-steps&#34;&gt;Actionable Steps
&lt;/h2&gt;&lt;p&gt;To effectively implement stakeholder management and alliance building, consider the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Stakeholders&lt;/strong&gt;: Understand, identify, and list down the key stakeholders who matter to your team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define Their Goals&lt;/strong&gt;: List the goals and objectives of these stakeholders to gain a better understanding of their priorities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initiate Communication&lt;/strong&gt;: Schedule an initial catch-up meeting with stakeholders to ensure alignment and confirm their goals. Ask open-ended questions like, &amp;ldquo;Is this still a priority for your team? How can we assist in achieving it?&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communicate Internally&lt;/strong&gt;: Share the updated stakeholder goals and details with other senior team members to ensure everyone is on the same page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strategic Planning&lt;/strong&gt;: Determine your future actions using an appropriate stakeholder management model or framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps, you&amp;rsquo;ll be well-prepared to navigate the complex world of stakeholder management and build effective alliances for your organization&amp;rsquo;s success.&lt;/p&gt;
&lt;h2 id=&#34;last-thoughts&#34;&gt;Last thoughts
&lt;/h2&gt;&lt;p&gt;Stakeholder management is a complex and intricate subjects. There are all kinds of academic theories of how this is supposed to work - from &lt;a class=&#34;link&#34; href=&#34;https://www.researchgate.net/publication/220920774_A_Better_Fit_-_Characterising_the_Stakeholders&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;onion diagrams&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://www.pmi.org/learning/library/stakeholder-analysis-pivotal-practice-projects-8905&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;quadrant based analysis&lt;/a&gt;. It does not really matter which model you use to start with as long as&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you understand the need to stakeholder management and alliance building&lt;/li&gt;
&lt;li&gt;you do not hold dogmatically on to one model&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have above two traits, you are set to navigate this complex subject space and put what you have learned to use.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Engineering Standards in Teams</title>
        <link>https://osada.blog/posts/engineering-standards-in-teams/</link>
        <pubDate>Mon, 11 Sep 2023 01:38:25 +0100</pubDate>
        
        <guid>https://osada.blog/posts/engineering-standards-in-teams/</guid>
        <description>&lt;img src="https://osada.blog/posts/engineering-standards-in-teams/scott-graham-5fNmWej4tAA-unsplash.webp" alt="Featured image of post Engineering Standards in Teams" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#healthy-conflict-and-unhelpful-distractions&#34;&gt;Healthy conflict and unhelpful distractions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-do-engineering-standards-right&#34;&gt;How to do Engineering standards right&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#establish-trust&#34;&gt;Establish Trust&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#optimize-workflow&#34;&gt;Optimize Workflow&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#so-how-would-i-start-implementing-engineering-standards&#34;&gt;So how would I start implementing engineering standards?&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#slowly&#34;&gt;Slowly&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deliberately&#34;&gt;Deliberately&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#with-purpose&#34;&gt;With purpose&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;One of my best friends, who I first met in a previous job, called me one evening. For now, let&amp;rsquo;s call him Jake. He is the calmest person I have ever met. And if you know me, I am usually the farthest from calm of any of us, comfortably bubbling between enthusiasm and dejection with alarming frequency. But on this day, Jake seems a bit shaken. He wants my input on something. He is having some troubles at work with a colleague who started new in his team. They are working on something that is novel to Jake, but he is starting to feel like his new colleague, let&amp;rsquo;s call him Mike, does not know much about the fundamentals of the tech even though he is supposed to. They have just had a disagreement regarding the proper use of the standard libraries and the language they are using, and it turns out Jake was right. He wants to know how he might best handle the situation. We talk for a while, I listen for the most part and we settle on a course of action that we think will resolve the issue. But this gets me thinking - why did this situation arise in the first place.&lt;/p&gt;
&lt;h2 id=&#34;healthy-conflict-and-unhelpful-distractions&#34;&gt;Healthy conflict and unhelpful distractions
&lt;/h2&gt;&lt;p&gt;Conflict in teams do not have to be a siren announcing doom and gloom (And this is coming from Brené Brown and I promise you will not regret reading her take on it &lt;a class=&#34;link&#34; href=&#34;https://www.amazon.com/dp/0812995848&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;). In fact most of the time we can even turn conflict in to an asset - it can create more engagement, it serves as a barometer of people&amp;rsquo;s involvement. I am not advocating for a management style that tries to avoid conflict at all cost. But there are times when conflict is not helpful, especially when the issue at hand is debate on facts that are already well established.&lt;/p&gt;
&lt;p&gt;I have been in pretty heated debates about language-related things like coding styles and linters. They were fun, very revealing about our values as a team, and I would dive headfirst into the next one without any hesitation. But the problem with the debate Jake was having was it was about fundamentals like the proper use of visibility modifiers. There is no debate about these, and there should not have been one. These are matters that define the engineering excellence policies a team should be following. Unlike say a ways of working based conflict, this does not really need discretion or consideration of individual preferences - engineering excellence is a policy decision.&lt;/p&gt;
&lt;p&gt;This is where engineering standards come in. Once established, they allow your team to focus on delivering value to your customers instead of getting embroiled in issues that can be routinely handled by established guidance. They save your team from having unnecessary conflict and expending time on resolving those. And they allow you to deliver things faster because the team can offload that to various degrees of automation and concentrate on other things. They make for great quality software because now you deliver consistently good software, and they are more likely to be bug-free (Note that this is not a given. We have all seen enough AbstractSingletonProxyFactoryBean classes riddled with bugs).&lt;/p&gt;
&lt;h2 id=&#34;how-to-do-engineering-standards-right&#34;&gt;How to do Engineering standards right
&lt;/h2&gt;&lt;p&gt;The common complaint from engineers against engineering standards is - &lt;em&gt;But they stifle creativity!&lt;/em&gt;. Yes, they do. And that is kind of the point. &lt;em&gt;Insert Evil Laugh&lt;/em&gt;.&lt;br&gt;
More seriously, they are not there to stifle creativity but to perform two very important tasks in a high-functioning team.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Establish trust.&lt;/li&gt;
&lt;li&gt;Optimize workflow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You sure can use enforcing standards to stifle creativity, and we have seen it happen at one time or another. This is how we get rules like all the data must always access through explicitly written accessors, and &lt;a class=&#34;link&#34; href=&#34;https://openjdk.org/jeps/395&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;record types&lt;/a&gt; get banned. But sensibly applied, engineering standards will do the two functions above without stifling creativity. In fact, I would argue that this is the test of good engineering standards - do they enable the above while allowing developers to develop innovative solutions to the product problems they have. Understand that dogma is not helpful and pragmatism is the key!&lt;/p&gt;
&lt;h3 id=&#34;establish-trust&#34;&gt;Establish Trust
&lt;/h3&gt;&lt;p&gt;How do engineering standards establish trust among folks in a high-functioning team? Because this gives a baseline quality and shape to the codebase. It is well established that any code above a few hundred lines will take a significant amount of time to digest and understand. Now expand that fact to the usual technical estate found in today&amp;rsquo;s typical workplace where tens of microservices each worth a few thousand lines of code is a common sight. If you cannot make simple assumptions about the fundamental aspects of the codebase, the only way to interact with the codebase becomes working with it until you have familiarized yourself with all aspects of it, and this might take years. That is a nightmare scenario for Team Leads such as myself. This means the time to be productive is years for folks making both them and us frustrated.&lt;/p&gt;
&lt;p&gt;If you can assume certain fundamentals always hold true, then this becomes much easier. You are free to concentrate on the things built up from this baseline only, leaving a much less cognitive load on you. This gives you assurance that all of your team knows and takes care to follow these standards. Suddenly, they are not strangers in the code land - they are fellow travelers on your journey to a better product who share your coding values and ideas. You all agree on fundamentals, and you are assured there will be no nasty surprises were you to undertake some significant work together. This shared identity is the first step in building team trust.&lt;/p&gt;
&lt;h3 id=&#34;optimize-workflow&#34;&gt;Optimize Workflow
&lt;/h3&gt;&lt;p&gt;In agile teams, we talk about how to optimize our workflow and specifically in Kanban, there is an emphasis on increasing flow. The way to do this seems to be by making sure we reduce handover and context required. Engineering standards make sure that there is no new information required to handle tasks beyond the specific business value the tasks deliver. Take a team that has standardized on using Redis as a KV store for intra-service caching, for example. Imagine there is a team-specific client library for interacting with the Redis cluster for that microservice. Now, if there was no standard, and it was a custom component that talked to the Redis cluster, you will have to read through and understand everything about how Redis gets used in there, from &lt;code&gt;AUTH&lt;/code&gt; statements to if pipelining is used. But with the team-specific client, you can limit your understanding to the client interface, and it is reusable across any other microservices. If the credentials come from environment variables, they always come from the same ones, etc.&lt;/p&gt;
&lt;p&gt;This allows your team members to concentrate on delivering the actual business value instead of worrying about tangential technical matters.&lt;/p&gt;
&lt;h2 id=&#34;so-how-would-i-start-implementing-engineering-standards&#34;&gt;So how would I start implementing engineering standards?
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/engineering-standards-in-teams/nick-abrams-FTKfX3xZIcc-unsplash.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Slow and Steady&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;Slowly.&lt;/li&gt;
&lt;li&gt;Deliberately.&lt;/li&gt;
&lt;li&gt;With purpose.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;slowly&#34;&gt;Slowly
&lt;/h3&gt;&lt;p&gt;Go slow. Start by introducing a limited set of standards, focusing on the most critical areas of improvement. This gradual rollout allows the team to adjust to the changes and provides the opportunity to gather feedback and make adjustments as needed. It&amp;rsquo;s essential to balance the pace of implementation with the team&amp;rsquo;s capacity to adapt, ensuring that they can embrace the standards comfortably without feeling overwhelmed. Remember you are not in a race; it is not about being the first to implement these standards.&lt;/p&gt;
&lt;h3 id=&#34;deliberately&#34;&gt;Deliberately
&lt;/h3&gt;&lt;p&gt;Each step in the implementation process should be well-thought-out and intentional. Deliberation involves careful planning, clear communication, and a thorough understanding of the objectives and potential impacts of the standards. Take the time to assess the current state of the team, identify pain points and areas for improvement, and create a roadmap for introducing standards. When changes are deliberate, they are more likely to be effective and accepted by the team. Understand that a team requires a &amp;ldquo;why&amp;rdquo; more than they will ever need a &amp;ldquo;how.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;with-purpose&#34;&gt;With purpose
&lt;/h3&gt;&lt;p&gt;The implementation of engineering standards should have a clear purpose and align with the overall goals and values of the organization. Define the specific problems or challenges that the standards aim to address, whether it&amp;rsquo;s improving code quality, enhancing collaboration, or meeting compliance requirements. Ensure that the team understands the purpose behind the standards, as this helps motivate and engage team members in the process. Having a well-defined purpose also allows you to measure the success and impact of the standards against your intended outcomes. Always make sure that the overall vision for your team aligns well with whatever engineering standards you are trying to instill.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Broken Window Theory in Software Teams</title>
        <link>https://osada.blog/posts/broken-window-theory-in-software-teams/</link>
        <pubDate>Sun, 03 Sep 2023 10:51:19 +0100</pubDate>
        
        <guid>https://osada.blog/posts/broken-window-theory-in-software-teams/</guid>
        <description>&lt;img src="https://osada.blog/posts/broken-window-theory-in-software-teams/broken-windows.webp" alt="Featured image of post Broken Window Theory in Software Teams" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#key-concepts&#34;&gt;Key Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practical-application&#34;&gt;Practical Application&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#impact-and-controversies&#34;&gt;Impact and Controversies:&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins
&lt;/h2&gt;&lt;p&gt;The Broken Windows Theory emerged in the early 1980s as a response to the rising concerns about crime and urban decay in American cities. James Q. Wilson, a prominent social scientist, and George L. Kelling, a criminologist, co-authored an article titled &amp;ldquo;Broken Windows: The Police and Neighborhood Safety,&amp;rdquo; which was published in the Atlantic Monthly in 1982.&lt;/p&gt;
&lt;h3 id=&#34;key-concepts&#34;&gt;Key Concepts
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Visible Signs of Disorder: Wilson and Kelling proposed that visible signs of disorder in neighborhoods, such as broken windows, graffiti, or litter, create an environment that fosters crime. They argued that when one broken window in a building goes unrepaired, it sends a signal that no one cares about the area, leading to more windows breaking and an overall sense of neglect.&lt;/li&gt;
&lt;li&gt;Quality-of-Life Policing: The authors advocated for a shift in policing strategies from solely focusing on serious crimes to addressing low-level offenses and maintaining order in communities. They emphasized that addressing minor infractions and maintaining a sense of order would prevent the emergence of more serious criminal behavior.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;practical-application&#34;&gt;Practical Application
&lt;/h3&gt;&lt;p&gt;The practical application of the Broken Windows Theory led to significant changes in law enforcement and community policing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Community Policing: Police departments began adopting community policing strategies, which involved officers engaging with the community, building relationships, and addressing quality-of-life issues. This approach aimed to create a sense of partnership between law enforcement and residents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crime Mapping and Data Analysis: Law enforcement agencies started using data analysis and crime mapping to identify areas with high levels of disorder and crime. This allowed them to allocate resources more effectively and target specific problem areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community Engagement: Beyond law enforcement, the Broken Windows Theory inspired community organizations and local governments to take an active role in neighborhood revitalization. Cleanup initiatives, graffiti removal programs, and neighborhood watch groups aimed to address visible signs of disorder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that there were other practices that took inspiration from this theory ( such as zero tolerance policies ). I do not discuss them as I do not believe they resulted in a net positive for the society. If anything blanket policies like that has a disproportionate impact on the minorities and exacerbates problems. Therefore we will discuss what we believe are the policies that actually made a difference here.&lt;/p&gt;
&lt;h3 id=&#34;impact-and-controversies&#34;&gt;Impact and Controversies:
&lt;/h3&gt;&lt;p&gt;While there were clear benefits where this theory was applied, the practical application of the Broken Windows Theory has been both praised and criticized. While some attribute reductions in crime rates to its implementation, others argue that it can lead to over-policing and the criminalization of minor offenses, disproportionately affecting marginalized communities. Additionally, the theory&amp;rsquo;s effectiveness in addressing serious crime remains a subject of debate. Having said all of that we can all agree I think that intuitively this idea holds water.&lt;/p&gt;
&lt;h2 id=&#34;software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour
&lt;/h2&gt;&lt;p&gt;What does all of this sociological theories have to do with software engineering you say? Well, unruliness have the same effect on software engineering systems. Think of it this way, if your technical estate is a street, then missing unit tests, no consistent styling, and other little things that may correspond to a broken window. And these indicate to your team that you no longer really care about these things. This means the team values, however you may have promoted them before, no longer really applies and are no longer important to the team&amp;rsquo;s management.&lt;/p&gt;
&lt;p&gt;Signaling within a team refers to the deliberate actions and behaviors of leaders that convey their intentions, values, and expectations to team members. These signals are pivotal in influencing team dynamics and guiding individual behavior. Leaders employ both explicit and implicit forms of communication. Explicitly, leaders use clear verbal communication to articulate their objectives, mission, and guidelines. Implicitly, their actions and decisions send strong signals. For example, a leader who consistently exhibits dedication and punctuality sets a precedent for the team. Leadership signals extend to decision-making. Choices regarding resource allocation or project priorities convey the leader&amp;rsquo;s priorities and strategic direction, directly affecting team perceptions.&lt;/p&gt;
&lt;p&gt;When the signalling within the team indicates implicitly by the way of no resource allocation to addressing &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; or explicitly by dictating that &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; are too unimportant to address, the leadership seems to communicate that these are not pivotal to the engineering standards of a team. That in turn leads the team to read in between the lines and doubt where exactly then is the proverbial line in the sand? How much can they let the engineering standards lax before the leadership holds them to account?&lt;/p&gt;
&lt;h2 id=&#34;so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?
&lt;/h2&gt;&lt;p&gt;And this is the most important point - you need to communicate the expectation to the team. Lack of standard for the one Rust program within the full Java based technical estate does not constitute a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. Consistency in communication and expectation setting matters a lot here. If your team&amp;rsquo;s primary language is C# and you do not have a style guide for it, then there is potential for trouble. If people apply different rules in different contexts leading to inconsistency and you do not intervene, then it becomes a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. There is no hard and fast rule here I think. Use your judgement for the most part but simple few criteria should help you out for the most part&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the issue in question apply broadly across your technical estate? If so it probably is significant enough&lt;/li&gt;
&lt;li&gt;Had you previously communicated that the issue in hand is important enough to have a team-wide consensus?&lt;/li&gt;
&lt;li&gt;Is the excellence or following the best practice in the aspect in question a priority for your wider organization? If so, yes it probably will be a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?
&lt;/h2&gt;&lt;p&gt;There are lots of reasons I can list but the following would probably be the top of the list&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cultural Significance: Just as the Broken Window Theory suggests that neglecting visible signs of disorder can create a culture of apathy, allowing cosmetic issues to persist in a codebase or development process can set a precedent for a lack of attention to detail. Over time, this can erode the team&amp;rsquo;s commitment to engineering excellence and high standards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attention to Detail: Software engineering thrives on precision and meticulous attention to detail. Addressing cosmetic issues demonstrates a commitment to getting the small things right. It sends a message that the team values craftsmanship and is dedicated to delivering high-quality software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preventing Technical Debt: Cosmetic issues, if left unaddressed, can accumulate and contribute to technical debt. Technical debt refers to the cost of fixing issues and improving code quality that accrues over time when shortcuts are taken or issues are ignored. By tackling visible but cosmetic issues early, teams can prevent the accumulation of technical debt and maintain a codebase that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Quality and Maintainability: Cosmetic issues, such as inconsistent formatting or poor documentation, can make code less readable and maintainable. This can slow down development and increase the likelihood of introducing bugs during future changes. By addressing these issues, teams ensure that the codebase remains clean, comprehensible, and easier to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhancing Collaboration: Clear and well-maintained code fosters effective collaboration among team members. When everyone can easily understand and work with the code, it reduces the risk of misunderstandings and conflicts. It also allows for smoother code reviews and knowledge sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Professionalism and Customer Perception: Software engineering is a professional discipline, and professionalism extends to the quality of the work produced. Visible cosmetic issues can detract from the professional image of the team and the organization as a whole. Additionally, customers and end-users often judge software quality by its visible aspects, such as user interface design and consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous Improvement: Addressing cosmetic issues is an integral part of a culture of continuous improvement. Teams that are committed to excellence understand that improvement starts with the small details. By consistently addressing these details, teams set themselves up for a cycle of improvement that extends to all aspects of their work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see I may have stolen some talking points from the agile manifesto there. This is not an oversight - I truly do believe in agile teams it is very important that we keep up the engineering excellence lest we lose sight of the trees for the forest and sacrifice technical excellence for business value.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;Addressing visible but cosmetic issues is not merely about aesthetics; it&amp;rsquo;s about maintaining a culture of engineering excellence, professionalism, and continuous improvement within a software engineering team. By valuing and addressing these issues, teams can prevent the deterioration of code quality, foster collaboration, and ultimately deliver software that meets high standards and exceeds customer expectations.&lt;/p&gt;
&lt;p&gt;Note :&lt;br&gt;


Photo by &lt;a href=&#34;https://unsplash.com/@christopherphigh?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Christopher Paul High&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/Iv7x6fmJ8Og?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Empathy and Respect in Software Engineering Teams: Actions for a Team Lead</title>
        <link>https://osada.blog/posts/respect-and-empathy-in-teams/</link>
        <pubDate>Tue, 29 Aug 2023 00:51:19 +0100</pubDate>
        
        <guid>https://osada.blog/posts/respect-and-empathy-in-teams/</guid>
        <description>&lt;img src="https://osada.blog/posts/respect-and-empathy-in-teams/empathy-banner.webp" alt="Featured image of post Empathy and Respect in Software Engineering Teams: Actions for a Team Lead" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In the world of software engineering, where we mostly think about systems and platforms, where success is measured in SLOs and RPSs there are two things that are crucial to the teams that actually build these software systems: empathy and respect. These two qualities might not be lines of code or algorithms, but they are the heartbeat of cohesive and innovative software engineering teams. This is why it is important for software engineering managers and team leads to be aware of them even though they are not hard technical matters.&lt;/p&gt;
&lt;p&gt;Empathy is the ability to step into another person&amp;rsquo;s shoes and understand their feelings, thoughts, and experiences. It&amp;rsquo;s a nod to the fact that each one of us brings a unique perspective, and by understanding that perspective, we unlock the potential for deeper connections and more meaningful collaborations. Empathy acknowledges that behind every line of code is a coder – someone with aspirations, ideas, and the occasional cup of coffee.&lt;/p&gt;
&lt;p&gt;Respect, on the other hand, is the recognition that every individual, regardless of their role or level of expertise, carries inherent value. It&amp;rsquo;s the understanding that differing opinions aren&amp;rsquo;t roadblocks but rather pathways to better solutions. Respect acknowledges that the act of listening can sometimes be as powerful as typing out a thousand lines of code.&lt;/p&gt;
&lt;p&gt;While empathy is about understanding, respect is about honoring. When these two qualities intertwine, they create a synergy that fuels teams with trust, collaboration, and innovation. Empathy opens the door for open conversations, while respect ensures that those conversations are met with genuine consideration. And fostering good communication is at the centre of building high performance teams&lt;/p&gt;
&lt;h2 id=&#34;putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams
&lt;/h2&gt;&lt;p&gt;But what does that have to do with what we do in our day to day work in our engineering teams? The above descriptions seem quite theoretical and abstract. How can we actually put these in to practice in our day to day work. Let&amp;rsquo;s take a few examples&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Story Refinement:&lt;/p&gt;
&lt;p&gt;Empathy: Understanding the end user&amp;rsquo;s perspective is at the core of story refinement. By putting yourself in the user&amp;rsquo;s shoes, you can ensure that the software you&amp;rsquo;re building meets their needs effectively. This goes twice for backend engineers such as my own team. We like to think that we have less user experience concerns because our clients are not direct customer but other development teams. In truth this is even more important because if we do not design a good, developer friendly, usable API, we will be putting other developers in to unnecessary hardships.&lt;br&gt;
Respect: Respect for diverse viewpoints during story refinement allows for a well-rounded understanding of the problem. Every perspective contributes to a more comprehensive solution. Understand that product owners, UX designers, Data Engineers and various other teams will come at a problem from their own viewpoints. They each bring their own ideas to the table and make sure to consider them all in equal weight so as not to dismiss any ideas out of hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coding:&lt;/p&gt;
&lt;p&gt;Empathy: While coding, empathy is about considering future maintainers. Writing clean, organized code makes it easier for your teammates to understand and collaborate. Remember the old quip - &lt;a class=&#34;link&#34; href=&#34;http://c2.com/cgi/wiki?CodeForTheMaintainer=&amp;amp;ref=blog.codinghorror.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.&amp;rdquo;&lt;/a&gt;.&lt;br&gt;
Respect: Respect for coding standards and conventions maintains consistency across the codebase, making it accessible to everyone who interacts with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Reviews:&lt;/p&gt;
&lt;p&gt;Empathy: During code reviews, empathy involves understanding that mistakes happen. Providing feedback in a constructive and considerate manner promotes a positive learning environment. Make sure to let the team members know that the comments are about making their skills better and making the product better.&lt;br&gt;
Respect: Respectful code reviews acknowledge the effort that went into the code and offer suggestions for improvement without undermining the coder&amp;rsquo;s skills. Understand that the you should make an equal effort to make sure they get good feedback. Make sure they feel good about them when they have done a good job as well. Too often people only offer criticism and while that is important, you should let them know when they have done a good job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build and Release:&lt;/p&gt;
&lt;p&gt;Empathy: In the build and release process, empathy means considering the impact of your changes on other team members and downstream processes. More often than not, when doing releases, we are more concerned about getting the application out and hitting our deadlines. But good practice calls for coordination and advance notification. If you have operations teams - let them know in advance, make a summary of changes and distribute it. If you have folks who are on call in the team, include them in the communications. And most importantly for backend teams (again like my own team!), let the downstream clients know and give them a chance to verify the changes, preferably with you standing by to help if required.&lt;br&gt;
Respect: Respect for the release process and schedule ensures that the efforts of all team members are aligned, minimizing disruptions. Make the necessary changes to allow for other team&amp;rsquo;s practices and conventions. If you need to change things, talk to the other teams, most of the time they will be willing to budge or compromise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Empathy and respect aren&amp;rsquo;t limited to a single activity; they infuse every aspect of software engineering. By understanding each other&amp;rsquo;s roles, appreciating diverse viewpoints, and valuing the collective efforts, software engineers can create a harmonious ecosystem where innovation flourishes and collaboration thrives. So, as you embark on your coding journey, remember that behind every line of code is a world of empathy and respect.&lt;/p&gt;
&lt;h2 id=&#34;the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead
&lt;/h2&gt;&lt;p&gt;As a software engineering team lead, you&amp;rsquo;re not just responsible for managing code; you&amp;rsquo;re entrusted with cultivating an environment where empathy and respect flourish. Your role goes beyond technical guidance, encompassing the creation of a team culture that prioritizes these foundational values. Here&amp;rsquo;s how you can play a pivotal role in fostering a culture centered around empathy and respect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lead by Example:&lt;br&gt;
Demonstrate empathetic and respectful behavior in all your interactions. Your actions set the tone for the entire team. If you do not show empathy and respect in practice, your team will not either.&lt;/li&gt;
&lt;li&gt;Encourage Open Communication:&lt;br&gt;
Promote transparent and open communication channels, encouraging team members to share their perspectives and insights freely. There can be no empathy if people are not openly communicating how they feel. Your team should be able to communicate the need for improved software quality, improved processes and better software engineering culture without feeling like they are personally targeting anyone. Equip them to communicate these ideas properly, and as it says above, lead by example.&lt;/li&gt;
&lt;li&gt;Address Imposter Syndrome:&lt;br&gt;
Provide resources and guidance to help team members navigate imposter syndrome. Offer a support system to bolster confidence and self-assurance. This is crucial in practice I have found. Engineers from more diverse and varied backgrounds often feel like they do not belong and are not worth the position and role they find themselves in. I, myself have gone through this early in my career. As a software team lead it is your responsibility to identify this, and make sure they know their worth and capability. Tell them that having a self respect for their own capability is the first step towards making the team better by using their skills. If they do not feel empowered and compelled to make the team better using their skills, it is game over already.&lt;/li&gt;
&lt;li&gt;Embrace Diversity:&lt;br&gt;
Recognize the significance of diverse viewpoints. Embrace the unique qualities that each team member brings to the table. If your team does not have diverse opinions, take corrective action. Hire for diversity, offer coaching, reward contrary and diverse viewpoints - because homogeneous thinking never improved any team.&lt;/li&gt;
&lt;li&gt;Navigate Conflicts with Empathy:&lt;br&gt;
Address conflicts with empathy and fairness, ensuring that all voices are heard and understood during resolution. As a team leader, the onus will be on you to solve most of the team internal conflicts as well and external conflicts with other teams. Always understand, where they come from and remind yourself that whatever the problem at hand is, all of you are on the same team and have the same goal - make the product better.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your role as a team lead extends far beyond the technical realm. By nurturing a culture steeped in empathy and respect, you lay the foundation for a cohesive, innovative, and high performance software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering
&lt;/h2&gt;&lt;p&gt;This kind of emphasis is getting quite frequent in software engineering field these days. Take spotify for an example. They have released a developer portal generating tool called backstage and on the &lt;a class=&#34;link&#34; href=&#34;https://engineering.atspotify.com/2022/12/shipping-spotifys-culture-5-plugins-and-4-principles-for-supercharging-developer-experience-at-scale/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post announcing the tool&lt;/a&gt;, they list four principles that they want the users of that tool to follows. They themselves follow the principles as well&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 4. Our fellow developers are our customers, so build with empathy
&amp;gt; 
&amp;gt; Developers deserve as great an experience as our listeners and creators do. 
&amp;gt; Ensure that the tools in the Spotify platform are the right tools for the job — and listen and adapt when they aren’t. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And clever says something similar about their engineering culture as well. Here is a &lt;a class=&#34;link&#34; href=&#34;https://engineering.clever.com/2017/09/06/defining-clevers-engineering-culture/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post&lt;/a&gt; explaining how they value empathy. To quote the interesting bits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Code with Empathy

&amp;gt; We develop software with our customers and our fellow engineers in mind. To gain empathy for our customers, we embed product managers within engineering teams so they may work closely together. We also encourage engineers to participate in product specifications, user testing, and school visits. We choose to write code that is readable over code that is clever or terse, to help our colleagues and future selves read and update the code. We value simplicity as a key ingredient in  software architecture and implementation, as simple systems are easier to maintain, debug, and operate.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is again repeated in various places from &lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/presentations/empathy-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;infoq&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/empathy-secret-sauce-good-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;newstack&lt;/a&gt;. But the common theme is the same. Empathy is a key ingredient in a high performing software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;Remember Empathy is not just a feeling. It is a core part of what makes good teams perform better. It is the thing that keeps the members together and work as a team. What makes the whole greater than the sum of it&amp;rsquo;s parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Respect Enhances Empathy: When you respect someone, you are more likely to listen actively and engage with an open mind. This can lead to a deeper understanding of their feelings and viewpoints, fostering empathy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empathy Deepens Respect: Empathy allows you to see things from another person&amp;rsquo;s perspective, which can lead to a greater appreciation for their uniqueness and the challenges they might be facing. This, in turn, strengthens the respect you have for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Support Positive Relationships: Building relationships based on both respect and empathy creates an environment of trust, understanding, and support. It promotes effective communication and reduces misunderstandings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Counter Conflict: In conflicts or disagreements, both respect and empathy can play essential roles in defusing tension. Showing respect even during disagreements and trying to understand the other person&amp;rsquo;s perspective can prevent conflicts from escalating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, respect and empathy are interconnected values that contribute to healthier and more compassionate interactions. Practicing both in your relationships can lead to better communication, reduced misunderstandings, and a more harmonious environment overall.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unleashing the Power of Small Stories: Strategies for Breaking Down Backend API User Stories</title>
        <link>https://osada.blog/posts/small-user-stories/</link>
        <pubDate>Mon, 10 Jul 2023 14:30:00 +0000</pubDate>
        
        <guid>https://osada.blog/posts/small-user-stories/</guid>
        <description>&lt;img src="https://osada.blog/posts/small-user-stories/john-moeses-bauan-Oj-G9GYlLr0-unsplash.webp" alt="Featured image of post Unleashing the Power of Small Stories: Strategies for Breaking Down Backend API User Stories" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#advantages-of-small-stories&#34;&gt;Advantages of Small Stories&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#taking-a-detour-exploring-the-invest-principle&#34;&gt;Taking a Detour: Exploring the INVEST Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#breaking-down-backend-api-user-stories&#34;&gt;Breaking Down Backend API User Stories&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#test-driven-development-tdd-and-behavior-driven-development-bdd&#34;&gt;Test-Driven Development (TDD) and Behavior-Driven Development (BDD)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h1 id=&#34;unleashing-the-power-of-small-stories-strategies-for-breaking-down-backend-api-user-stories&#34;&gt;Unleashing the Power of Small Stories: Strategies for Breaking Down Backend API User Stories
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In the world of software development, breaking down requirements into smaller, more manageable pieces is often hailed as a best practice. The concept of creating smaller user stories has gained traction for several reasons. Not only does it align with the principle of &amp;ldquo;aim small, miss small,&amp;rdquo; but it also offers numerous advantages that contribute to more successful development projects. In this blog post, we will explore the benefits of small stories and dive into practical strategies for breaking down backend API user stories effectively.&lt;/p&gt;
&lt;h2 id=&#34;advantages-of-small-stories&#34;&gt;Advantages of Small Stories
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/small-user-stories/markus-spiske-C0koz3G1I4I-unsplash.webp&#34;/&gt; &lt;figcaption&gt;
                
                &lt;p&gt;
                    
                    &lt;a href=&#34;https://unsplash.com/photos/C0koz3G1I4I?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt; 
                        Photo by Markus Spiske
                        &lt;/a&gt;&lt;/p&gt;
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Breaking down backend API user stories into smaller units brings several advantages to the development process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easier Review&lt;/strong&gt;: Smaller stories are easier to review and provide feedback on. With a clear focus and concise scope, reviewers can quickly understand the functionality and provide more targeted feedback, leading to faster iterations and improved collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easier Estimation&lt;/strong&gt;: The &amp;ldquo;aim small, miss small&amp;rdquo; principle applies here. Smaller stories are easier to estimate accurately. When a story is broken down into smaller parts, each with its own estimated effort, the overall estimation becomes more precise. This leads to better planning, increased predictability, and reduced risks of underestimation or overestimation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easier Validation&lt;/strong&gt;: Validating smaller stories becomes more manageable. Each small story represents a specific functionality or feature that can be independently validated. This enables early and frequent validation throughout the development process, allowing for quick iterations and course corrections, if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhanced Transparency&lt;/strong&gt;: Smaller stories provide higher transparency and visibility into sprint progress. During daily stand-ups and stakeholder updates, progress can be easily tracked with a series of completed, small stories. This promotes transparency and helps stakeholders understand the incremental progress being made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alignment with INVEST&lt;/strong&gt;: Small stories align with the INVEST acronym, which stands for Independent, Negotiable, Valuable, Estimable, Small, and Testable. By breaking down user stories into smaller units, teams ensure that each story is independent, negotiable, valuable, estimable, small, and testable, enabling more effective development and delivering value incrementally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;taking-a-detour-exploring-the-invest-principle&#34;&gt;Taking a Detour: Exploring the INVEST Principle
&lt;/h2&gt;&lt;p&gt;Before we dive deeper into strategies for breaking down backend API user stories, let&amp;rsquo;s take a detour to explore the INVEST principle. While it may seem like a slight diversion, understanding INVEST is crucial because it provides a set of guidelines to create effective user stories. By adhering to these principles, we can ensure that our user stories are well-defined, manageable, and deliver real value.&lt;/p&gt;
&lt;p&gt;The INVEST principle helps us in several ways. Let&amp;rsquo;s break down the acronym to understand its key aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;: Independent. User stories should be self-contained and independent of each other, allowing for flexibility in prioritization and development. By reducing dependencies between stories, teams can work on them concurrently and make progress more efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;: Negotiable. User stories should be negotiable and open to discussion between the development team and stakeholders. This promotes collaboration and allows for adjustments to the scope, requirements, or implementation approach as needed throughout the development process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;V&lt;/strong&gt;: Valuable. User stories should deliver value to the end-users or customers. Each story should focus on a specific feature or functionality that provides meaningful outcomes and contributes to the overall value of the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;: Estimable. User stories should be estimable in terms of effort and complexity. This enables the team to effectively plan and allocate resources, and facilitates decision-making regarding the priority and sequencing of the stories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;: Small. User stories should be small enough to be completed within a single iteration or sprint. By keeping stories small, teams can maintain a steady and predictable pace of development, achieve faster feedback loops, and improve visibility into progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;: Testable. User stories should be testable, meaning they have clear and well-defined acceptance criteria. This ensures that the functionality described in the story can be validated through testing, allowing the team to verify that the desired outcomes have been achieved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By exploring the INVEST principle, we gain valuable insights into creating user stories that align with agile principles and facilitate successful development. Now, let&amp;rsquo;s continue our journey and delve into strategies for breaking down backend API user stories.&lt;/p&gt;
&lt;p&gt;For further reading on the INVEST principle, you can refer to the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.amazon.com/User-Stories-Applied-Software-Development/dp/0321205685&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;User Stories Applied: For Agile Software Development&lt;/a&gt; by Mike Cohn&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://xp123.com/articles/invest-in-good-stories-and-smart-tasks/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;INVEST in Good Stories, and SMART Tasks&lt;/a&gt; by Bill Wake&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These resources provide in-depth explanations and practical examples of how to apply the INVEST principle in agile development projects.&lt;/p&gt;
&lt;h2 id=&#34;breaking-down-backend-api-user-stories&#34;&gt;Breaking Down Backend API User Stories
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/small-user-stories/elena-mozhvilo-hbJtngKksDo-unsplash.webp&#34;/&gt; &lt;figcaption&gt;
                
                &lt;p&gt;
                    
                    &lt;a href=&#34;https://unsplash.com/photos/hbJtngKksDo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt; 
                        Photo by Elena Mozhvilo
                        &lt;/a&gt;&lt;/p&gt;
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;When it comes to breaking down backend API user stories, a systematic approach is key. The journey begins by starting with the API interface. By utilizing techniques such as hardcoded or facaded backing, developers can quickly provide initial functionality and facilitate rapid prototyping. This early release of the API allows for valuable feedback and experimentation from client teams.&lt;/p&gt;
&lt;p&gt;Dimension-based development is another strategy that proves valuable in tackling complexity. By focusing on dimensions such as customer type, content type, input type, and output type, developers can incrementally address specific variations within the API. This approach ensures that the development effort aligns closely with the evolving user stories.&lt;/p&gt;
&lt;p&gt;In parallel, incremental database changes can be made to accommodate the evolving API requirements. By integrating database modifications in an iterative manner, the backend infrastructure can adapt to support the changing needs of the API.&lt;/p&gt;
&lt;p&gt;It is important to note that as user stories are broken down, the corresponding test workload should also be decomposed. This ensures that the testing aligns with the decomposed user stories, enabling comprehensive test coverage and validating the functionality of individual components.&lt;/p&gt;
&lt;p&gt;To summarize this section let&amp;rsquo;s try to draw what we have been talking about so far.&lt;/p&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/small-user-stories/SlicingStoresDown.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;How to Break Down Any Story to smaller parts&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;They key thing to note is that you are in charge what the Y axis denotes - customer type, client type, etc. You can choose whatever makes sense for you. Usually you will choose the option that has the largest possible number of values because that results in the work being sliced to the smallest size.&lt;/p&gt;
&lt;p&gt;The next thing to note is that you can split the horizontal work to as many parts as you want. You can add the full business logic in one go. Or if you feel like it is too complex and will take too long, you can deliver it partially. What you cannot do is not delivery changes without the API interface changes, you have to lead with them. Otherwise there will be no point and you will be building something that will never get tested before the full work is done.&lt;/p&gt;
&lt;h2 id=&#34;test-driven-development-tdd-and-behavior-driven-development-bdd&#34;&gt;Test-Driven Development (TDD) and Behavior-Driven Development (BDD)
&lt;/h2&gt;&lt;p&gt;To further enhance the development process, Test-Driven Development (TDD) and Behavior-Driven Development (BDD) practices can be employed. TDD promotes writing tests before writing the code, ensuring that the error handling and validation logic are developed in parallel with the API implementation. BDD scenarios can be crafted to focus on business-level errors, helping to validate the API&amp;rsquo;s behavior and ensure comprehensive test coverage.&lt;/p&gt;
&lt;p&gt;Incorporating unit testing throughout the development process verifies the functionality of individual components, ensuring that they function as intended and adhere to the user story requirements.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;By harnessing the power of small stories, backend API development can become more efficient, predictable, and adaptable. Breaking down user stories into manageable units offers benefits such as enhanced clarity, better estimation accuracy, and improved focus. Strategies such as starting with the API interface, dimension-based development, incremental database changes, and aligning test workload breakdown contribute to the success of the overall development process. With the incorporation of TDD and BDD, developers can further ensure robust error handling and comprehensive test coverage.&lt;/p&gt;
&lt;p&gt;In your journey as a backend API developer, remember the value of small stories. Embrace these strategies, streamline your development process, and unleash the full potential of your backend API projects.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Nemawashi - Power of building consensus</title>
        <link>https://osada.blog/posts/nemawashi-power-of-consensus/</link>
        <pubDate>Fri, 23 Jun 2023 18:36:00 +0530</pubDate>
        
        <guid>https://osada.blog/posts/nemawashi-power-of-consensus/</guid>
        <description>&lt;img src="https://osada.blog/posts/nemawashi-power-of-consensus/nemawashi-main.webp" alt="Featured image of post Nemawashi - Power of building consensus" /&gt;&lt;h1 id=&#34;nemawashi---power-of-building-consensus&#34;&gt;Nemawashi - Power of building consensus
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In the fast-paced world of business and decision-making, ensuring that everyone is on the same page and in agreement is essential. A crucial aspect of effective decision-making is building consensus before a meeting takes place. Consensus-building allows teams to align their thoughts, opinions, and goals, leading to more productive meetings and better outcomes.&lt;/p&gt;
&lt;p&gt;In Japanese culture, there is a term that encapsulates this process beautifully - &amp;ldquo;nemawashi.&amp;rdquo; Nemawashi refers to the practice of laying the groundwork and seeking agreement among stakeholders before a meeting or decision-making process begins. It is a fundamental concept that plays a significant role in achieving harmony and collaboration within organizations.&lt;/p&gt;
&lt;p&gt;In this blog post, we will delve into the concept of nemawashi and explore its practical implications for building consensus before meetings. We will discuss the cultural significance of nemawashi in Japan and its relevance in a broader context. Furthermore, we will outline effective strategies that can help you incorporate nemawashi techniques to foster collaboration, engagement, and successful decision-making.&lt;/p&gt;
&lt;p&gt;Here we try to understand the art of building consensus and discover how nemawashi can transform your meetings into more fruitful and harmonious experiences. Let&amp;rsquo;s explore the power of nemawashi and its impact on achieving alignment within your team.&lt;/p&gt;
&lt;h2 id=&#34;understanding-nemawashi&#34;&gt;Understanding Nemawashi
&lt;/h2&gt;&lt;p&gt;Nemawashi, rooted in Japanese culture, holds valuable lessons for building consensus before meetings. By embracing this practice, teams can set the stage for productive discussions and decision-making. Let&amp;rsquo;s explore the meaning and significance of nemawashi, along with some practical examples.&lt;/p&gt;
&lt;p&gt;At its core, nemawashi involves laying the groundwork and seeking agreement among stakeholders before a meeting or decision-making process begins. This process allows individuals to voice their opinions, address concerns, and find common ground, leading to smoother decision-making and improved outcomes.&lt;/p&gt;
&lt;h3 id=&#34;example-1-toyotas-decision-making-process&#34;&gt;Example 1: Toyota&amp;rsquo;s Decision-Making Process
&lt;/h3&gt;&lt;p&gt;One of the most famous examples of nemawashi can be found in the decision-making process at Toyota, a renowned Japanese automobile manufacturer. Before any major decision is made, Toyota follows a meticulous approach that involves extensive consultation and consensus-building.&lt;/p&gt;
&lt;p&gt;Teams engage in cross-functional meetings, where representatives from various departments share their perspectives, concerns, and ideas. This process allows for a comprehensive understanding of the issue at hand and helps identify potential obstacles or risks. By incorporating nemawashi, Toyota ensures that decisions are made collaboratively, taking into account the viewpoints of all relevant stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars.webp&#34;
	width=&#34;1552&#34;
	height=&#34;1331&#34;
	srcset=&#34;https://osada.blog/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars_hu_b4ecb7127663ecfa.webp 480w, https://osada.blog/posts/nemawashi-power-of-consensus/Nemawashi-japanese-chars_hu_2c0ae54b49fcee5a.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;br&gt;
Sidebar: &lt;a class=&#34;link&#34; href=&#34;https://hbr.org/2011/01/how-toyota-makes-decisions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Read more about Toyota&amp;rsquo;s decision-making process here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;example-2-us-government-and-legislative-process&#34;&gt;Example 2: U.S. Government and Legislative Process
&lt;/h3&gt;&lt;p&gt;While nemawashi is rooted in Japanese culture, similar principles of consensus-building can be observed in the U.S. government&amp;rsquo;s legislative process. Before bills are brought to the floor for a vote, extensive negotiations, discussions, and consensus-building efforts take place.&lt;/p&gt;
&lt;p&gt;In the U.S. Congress, lawmakers engage in committee meetings, hearings, and informal conversations to gather input from various stakeholders. This process allows representatives to address concerns, incorporate amendments, and build consensus among different factions. Through these deliberations, consensus is sought to increase the chances of a bill&amp;rsquo;s successful passage.&lt;/p&gt;
&lt;p&gt;An example of how the U.S. legislative process and consensus-building are depicted is the television show &amp;ldquo;The West Wing.&amp;rdquo; The show portrays the inner workings of the White House and provides insights into the intricate process of developing and passing legislation. It showcases the efforts of policymakers to build consensus, negotiate, and seek agreement among different parties to advance their policy agendas.&lt;/p&gt;
&lt;p&gt;While &amp;ldquo;The West Wing&amp;rdquo; is a fictional representation, it offers viewers a glimpse into the complexities and nuances of consensus-building in the U.S. political landscape.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/nemawashi-power-of-consensus/the-west-wing-discussion.webp&#34;
	width=&#34;2000&#34;
	height=&#34;1333&#34;
	srcset=&#34;https://osada.blog/posts/nemawashi-power-of-consensus/the-west-wing-discussion_hu_88b234675f94369d.webp 480w, https://osada.blog/posts/nemawashi-power-of-consensus/the-west-wing-discussion_hu_b5c97dca5b65ed9f.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;br&gt;
Sidebar : &lt;a class=&#34;link&#34; href=&#34;https://www.npr.org/2019/12/20/790948548/the-west-wing-podcast-a-reminder-of-when-consensus-seemed-possible&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore more about &amp;ldquo;The West Wing&amp;rdquo; and its depiction of the U.S. legislative process here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By highlighting this example, we can observe that nemawashi-inspired practices and consensus-building efforts exist beyond cultural boundaries. Consensus-building is a universal concept that plays a crucial role in effective decision-making across diverse settings.&lt;/p&gt;
&lt;h2 id=&#34;strategies-for-building-consensus&#34;&gt;Strategies for Building Consensus
&lt;/h2&gt;&lt;p&gt;Building consensus before a meeting requires careful planning, effective communication, and fostering a collaborative environment. By employing the following strategies, you can create a foundation for productive discussions and decision-making:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Preparing for the Meeting - Thorough preparation is essential for successful consensus-building. Consider the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gather Information: Seek input from stakeholders and team members before the meeting. Collect diverse perspectives and insights to gain a comprehensive understanding of the topic at hand.&lt;/li&gt;
&lt;li&gt;Address Concerns: Take the time to identify and address any potential concerns or objections that participants may have. Addressing these early on can help mitigate resistance and pave the way for consensus.&lt;/li&gt;
&lt;li&gt;One-on-One Meetings: Engage in individual discussions with key stakeholders to understand their viewpoints and gather feedback. This personal touch allows for open and honest conversations, fostering a sense of inclusion and trust.&lt;/li&gt;
&lt;li&gt;Invite Contributions: Show respect for stakeholders by genuinely considering their perspectives and inviting their contributions. Recognize that they may bring valuable insights and solutions to the table. This approach promotes collaboration and a sense of ownership among participants.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Effective Communication Techniques - Clear and open communication is vital for building consensus. Consider these techniques:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Active Listening: Practice attentive and empathetic listening. Encourage participants to express their thoughts, concerns, and ideas, and ensure that everyone feels heard and respected.&lt;/li&gt;
&lt;li&gt;Facilitate Constructive Discussions: Create an inclusive environment where diverse perspectives are encouraged. Set ground rules for respectful dialogue and constructive debate. Guide the conversation towards finding common ground and shared goals.&lt;/li&gt;
&lt;li&gt;Visual Aids and Examples: Utilize visual aids, data, and real-life examples to illustrate your points and foster a shared understanding. Visual representations can bridge gaps in perception and facilitate consensus-building.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building Trust and Collaboration - Trust and collaboration are key elements of consensus-building. Consider the following approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encourage Collaboration: Foster a culture of collaboration by promoting teamwork and emphasizing collective goals. Encourage participants to work together, share ideas, and find mutually beneficial solutions.&lt;/li&gt;
&lt;li&gt;Transparency and Accountability: Promote transparency in decision-making processes. Clearly communicate the rationale behind decisions and ensure accountability for actions. This builds trust and confidence among team members.&lt;/li&gt;
&lt;li&gt;Inclusive Decision-Making: Involve all relevant stakeholders in the decision-making process. Seek diverse perspectives and involve those who may be affected by the outcome. This inclusive approach increases ownership and commitment to the decisions made.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By incorporating these strategies into your consensus-building efforts, you can lay a solid foundation for successful meetings. Remember to appear open to problem discussions rather than solely focusing on solutions and demonstrate respect for stakeholders by inviting their contributions. Consensus-building requires active engagement and continuous effort to create an environment where diverse voices are valued.&lt;/p&gt;
&lt;p&gt;Next up we should discuss the effective ways of communication in order to execute above strategies. And discuss why trust is pramount to executing these strategies. Expect that in the next installment of this blog post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting lost in weeds of Podman</title>
        <link>https://osada.blog/posts/getting-lost-in-weeds-of-podman/</link>
        <pubDate>Mon, 07 Nov 2022 15:31:29 +0530</pubDate>
        
        <guid>https://osada.blog/posts/getting-lost-in-weeds-of-podman/</guid>
        <description>&lt;img src="https://osada.blog/img/podman-logo-full-vert.png" alt="Featured image of post Getting lost in weeds of Podman" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#what-are-rootless-containers&#34;&gt;What are rootless containers&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#my-use-case-for-rootless-containers&#34;&gt;My use case for rootless containers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#but-i-dont-have-docker&#34;&gt;But I don&amp;rsquo;t have docker&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#adding-finishing-touches&#34;&gt;Adding finishing touches&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-preamble-becomes-the-main-act&#34;&gt;The preamble becomes the main act&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Podman is a tool developed by Redhat that is intended to replace docker at the command line level. It has full compatibility with docker CLI. At least this is true on Linux. Like docker it is written in golang and is quite performant. But unlike docker it does not have a lot of legacy warts, compatibility issues and quirks. It also has better integration with other tools in anything-but-docker space including buildah and skopeo&lt;/p&gt;
&lt;h2 id=&#34;what-are-rootless-containers&#34;&gt;What are rootless containers
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/rootless-containers.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;How Rootless Containers Work&#34;
	
	
&gt;&lt;br&gt;
&lt;br&gt;
A big selling point of using podman is that you will be able to run rootless containers. This means that the full virtualized container runs as the non-root user that you are logged in as usually. This is important in various aspects. One is that on shared servers where you just don&amp;rsquo;t get to have root, you can still get containers running. Also even on a machine where it is possible to become root for running docker containers, it is good in security point of view to be running as a non-privileged user.&lt;/p&gt;
&lt;p&gt;At a more technical level the issue is bugs that enable malicious code to breakout of the virtualization env on to the host. And if it is able to exploit such a bug the attacker suddenly has root access to the host system. Now there are ways to mitigate those risks such as&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Specifying the USER for each of the Docker CMDs&lt;/li&gt;
&lt;li&gt;Specifying the USER for the docker RUN command on the command line&lt;/li&gt;
&lt;li&gt;Using a supervisor framework such as &lt;a class=&#34;link&#34; href=&#34;https://github.com/just-containers/s6-overlay&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;s6&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://gdevillele.github.io/engine/admin/using_supervisord/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;supervisord&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But again, these are mitigating measures and not a solution to the underlying issue of running containers as the root user. rootless containers address the root cause by allowing you to run containers as a non privileged user. This means that even if there were to be a breakout, the attacker still would need a privilege escalation bug on the host env to be effective at attacking the host system&lt;/p&gt;
&lt;h3 id=&#34;my-use-case-for-rootless-containers&#34;&gt;My use case for rootless containers
&lt;/h3&gt;&lt;p&gt;&lt;br&gt;
A friend had asked me for advice on best practices in FTPing files around. Now the best advice that I can give is not to FTP files around in 2022 anymore and there are much better data transfer mechanisms out there. But if you had to do it, there are ways to take most of the pain out of it such as using checksums and delta encoding and so on. While I was thinking of writing a blog post on those practices, I needed to write some test code. To test out this code, I needed a FTP server. Now I would rather not put any server on my primary workstation that need not be there and this meant I had to do this inside a docker container.&lt;/p&gt;
&lt;h3 id=&#34;but-i-dont-have-docker&#34;&gt;But I don&amp;rsquo;t have docker
&lt;/h3&gt;&lt;p&gt;I had tried to switch to podman sometime back but it was mostly limited to pulling images directly off docker/quay and using them. I had not gotten around to building images with podman or buildah much. But this time I had lucked out and the most commonly used FTP image seemed to lack support for running as a rootless container binding to ports higher than 1024 for the listening port. If you did not know about this - unprivileged users on linux cannot bind to ports lower than 1024 usually as explained &lt;a class=&#34;link&#34; href=&#34;https://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. There are ways around this for example by using &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Authbind&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;authbind&lt;/a&gt; to achieve this via a setuid helper executable or using POSIX &lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;capabilities system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But each of those workarounds come with their own pitfalls, vulnarabilities and risks. Therefore the better way would be to use a non-root user and use a non-standard port. But docker does not usually run in non-root mode. So I switched to podman and I cloned the repo that I had chosen - &lt;a class=&#34;link&#34; href=&#34;https://github.com/fauria/docker-vsftpd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docker-vsftpd&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/podman-vsftpd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and started from there. It was a simple change to add the new port. And add the change to the README. The full pull request is &lt;a class=&#34;link&#34; href=&#34;https://github.com/fauria/docker-vsftpd/pull/76&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-finishing-touches&#34;&gt;Adding finishing touches
&lt;/h3&gt;&lt;p&gt;I am a bit of a perfectionist and once I had started work on this repo I had to add a couple of finishing touches. The first was an automated build process. I had used github workflows and actions to achieve this. Here is the code for that&lt;/p&gt;






&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build and Push Image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;push,workflow_dispatch ]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build and push image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MainCI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-20.04&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Shellcheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Shellcheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ludeeus/action-shellcheck@master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;build-image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;redhat-actions/buildah-build@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vsftpd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest ${{ github.sha }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerfiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          ./Dockerfile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Podman Login action (https://github.com/redhat-actions/podman-login) also be used to log in,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# in which case &amp;#39;username&amp;#39; and &amp;#39;password&amp;#39; can be omitted.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Push To docker.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;push-to-docker&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;redhat-actions/push-to-registry@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ steps.build-image.outputs.image }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ steps.build-image.outputs.tags }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;docker.io/osadal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;osadal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.REGISTRY_PASSWORD }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Print image url&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo &amp;#34;Image pushed to ${{ steps.push-to-docker.outputs.registry-paths }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Things to note here are the build image action. Note that we are using buildah action to build the image and not docker. This means we keep the pipeline clear of docker even though we will still use docker.io to distribute the image.&lt;/p&gt;
&lt;p&gt;Then note the secret mechanism. Github workflows manage secrets injection through envrionment variables as most other CI/CD pipelines do. The actual secret is input at the github settings level. Then it gets injected in to the CI/CD envrionment and is available for use by any action given access to it through the YAML code.&lt;/p&gt;
&lt;p&gt;The next to do thing in my list is adding shellcheck support to the CI/CD pipeline. That will be left for another day. But for now I have cleared the shellcheck comments manually. The pull request is &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/podman-vsftpd/pull/1/files#diff-fc8d3c534affdef352ee2e218f1bf36e45b9991b2b0e0b9f4b844eea147643c5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. This mostly involves&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Breaking down assignment and export in to two lines. This is a good idea because otherwise they do not individually fail. So you can get a case where the generation of the variable fails but you still won&amp;rsquo;t know because the export worked and the return code was zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert backtick escaped sheel command output capturing to &amp;ldquo;$()&amp;rdquo; syntax. This is much better and less error prone. This deserves it&amp;rsquo;s own blog post so I will only point to &lt;a class=&#34;link&#34; href=&#34;https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_03&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;POSIX spec&lt;/a&gt; for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quotin variable usage. You never know when spaces in values will trip you up otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-preamble-becomes-the-main-act&#34;&gt;The preamble becomes the main act
&lt;/h3&gt;&lt;p&gt;So there you have it. We set out to write about good FTP system practices instead wrote a blog post about how to use podman and shellcheck. The next one I promise will be on topic!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Avoiding burnout in software domain</title>
        <link>https://osada.blog/posts/avoiding-burnout-in-software-domain/</link>
        <pubDate>Mon, 09 May 2022 00:35:34 +0530</pubDate>
        
        <guid>https://osada.blog/posts/avoiding-burnout-in-software-domain/</guid>
        <description>&lt;img src="https://osada.blog/posts/avoiding-burnout-in-software-domain/young-woman-eyes-closed-hand-on-forehead-768.webp" alt="Featured image of post Avoiding burnout in software domain" /&gt;&lt;blockquote&gt;
&lt;p&gt;How to avoid the dangers of the trade&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#what-is-burnout&#34;&gt;What is burnout?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-does-it-happen&#34;&gt;Why does it happen?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#it-wont-happen-to-me&#34;&gt;It won&amp;rsquo;t happen to me&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-avoid-it&#34;&gt;How to avoid it&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#prioritize-self-care&#34;&gt;Prioritize self-care&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#shift-your-perspective&#34;&gt;Shift your perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#reduce-exposure-to-job-stressors&#34;&gt;Reduce exposure to job stressors&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#seek-out-connections&#34;&gt;Seek out connections&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#mental-health-and-software-industry&#34;&gt;Mental health and software industry&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;what-is-burnout&#34;&gt;What is burnout?
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/avoiding-burnout-in-software-domain/burnout-head-down.webp&#34; alt=&#34;Burnout Profile&#34; width=&#34;60%&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;You know the drill. It starts with a couple spillovers from your usual sprints. It snowballs in to a stream of issues and before you know it, you are at risk of missing a major deadline. You walk in to release planning meetings and your stomach falls out from underneath you. Your head feels tight and there is a ringing in your ears. Sleep doesn&amp;rsquo;t come easy and when it does, it feels like cheating. After all you could be making progress on that one critical issue that you know will hold up the next sprint and will end up wasting the whole team&amp;rsquo;s time.&lt;/p&gt;
&lt;p&gt;If any of the above sounds familiar then you have walked close to the burnout zone and you may even have fallen in. To be very clear we are not talking about crunch time - that time in every projects end time frame when everyone customaraly runs around like headless chickens trying to figure out where they are supposed to be. That is a cyclical thing and more importantly they finish off once you ship. Little bit of breathing space and you are off to the races again.&lt;/p&gt;
&lt;p&gt;Burnout happens when there is no breathing space and no release valve. Work just builds up and up in to a crescendo that never lets off. Interestingly it is no longer classified as a medical condition and is classified as an occupational phenomenon &lt;a class=&#34;link&#34; href=&#34;https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;according to WHO&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-does-it-happen&#34;&gt;Why does it happen?
&lt;/h2&gt;&lt;p&gt;It happens due to a variety of reasons. Mayo Clinic &lt;a class=&#34;link&#34; href=&#34;https://www.mayoclinic.org/healthy-lifestyle/adult-health/in-depth/burnout/art-20046642&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lists several&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lack of control.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An inability to influence decisions that affect your job — such as your schedule, assignments or workload — could lead to job burnout. So could a lack of the resources you need to do your work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unclear job expectations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re unclear about the degree of authority you have or what your supervisor or others expect from you, you&amp;rsquo;re not likely to feel comfortable at work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dysfunctional workplace dynamics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Perhaps you work with an office bully, or you feel undermined by colleagues or your boss micromanages your work. This can contribute to job stress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extremes of activity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a job is monotonous or chaotic, you need constant energy to remain focused — which can lead to fatigue and job burnout.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lack of social support.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you feel isolated at work and in your personal life, you might feel more stressed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Work-life imbalance.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your work takes up so much of your time and effort that you don&amp;rsquo;t have the energy to spend time with your family and friends, you might burn out quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fairness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think about whether you believe that you receive fair and equitable treatment. If you feel like you do not get treated as the others it will lead to more stress.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these all come down to issues in the workplace. This is why it makes sense to classify it as such. There is nothing wrong with you and everything wrong with the workplace. Understand that you can&amp;rsquo;t change unilaterally. You need the support of your organization to resolve this and they need to be onboard with whatever plan you make.&lt;/p&gt;
&lt;h2 id=&#34;it-wont-happen-to-me&#34;&gt;It won&amp;rsquo;t happen to me
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/avoiding-burnout-in-software-domain/Top-7-Tips-to-Prevent-Burnout-as-a-Remote-Software-Developer--1024x683.webp&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;Most of us like to think that it won&amp;rsquo;t happen to us. We like to believe we are singular, unbreakable and quite resilient. Specially when we are young, we tend to think that we can just keep going on and on and it will be ok. But know that none of us are infallible. We will all break down sometime and it is quite ok. It is ok to seek help and it is ok to accept help.&lt;/p&gt;
&lt;p&gt;Whether you recognize the warning signs of impending burnout or you’re already past the breaking point, trying to push through the exhaustion and continuing as you have been will only cause further emotional and physical damage. Now is the time to pause and change direction by learning how you can help yourself overcome burnout and feel healthy and positive again.&lt;/p&gt;
&lt;p&gt;Dealing with burnout requires the “Three R” approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recognize. Watch for the warning signs of burnout.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reverse. Undo the damage by seeking support and managing stress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience. Build your resilience to stress by taking care of your physical and emotional health.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-avoid-it&#34;&gt;How to avoid it
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/avoiding-burnout-in-software-domain/tips-to-avoid-burnout.webp&#34;/&gt; &lt;/figure&gt;

&lt;p&gt;There are several guides online on how to avoid burnout, including the graphic above. But I chose to follow a set of points set forth by a Harvard Business Review article as follows.&lt;/p&gt;
&lt;h3 id=&#34;prioritize-self-care&#34;&gt;Prioritize self-care
&lt;/h3&gt;&lt;p&gt;It’s essential to replenish your physical and emotional energy, along with your capacity to focus. Get your body moving and mostly your mind will follow too. There are many activities that will allow you to shift your focus away from work, meditating, mindfulness and yoga comes to mind mostly. Even a simple walk outside, feeling the soft sunshine of an evening makes a world of difference when you are stuck in a rut trying to make sense of what is happening to you.&lt;/p&gt;
&lt;h3 id=&#34;shift-your-perspective&#34;&gt;Shift your perspective
&lt;/h3&gt;&lt;p&gt;Tinted glasses tend to colour your perspective. Sometimes you have to take a step back evaluate the situation. Remind yourself what is important to you and why those things are important to you. When you start out in a job, you have very idallyic expectations of the working environment. Everyone is nice to you and cuts you some slack because you are the newbie. But as time goes by the deadlines loom, things need to be delivered and the once friendly faces now bring panic. Remember in those cases why you are in the job or the industry to begin with. Most of us programmers are extremely competitive and will never settle for the second best. We will do everything in our ability to exceed expectations. And it is these expectations that will end up being the death of us if we are not careful.&lt;/p&gt;
&lt;p&gt;It is ok to remind yourself that beating expectations is not all there is to life. You need to understand where you originally derived pleasure from in this industry. Almost all of us are hackers in our heart of hearts, we are tinkerers. Remember that, remember that the rat race is just an industry trying to impose restrictions on our innovative minds so we can be aligned to some business interests. This is find in normal course of business, after all we should be providing some economic value or else there would be no point to what we do. But once in a while remember that there are other goals in life and it is perfectly ok to go after them.&lt;/p&gt;
&lt;h3 id=&#34;reduce-exposure-to-job-stressors&#34;&gt;Reduce exposure to job stressors
&lt;/h3&gt;&lt;p&gt;You’ll also need to target high-value activities and relationships that still trigger unhealthy stress. This involves resetting the expectations of colleagues, clients, and even family members for what and how much you’re willing to take on, as well as ground rules for working together. You may get pushback. But doubters must know that you’re making these changes to improve your long-term productivity and protect your health.&lt;/p&gt;
&lt;p&gt;Know that it is ok to say no and you always have more control over your environment than you think you do. You can negotiate what projects you work on and who you work with. You can control how that work happens. Always remember to actively negotiate these aspects and not just smile and bear things as they get dished out to you.&lt;/p&gt;
&lt;h3 id=&#34;seek-out-connections&#34;&gt;Seek out connections
&lt;/h3&gt;&lt;p&gt;The best antidote to burnout, particularly when it’s driven by cynicism and inefficacy, is seeking out rich interpersonal interactions and continual personal and professional development. Find coaches and mentors who can help you identify and activate positive relationships and learning opportunities. Volunteering to advise others is another particularly effective way of breaking out of a negative cycle.&lt;/p&gt;
&lt;p&gt;Given the influence of situational factors on burnout, it’s likely that others in your organization are suffering too. If you band together to offer mutual support, identify problems, and brainstorm and advocate for solutions, you will all increase your sense of control and connection.&lt;/p&gt;
&lt;h2 id=&#34;mental-health-and-software-industry&#34;&gt;Mental health and software industry
&lt;/h2&gt;&lt;p&gt;Our industry does not exactly have a great track record in &lt;a class=&#34;link&#34; href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4439723/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;fighting mental health issues in it&amp;rsquo;s workers&lt;/a&gt;. We tend to view our workers as &lt;em&gt;Rock Stars&lt;/em&gt; and &lt;em&gt;Gurus&lt;/em&gt;. They are beyond mere human and some sort of special species that do not have normal emotional and physical connections. This self image story that we tell ourselves keeps exacerbating the mental health issues in general and burnout in particular.&lt;/p&gt;
&lt;p&gt;We need to accept the fact that software developers are all too human and they have emotional needs as well. There is life outside work and prioritizing that, achieving a good work life balance is critical for a good work output. The sooner we recognize that a developer&amp;rsquo;s life outside the job impacts the job a lot more than we give credit for, the sooner we will get to a place where a holistic approach to work life balance is possible.&lt;/p&gt;
&lt;p&gt;And remember, we are a tribe, a family. We need to look after each other. Learn to recognize the oncoming signs of burnout in your friends and colleagues. There are numerous guides out there on what signs of burnout are like &lt;a class=&#34;link&#34; href=&#34;https://www.healthline.com/health/tips-for-identifying-and-preventing-burnout&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this one&lt;/a&gt; Then learn to help them get through and if possible avoid the burnout. Again there are various resources like &lt;a class=&#34;link&#34; href=&#34;https://www.bustle.com/p/how-to-help-a-friend-address-their-burnout-in-a-supportive-way-17897842&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this one&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Agile : The Snake Oil for Cobra Bites</title>
        <link>https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/</link>
        <pubDate>Sun, 06 Feb 2022 21:57:42 +0530</pubDate>
        
        <guid>https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/</guid>
        <description>&lt;img src="https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/agile-poster.webp" alt="Featured image of post Agile : The Snake Oil for Cobra Bites" /&gt;&lt;blockquote&gt;
&lt;p&gt;How the rebellion got subverted&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#the-agile-manifesto---the-rebellion-that-was-not&#34;&gt;The agile manifesto - The Rebellion that was not&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-call-is-coming-from-inside-the-house&#34;&gt;The call is coming from inside the house&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#return-to-roots&#34;&gt;Return to roots&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-is-it-so-easy-to-fail&#34;&gt;Why is it so easy to fail?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-undo-this&#34;&gt;How to undo this?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#understanding-the-what-why-and-how&#34;&gt;Understanding the what, why and how&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cutting-out-the-fluff&#34;&gt;Cutting out the fluff&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#understand-but-do-not-measure&#34;&gt;Understand but do not measure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#use-the-tools-provided-in-whatever-flavour-of-agile-you-chose&#34;&gt;Use the tools provided in whatever flavour of Agile you chose&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#to-be-continued&#34;&gt;To be continued&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;the-agile-manifesto---the-rebellion-that-was-not&#34;&gt;The agile manifesto - The Rebellion that was not
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile.webp&#34;
	width=&#34;610&#34;
	height=&#34;500&#34;
	srcset=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile_hu_3bae885212f2619d.webp 480w, https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/100-percent-agile_hu_3489e5c74c4ccd52.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The first time I heard the word agile manifesto was back in 2009. I had just graduated with a degree in Electronic and Telecommunication the previous year. As a wet behind the years novice in the industry I had decided that the best possible career move for me would be to act as a sponge and learn as much as possible from every one I had met online and offline both. This was when Git and Hg was just starting to make inroads in to general developers mind space. It was an exciting time - Android has just been released and our minds were buzzing with the possibilities of smartphones.&lt;/p&gt;
&lt;p&gt;Those days, the startup I had been working on was a scrappy outfit trying to stay afloat doing whatever was possible and not take any VC money. Our founder had some&lt;br&gt;
runway left but we had to be nimble on our feet and attack every opportunity with zeal if we were going to make it. And one of the things I had been concerned with was how to respond to the changes in priority that arise due to the fast changing nature of the projects and the goals of the company. We had been working steadily towards a product of our own so we could actually have a reliable product to bank on. But it was still in MVP stage and we had whole host of other projects going on so we could pay the bills.&lt;/p&gt;
&lt;p&gt;Now the interesting thing was these were mostly very short term engagements. There were not multi year projects with team upon teams of developers involved in it. There were no business analysts writing user stories. No QA teams doing user acceptance testing and so on. It was just a few developers mostly working with one or two QA folks who kept these projects afloat. But we didn&amp;rsquo;t have a single methodology for how these projects should be run resulting in a lot of confusion for all the parties involved.&lt;/p&gt;
&lt;p&gt;I had heard about the agile movement and I vaguely remember seeing an article by Martin Fowler on the topic. This immediately piqued my interest since it seemed to be light on rules and bureaucracy and seemed to get to the point very quickly. This was not scrum or Scaled Agile Framework or any of the &amp;ldquo;enterprise&amp;rdquo; versions of agile. It was just a simple way of doing things that brought a little bit of order to the madness and let the team be predictable and present a more sane interface to management. This was very radical in that era since we had just started to implement &lt;a class=&#34;link&#34; href=&#34;https://prince2.wiki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PRINCE2&lt;/a&gt; which was as heavy as they came.&lt;/p&gt;
&lt;h2 id=&#34;the-call-is-coming-from-inside-the-house&#34;&gt;The call is coming from inside the house
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile.webp&#34;
	width=&#34;1000&#34;
	height=&#34;645&#34;
	srcset=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile_hu_80b3fb48583ec458.webp 480w, https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/welcome-to-agile_hu_574d521c89bdadde.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I encounter agile again somewhere around 2013 when I switch teams within my Org to a mobile application focused team. In addition to using the latest and greatest in technologies in development, this team also was leading the pack in development processes. It was trying to be a thought leader in all these practices that were in with the crowd in those days. The implementation there was quite a stock one. Each team had a scope clearly defined they were responsible for. And the team sizes were just within the limits of what is possible for a normal scrum framework without resorting to SAFe and what not.&lt;/p&gt;
&lt;p&gt;The only problem was that there was no real enforcement of continuous improvement. Daily standups of some teams would drag on for 45 minutes and most grooming and planning sessions (which were combined) would consist of - &amp;ldquo;well you obviously know how to get this done right? Just get the changes to services X, Y and Z done by friday&amp;rdquo;. The defining feature of this team was how much deep domain and technical knowledge was still intact. Most of the people there had been there for several years and had written 95% of the stuff that was in production at the time. And the 5% that wasn&amp;rsquo;t written by then had been modified by them to suit the rest of the system. So there was no real planning or grooming needed. Everyone knew who would work on a given piece of work and that person could tell you exactly how long that change would take. So it worked very very well until it didn&amp;rsquo;t - When us noobs got there. Suddenly there was an influx of people who didn&amp;rsquo;t know the system as well as incumbents and we started having all sorts of issues.&lt;/p&gt;
&lt;p&gt;When I left that team and headed to my next team, I encountered the best version of agile that I have seen to date. The key was that, the new team was never afraid to change all the rules so that they could make things more efficient. Planning pokers were tried for a few months and found to be ineffective so we got rid of them. Retro&amp;rsquo;s were too long so we shortened them. The standups were too virtual when done over video every day so we had one always-physical day of standup. And when everything was said and done, we had a very well tuned process and we loved it.&lt;/p&gt;
&lt;h2 id=&#34;return-to-roots&#34;&gt;Return to roots
&lt;/h2&gt;&lt;p&gt;I had returned from UK back to Sri Lanka and started working for a company based here, when I ran in to the full fledged Scaled Agile Frameowrk for Enterprises. Quite a mouthful right? And in short that will be SAFE. This is an enterprisy version of Agile practices. Now people like to make a distinction between the small &amp;ldquo;a&amp;rdquo; agile and big &amp;ldquo;A&amp;rdquo; Agile. This is most definitely of the latter kind. The team formation calls for various very distinctive and numerous roles and as with any enterprisy product, it comes with a lot of unwanted features, baggage and caveats.&lt;/p&gt;
&lt;p&gt;The biggest issue that I had with it, is the amount of pompous ceremonies around it. There will be no way for the designated scrum master to allocate more than 50% of the time to actual business process work by working normally. So inevitably they will turn to working extra hours to catch up. The even worse part was that it was usually the most senior person in the team who will be the scrum master. So not only is the team loosing a really good engineering resource, now he will end up with a burnout after six months.&lt;/p&gt;
&lt;p&gt;SAFE also tries to enforce communication lines, streamline them. What it actually end up doing is forcing tribal thinking and create self sabotaging teams. In the end you realize that it is just the traditional way of thinking ( Project -&amp;gt; Program -&amp;gt; Portfolio ) re-skinned with a slight agile twist. There is no real effort being made to follow the original agile manifesto in any way, shape or form. So you essentially end up building software the same exact way you did before just with less time and more admin overhead.&lt;/p&gt;
&lt;h2 id=&#34;why-is-it-so-easy-to-fail&#34;&gt;Why is it so easy to fail?
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum.webp&#34;
	width=&#34;500&#34;
	height=&#34;867&#34;
	srcset=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum_hu_ec8e13a8e63a5176.webp 480w, https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/kanban-vs-scrum_hu_2dbca90c4dac935e.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;138px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And my story of agile implementations is no unique in any way. All over the software development firms, the ground truth is that almost all agile implementations have become liabilities that have slowed down deliveries, hampered team plans and frustrated good developers who are being held back by red tape they view and wholly useless. So why don&amp;rsquo;t companies just &amp;ldquo;do the right thing®&amp;rdquo; and let the teams be fully agile? Why is it all too easy to fail.&lt;/p&gt;
&lt;p&gt;I posit that the reason is the same reason most change management processes fail is the same reason that implementations of agile fail - humans resist change. More the change seems alien to us, the more we resist them. And agile practices, true agile practices are as alien as it gets compared to traditional waterfall practices. And I understand the temptation to seek assurance of waterfall method. waterfall eases the minds of management and it allows business analysts and PMs involved to take as much uncertainty out of the equation as possible. So what ends up happening is that on the very projects that it is supposed to help, the uncertain and hard to plan projects.&lt;/p&gt;
&lt;h2 id=&#34;how-to-undo-this&#34;&gt;How to undo this?
&lt;/h2&gt;&lt;p&gt;I think the key is to build rapport and support before it ever comes to decision time. There is a reason Ali was winning fights before ever setting foot in the ring. The reason that most agile implementations are not trusted is that they seem to add little value while adding a whole lot of work to the development teams and in general to everyone involved. The key to reversing this is to make sure that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Everyone involved understands why are doing the things that we are doing. Why does agile matter, what is it going to get us? And how will we know when agile is implemented right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fluff built around the agile methodologies are scrapped off during implementation. Strip every single methodology down to the bare bones. And then add in the bits you need as you go along&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand what you are trying to measure. And do not, in the name of everything you love - ever measure that thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;understanding-the-what-why-and-how&#34;&gt;Understanding the what, why and how
&lt;/h2&gt;&lt;p&gt;We should try to get all stakeholders to understand why want a particular agile methodology implemented - maybe it is scrum or maybe it is Kanban. Whatever it is, everyone involved should know why they are doing it and not something else. The new guys who joined yesterday should be able to tell you why you are doing Kanban and not scrum or waterfall. And you should not require a fifty page brief in order to understand it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/postit-note.webp&#34;
	width=&#34;265&#34;
	height=&#34;131&#34;
	srcset=&#34;https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/postit-note_hu_de1b85375e1f38b3.webp 480w, https://osada.blog/posts/agile-the-snake-oil-for-cobra-bites/postit-note_hu_ebd869f08c447fdd.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;485px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Always make sure you lead with this one. Be sure to compare and contrast with business as usual situation and other competing methodologies. That way everyone will have enough context to know why you are implementing things the way you are.And in the end give them a sense of where you want to end up. And explain that you are not quite there yet. Explain that this is a journey and not a one day task. Your teams wont be fully agile overnight. There will still be hiccups along the way and you will adjust a lot of things, but let them know why it is important and how they can know when they are there. Things will be running smoothly, there will be less admin overhead, the team will settle in to a nice delivery rhythm. Give them enough of an understanding on how to tell when they are doing it right&lt;/p&gt;
&lt;h2 id=&#34;cutting-out-the-fluff&#34;&gt;Cutting out the fluff
&lt;/h2&gt;&lt;p&gt;No methodology is perfect. Fredrick brooks was right all those years ago. There is no silver bullet.You have to implement things yourself, evaluate and tweak things yourself.Whatever the methodology you chose - make sure to start from only the most essential parts of the methodology. Anything that is strictly mandatory, cut out.And then run a couple of weeks on that platform and see how you like it, talk to the team, review with stakeholders and add or change things accordingly. Remember that communication does not automatically increase just because you add more meetings. In the same manner remember that lack of meetings does not mean that team is not synced up. Every team develops it&amp;rsquo;s own communication mechanism, try to guide them towards wel established escalation patterns but wait to see how the team responds first before pushing things through&lt;/p&gt;
&lt;h2 id=&#34;understand-but-do-not-measure&#34;&gt;Understand but do not measure
&lt;/h2&gt;&lt;p&gt;Well even if you measure, please stop using that as a KPI.First understand how agile will improve your existing delivery platform - will it reduce cycle time? Will it lead to less bug leakage? Will it lead to better automation? Seek to understand exactly what agile will give your teams. And then try and see if it is actually being improved upon as you envisioned. But do not, ever, set those numbers as a KPI or an objective. Once you do they cease to be good measures and people will just start gaming the numbers. What was once a good measure that just reflected how your team behaves now becomes a statistic made up by a bunch of engineers who are well versed in numbers and how to make them up.&lt;/p&gt;
&lt;h2 id=&#34;use-the-tools-provided-in-whatever-flavour-of-agile-you-chose&#34;&gt;Use the tools provided in whatever flavour of Agile you chose
&lt;/h2&gt;&lt;p&gt;Each practice of Agile comes with it&amp;rsquo;s own set of processes or lack thereof regarding how to change the processes and procedures. And if by any chance your chosen flavour of agile insists on a one size fits all model with no space for nuance, then please dump that as soon as possible because nothing in this world every got achieved by treating things as black and white. And in software, we all live in the grey.&lt;/p&gt;
&lt;p&gt;Use retrospectives, scrum of scrums, code reviews and whatever else you can in order to refine the agile processes you have. Get regular feedback from the teams. You don&amp;rsquo;t even have to stick to the feedback gathering methods dictated in your chosen flavour. If you see anything out of place, investigate, determine if you need to handle or fix it and then act accordingly. No process should be set in stone and there is always a chance to improve things.&lt;/p&gt;
&lt;p&gt;The goal shouldn&amp;rsquo;t be to find fault with the existing processes however. Whenever you treat retro&amp;rsquo;s or other tooling as a way to find existing &lt;em&gt;issues&lt;/em&gt;, people will get overly defensive and try to obfuscate and hide as many things as possible, and that is a sure fire way to sabotaging your own performance.&lt;/p&gt;
&lt;p&gt;The goal is always to make sure we can improve things from where we are so phrase the questions around that mind set. Instead of saying &amp;ldquo;Team morale was bad due to too many dependencies being unfulfilled, what can we do better?&amp;rdquo;, ask &amp;ldquo;How do we get ahead of as many dependencies as we can and highlight the ones we do not get to?&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;to-be-continued&#34;&gt;To be continued
&lt;/h2&gt;&lt;p&gt;This is a very interesting topic that is very close to my heart so there is a ton more I have to say on this topic. Expect to see a few more followup posts on this particular topic in the next few weeks.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hyperscan C&#43;&#43; Wrapper</title>
        <link>https://osada.blog/posts/hyperscan-cpp-wrapper/</link>
        <pubDate>Sun, 19 Dec 2021 22:16:45 +0530</pubDate>
        
        <guid>https://osada.blog/posts/hyperscan-cpp-wrapper/</guid>
        <description>&lt;img src="https://osada.blog/posts/hyperscan-cpp-wrapper/Hyperspace_falcon.webp" alt="Featured image of post Hyperscan C&#43;&#43; Wrapper" /&gt;&lt;blockquote&gt;
&lt;p&gt;(or why using the phrase &amp;ldquo;C/C++&amp;rdquo; is crime against programming)&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#being-a-c-library-in-a-c-world&#34;&gt;Being a C library in a C++ World&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-c-is-still-being-used&#34;&gt;Why C is still being used&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#c-is-nice-but-c-is-nicer&#34;&gt;C is nice but C++ is nicer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementing-a-c-wrapper-for-hyperscan&#34;&gt;Implementing a C++ Wrapper for Hyperscan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#takeaways&#34;&gt;Takeaways&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;being-a-c-library-in-a-c-world&#34;&gt;Being a C library in a C++ World
&lt;/h2&gt;&lt;p&gt;This weekend I was looking at a regex library written by intel called &lt;a class=&#34;link&#34; href=&#34;https://github.com/intel/hyperscan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hyperscan&lt;/a&gt;. I had needed to use a regex library that was performant  and easy to use. I needed the library to use all the new hardware features such as new instructions such as AVX2 and AVX512. This library was the best one I came across.&lt;/p&gt;
&lt;p&gt;It has support for block mode for bounded data and also supports streaming mode for unbounded or streaming data. It uses graph decomposition and hybrid automata based approach to match the data and uses the &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Ragel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ragel library&lt;/a&gt; for parsing the regex. It also uses SIMD instructions and has a lot of optimizations as is to be expected from a CPU vendors library.&lt;/p&gt;
&lt;h2 id=&#34;why-c-is-still-being-used&#34;&gt;Why C is still being used
&lt;/h2&gt;&lt;p&gt;Now, given all that had transpired during the last decade from Heartbleed to POODLE, you might be forgiven for asking why anyone in their right frame of mind, would implement a regex library in C. But the fact of the matter is for performant idiomatic code that is portable, nothing comes as close as C. Rust is a promising language and I wish that all the very best and a bright future. But it still has a long ways to go to grab the same mind share as C. The biggest thing is that C is such a simple language.&lt;/p&gt;
&lt;p&gt;It is based on a very simple mental modal and once you have mastered it, it pays dividends over and above. It has barely changed over the time I first learned it around 14 years ago. And this durability is a huge plus in the practical world. This means that for projects that will stay relatively stable, C is a great choice.&lt;/p&gt;
&lt;h2 id=&#34;c-is-nice-but-c-is-nicer&#34;&gt;C is nice but C++ is nicer
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/hyperscan-cpp-wrapper/A12SR71.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;For every nice thing, there is a nicer thing - A12 vs SR71&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As a user of C++ primarily for 12 years and counting, It brings lots of nice things to the table. Talking about C++ is a topic in and of itself and this margin is definitely not enough large enough to contain those notes. But for the purpose of explaining this post, I will cover the highlights of what it provides over C.&lt;/p&gt;
&lt;p&gt;The biggest of these is the ability to do easier resource management. &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/raii&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RAII&lt;/a&gt; is a very simple but very powerful concept. Along with automatically called destructors, this concept makes it very easy to enforce clean up of resources.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;dot method&amp;rdquo; of programming as I like to call it, is a very convenient way to experiment quickly. Basically the idea is that you include the main header file for the library you are experimenting with, then you instantiate whatever seems to be the most relevant class for what you want to achieve. And finally you type the object name and then press dot and wait for autocompletion of the IDE to kick in. Assuming the library author was a sensible person, you would be off to the races at this point. You would have everything you need to do right there and it will be a matter of calling the right methods with the right parameters.&lt;/p&gt;
&lt;p&gt;Now this is not how you would necessarily do the actual development for the production code but this is very useful in prototyping and testing.&lt;/p&gt;
&lt;p&gt;Another nice thing about C++ is it&amp;rsquo;s capability to hide unwanted complexity. And make sure the code moves only within the parameters set by the library. Enum classes and other features introduced in C++11 is the main driver for this functionality.&lt;/p&gt;
&lt;h2 id=&#34;implementing-a-c-wrapper-for-hyperscan&#34;&gt;Implementing a C++ Wrapper for Hyperscan
&lt;/h2&gt;&lt;p&gt;With all that in mind, let&amp;rsquo;s get down to business of creating the wrapper. Lets start with the header file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HyperScanDatabase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;match_event_handler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;BLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_compiled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_database_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_scratch_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing to note is I am converting the configuration options and parameter types to C++ equivalents. This can be as simple as changing integer flags to enum classes and up lifting function pointers in to C++ typedefs. Or they can be more elaborate ones where we cover up return codes with an exception hierarchy, change C data structures to C++ STL ones and so on. The important thing is that you keep the interface of the wrapper within the C++ realms and remove the &amp;ldquo;C&amp;rdquo; ness of the interface.&lt;/p&gt;
&lt;p&gt;Then note that the internal data structures are all C++ ones, even when ultimately they will be passed to the C code. &lt;code&gt;m_patterns&lt;/code&gt; for example is a vector of char pointers. In C world this would become a two dimensional dynamically allocated array of char pointers. But in C++ world, it is a vector of char pointers. The difference being that memory management is far easier on the vector. Note that I couldn&amp;rsquo;t use a vector of vectors because there is no guarantee in C++ about contiguousness of nested vectors.&lt;/p&gt;
&lt;p&gt;A virtual destructor because we are holding resources that need to be freed and a state variable for holding internal state is also present.&lt;/p&gt;
&lt;p&gt;The methods themselves are very simple. The construction of the object only requires you to know if you are processing a stream or block of characters. Then a single method for adding a pattern for matching which returns a unique id for the pattern. Then a method scanning the data and calling the event handler for each match.&lt;/p&gt;
&lt;p&gt;Switching over to the implementation it looks like following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;hs_wrapper.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;hs_database&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;hs_scratch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;hs_compile_error_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hs_compile_multi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;HS_MODE_STREAM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_MODE_BLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to compile patterns: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_compile_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compileError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hs_alloc_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to allocate scratch space. Exiting.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// anonymous namespace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScanMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_free_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;hs_free_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d_pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HyperScanDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventHandler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_compiled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scanMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_patterns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hs_scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;m_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;HS_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: Unable to scan input buffer. rc = %d. Exiting.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the usual suspects really. Try to follow the best practices. Everything from &lt;a class=&#34;link&#34; href=&#34;https://www.oreilly.com/library/view/effective-modern-c/9781491908419/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Effective Modern C++11&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://herbsutter.com/gotw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Guru of the week&lt;/a&gt;. But in particular pay attention to the fact we hid the implementation of the compile function from the header in an anonymous namespace. This is something that I have seen almost all the C++ newbies, specially ones that started out with Java make. Those functions do not need to be part of the header file. Even if you make it private, it ends up polluting the namespace and needing recompiles of all the translation units including this header for no real gain. And no, you do not have to test that. The whole point of TDD is to test the unit - i.e. the interface you defined in the header. The public interface of the class can and should be tested and the &lt;code&gt;compile&lt;/code&gt; function will get tested while you do that. You don&amp;rsquo;t need to write a specific test for that function.&lt;/p&gt;
&lt;p&gt;Also note that we delegate resource management to the constructor and destructor as much as possible. The user of the class should not have to worry about freeing the resources. Obviously resource holding classes should not ideally be value semantic classes, so copying etc should be prevented. So in hindsight I should have used something like &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/rule_of_three&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rule of three&lt;/a&gt; and defined a copy constructor and assignment operator as well. So strike one for me :)&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways
&lt;/h2&gt;&lt;p&gt;In general the first thing that I instinctively do when I have to use a non-trivial C library is to look for a C++ wrapper. It is much easier to work with a C++ interface and not have to worry about manual resource management. This pattern of creating C++ wrappers go back to when we had to use OpenSSL in one of my previous jobs and we ended up writing a pretty comprehensive C++ wrapper for that. In case you have to do that for your work, try to make sure that you never ever leak the resource management details to outside. The moment you do that, you lose all advantage that C++ gives you.&lt;/p&gt;
&lt;p&gt;Make sure that your wrappers public interface is independent from the underlying C libraries. Redefine enums to enum classes, use narrower types, use types with custom validation - whatever you do, define your own interfaces since that will allow you to customize the internal behavior to your hearts content as well upgrade or modify the underlying C library without having to change the clients of your library.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Starting With Realtime Data</title>
        <link>https://osada.blog/posts/starting-with-realtime-data/</link>
        <pubDate>Sat, 20 Nov 2021 20:15:01 +0530</pubDate>
        
        <guid>https://osada.blog/posts/starting-with-realtime-data/</guid>
        <description>&lt;img src="https://osada.blog/posts/starting-with-realtime-data/realtime-splash.webp" alt="Featured image of post Starting With Realtime Data" /&gt;&lt;blockquote&gt;
&lt;p&gt;(or why realtime data is elusive in most organizations)&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#data-data-and-data&#34;&gt;Data, Data and Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-break-out-of-the-cycle&#34;&gt;How to break out of the cycle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#national-rail-to-the-rescue&#34;&gt;National Rail to the Rescue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#stomp-protocol--which-i-didnt-know-was-a-thing-&#34;&gt;STOMP Protocol ( which I didn&amp;rsquo;t know was a thing )&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#re-learning-java-in-a-pinch&#34;&gt;Re-learning Java in a pinch&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#note-about-the-java-solution-and-how-it-works&#34;&gt;Note about the Java solution and how it works&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#on-to-writing-to-kafka&#34;&gt;On to writing to Kafka&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-next&#34;&gt;What Next?&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;data-data-and-data&#34;&gt;Data, Data and Data
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/starting-with-realtime-data/hand-out-of-water.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Drowning in Data but Thirsting for Insights&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;These days the mantra is always data, data and more data. No organization can apparently get enough of data. And more and more of that data is coming in realtime in streaming systems.&lt;/p&gt;
&lt;p&gt;The ubiquity of kafka is proof that these days the real time delivery of data is the norm rather than the exception. But most of the time the processing of this data is being relegated to the usual suspects in the data lake.&lt;/p&gt;
&lt;p&gt;Due to the fact that most of the competency in the Data Engineering team usually lies with the batch processing side, they usually consider the real time processing as one of several different things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Too expensive&lt;/li&gt;
&lt;li&gt;Too hard&lt;/li&gt;
&lt;li&gt;Has no real use case&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now this is not to suggest that these are necessarily untrue - it is harder to process, and probably expensive to do so as well. And half the time the product owners and/or business users have absolutely zero imagination and cannot come up with a decent real time use case even if their lives depended on it.&lt;/p&gt;
&lt;p&gt;But the fact remains that once the stars do align, when there is a good use case we end up being unable to execute because we dont really have a lot of experience with the real time streaming systems.&lt;/p&gt;
&lt;h2 id=&#34;how-to-break-out-of-the-cycle&#34;&gt;How to break out of the cycle
&lt;/h2&gt;&lt;p&gt;As with any other use case or technology that is unfamiliar - you need to break out of the vicious cycle that allows this learned helplessness to persist. I have alluded to this in an earlier post of mine where I discuss conscious learning.&lt;/p&gt;
&lt;p&gt;The first thing to do is acquire some practice. The problem with this is that streaming data is really hard to come by in the wild. There are enough big data sets that can be used for pet projects now. Sources like &lt;a class=&#34;link&#34; href=&#34;https://github.com/awesomedata/awesome-public-datasets&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;awesome public datasets&lt;/a&gt; allow us to do pet projects on batch processing side of the things really easily.&lt;/p&gt;
&lt;p&gt;But when it comes to real time streaming data, the story is much more different. Since distributing such data requires significant server power, there aren&amp;rsquo;t servers out in the open internet that will let you subscribe to kafka feeds. So we need to look for alternatives. The easiest way would be to down load a time series data file source in a program that will write that data to a kafka stream. If required it can even modify the timestamps to match.&lt;/p&gt;
&lt;p&gt;The other way would be to find a real time data source that is actually publicly available and use that. There aren&amp;rsquo;t that many of them around and they ones that are there are not kafka streams. The protocols for distribution of real time data in these cases tend to be much more varied. There are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MQTT - Message Queue Telemetry Protocol is a lightweight pub sub network protocol popular in IOT&lt;/li&gt;
&lt;li&gt;STOMP - Simple Text Oriented Message Protocol is one that works over web sockets and works with message oriented middleware such as MQ systems&lt;/li&gt;
&lt;li&gt;AMQP - Advanced Message Queuing Protocol was created for unifying the middleware layer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one source of actual useful realtime information I could find was national rail in the UK. The Transport for London was also supposed to host several real time streaming data feeds but I could not find any information on this.&lt;/p&gt;
&lt;h2 id=&#34;national-rail-to-the-rescue&#34;&gt;National Rail to the Rescue
&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osada.blog/posts/starting-with-realtime-data/national-rail-realtime.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;An Unlikely Rescuer&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The national rail provides a set of open data feeds and files for anyone who creates a developer account. There are several sets of data in there. The full data can be found at the &lt;a class=&#34;link&#34; href=&#34;https://wiki.openraildata.com/index.php?title=Darwin:Push_Port&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;. You can sign up for the developer account at &lt;a class=&#34;link&#34; href=&#34;https://opendata.nationalrail.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open data portal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The feed is in STOMP format and the serialization format is XML. And it is compressed using gzip. So we will have to read the data in STOMP protocol format, unzip it and then convert to a more modern format that most of the tools understand such as json and then write it to kafka to be processed further.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go through each of these concerns and figure out how we are tackling each one&lt;/p&gt;
&lt;h2 id=&#34;stomp-protocol--which-i-didnt-know-was-a-thing-&#34;&gt;STOMP Protocol ( which I didn&amp;rsquo;t know was a thing )
&lt;/h2&gt;&lt;p&gt;Before this project I had never heard of the STOMP format. But reading up on it, it seems quite a small, easy to understand spec that you can read &lt;a class=&#34;link&#34; href=&#34;https://stomp.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Since it is quite easy to understand and implement, I was expecting the clients to work quite smoothly. Specially since there seemed to have been such a small amount of churn in the protocol specification itself.&lt;/p&gt;
&lt;p&gt;But it turned out that the python library was having issues. Right after connecting, the client gets disconnected. The strange thing is the command line client seems to work just fine. I had assumed that my code was having issues and I did not understand something about the library I was using - &lt;a class=&#34;link&#34; href=&#34;https://github.com/jasonrbriggs/stomp.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stomp.py&lt;/a&gt;. But it turned out that even the &lt;a class=&#34;link&#34; href=&#34;https://github.com/openraildata/stomp-client-python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official client&lt;/a&gt; did not work either.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
❯ pipenv shell
Launching subshell in virtual environment...
❯  . /home/osada/.local/share/virtualenvs/tfltest-7b5b1zAz/bin/activate
❯ cd stomp-client-python
❯ ./opendata-nationalrail-client.py
Connecting to darwin-dist-44ae45.nationalrail.co.uk
Disconnected waiting 5 seconds before exiting
^CTraceback (most recent call last):
  File &amp;#34;/home/osada/progs/tfltest/stomp-client-python/./opendata-nationalrail-client.py&amp;#34;, line 108, in &amp;lt;module&amp;gt;
    time.sleep(1)
KeyboardInterrupt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So that was a dead end because I didn&amp;rsquo;t really have the temerity to debug this right then. Rummaging around in that openraildata org in github, the next repo was a java client. I have not done any Java development in years but I decided to give it a go since that seemed the quickest way to get things going.&lt;/p&gt;
&lt;h2 id=&#34;re-learning-java-in-a-pinch&#34;&gt;Re-learning Java in a pinch
&lt;/h2&gt;&lt;p&gt;The first thing to do was setup the developer environment. Since I had not done so before, I install the JDK. Since I wasn&amp;rsquo;t sure which version to go with I installed both java 11 version and java 17 versions. I decided to give java 17 version a try. Since I am on arch (well, technically manjaro) I have to use the following command to update the alternatives where alternative is the term used on Ubuntu side.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
❯ sudo archlinux-java status
Available Java environments:
java-11-openjdk (default)
java-17-openjdk
❯ sudo archlinux-java set java-17-openjdk
❯ java --version
openjdk 17.0.1 2021-10-19
OpenJDK Runtime Environment (build 17.0.1+12)
OpenJDK 64-Bit Server VM (build 17.0.1+12, mixed mode)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, now on to actually building and running the official client. Replace the username and password with what was assigned to you when you signed up. And build and run.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
    ❯ mvn spring-boot:run
    [INFO] Scanning for projects...
    [INFO] 
    [INFO] ------------&amp;lt; com.openraildata:openwire-camel-client-java &amp;gt;-------------
    [INFO] Building openwire-camel-client-java 1.2
    [INFO] --------------------------------[ jar ]---------------------------------
    ....
    2021-11-21 21:38:52.480 ERROR 17340 --- [           main] c.s.x.b.v2.runtime.reflect.opt.Injector  : null

    java.security.PrivilegedActionException: null
   at java.base/java.security.AccessController.doPrivileged(AccessController.java:573) ~[na:na]
   at com.sun.xml.bind.v2.runtime.reflect.opt.Injector.&amp;lt;clinit&amp;gt;(Injector.java:197) ~[jaxb-impl-2.3.0.jar:2.3.0]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, that was unexpected. Turns out that newer Java versions don&amp;rsquo;t like some optimization used in JAXB core libraries. According to this &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/50237516/proper-fix-for-java-10-complaining-about-illegal-reflection-access-by-jaxb-impl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stackoverflow&lt;/a&gt; answer it seems that using any version of JAXB above 2.3.0 should do the trick but after several attempts at changing dependencies and other futile attempts, I just gave up and switched to Java 11. And that seems to work fine with just a warning. Homework for later!&lt;/p&gt;
&lt;p&gt;Switching to Java 11 made everything work and finally we were getting some data from the feed, Success!&lt;/p&gt;
&lt;h2 id=&#34;note-about-the-java-solution-and-how-it-works&#34;&gt;Note about the Java solution and how it works
&lt;/h2&gt;&lt;p&gt;Taking a step back and actually reading through the source code for the Java Client showed me that the code is unusually succinct, specially compared to my memories of bloated hunks of code that I remember being the standard enterprise Java fare. Turns out it was due to mostly the library that they were using Camel. Camel itself probably deserves a blog post of it&amp;rsquo;s own but for the moment let&amp;rsquo;s quickly dive in to what it is because boy its interesting.&lt;/p&gt;
&lt;p&gt;This library traces it&amp;rsquo;s roots back to &lt;a class=&#34;link&#34; href=&#34;https://www.enterpriseintegrationpatterns.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Enterprise Integration Patterns book&lt;/a&gt; by Gregor Hohpe and Bobby Woolf. That book comes about after the GoF book gets published about the design patterns in OO programming. Now the very second design patterns are mentioned the functional purists amongst you will scoff at the mere mortals who are forced to use Java because &lt;em&gt;we don&amp;rsquo;t need design patterns&lt;/em&gt;. But the reality is that patterns transcend individual languages and are a quite useful tool to save people time and effort when developing enterprise application. The honest truth is that Enterprise programmers have to manage with fewer resources than their Web 2.0 brethren, the same sort of expectations. And patterns that can be easily recognized, applied and shared are life savers since it makes the job easier for architects that have to come up with the blueprints and programmers that have to implement them.&lt;/p&gt;
&lt;p&gt;The book defined a set of 65 common integration patterns and the &lt;a class=&#34;link&#34; href=&#34;https://camel.apache.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Camel library&lt;/a&gt; implements those patterns. It also has support for numerous data formats and endpoints via a unified URI system. This makes it extremely easy to integrate different data sources and sinks. Best thing about this is that the library core is very lightweight and the rest of the functionality uses a plugin architecture. This was a surprise finding and I am somewhat dissapointed to find that no golang library fills the same niche.&lt;/p&gt;
&lt;h2 id=&#34;on-to-writing-to-kafka&#34;&gt;On to writing to Kafka
&lt;/h2&gt;&lt;p&gt;Now the only thing left to do was writing to Kafka. To accomplish only a very few changes needed to be done. Configuring the connection to Kafka is simple enough. Add the dependencies to pom.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.camel&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;camel-kafka&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${camel.version}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And configure routing for route builder so the STOMP messages gets processed and sent to kafka&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topicName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stomp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kafkaServer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;kafka&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toKafka&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kafkaServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topicName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;brokers=localhost:9092&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;activemq:topic:&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feedTopic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;?durableSubscriptionName=&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;unmarshal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;darwinMessageHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toKafka&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All that is left is for the XML to be converted to JSON because that&amp;rsquo;s the only language hip enough for 2021. For that I ended up using jackson instead of a simpler alternative like &lt;a class=&#34;link&#34; href=&#34;https://github.com/stleary/JSON-java&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON Java&lt;/a&gt; because of the namespaced XML found in the feed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exchange&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messageBody&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XmlMapper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmlMapper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XmlMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmlMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messageBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonMapper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And done! Now we just run a kafka process along with the associated zookeeper instance, create the topic called &amp;ldquo;stomp&amp;rdquo; and viola!&lt;/p&gt;
&lt;h2 id=&#34;what-next&#34;&gt;What Next?
&lt;/h2&gt;&lt;p&gt;So you have a system that writes some set of JSON messages in to a kafka topic, what next? Well the next steps can be anything you want to learn and experiment with really. For me I am hoping to use this to toy with two pet projects.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to learn flink including it&amp;rsquo;s CEP engine.&lt;/li&gt;
&lt;li&gt;I want to take &lt;a class=&#34;link&#34; href=&#34;https://materialize.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;materialize&lt;/a&gt; for a spin&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;expect more writings on those topic based on this setup in the coming weeks.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Learning In Engineering Organizations</title>
        <link>https://osada.blog/posts/learninginorganizations/</link>
        <pubDate>Thu, 14 Oct 2021 15:36:00 +0530</pubDate>
        
        <guid>https://osada.blog/posts/learninginorganizations/</guid>
        <description>&lt;img src="https://osada.blog/img/learning-in-orgs.jpg" alt="Featured image of post Learning In Engineering Organizations" /&gt;&lt;h1 id=&#34;learning-in-software-engineering-organizations&#34;&gt;Learning In Software Engineering Organizations
&lt;/h1&gt;


&lt;figure&gt;
    
        
            &lt;img src=&#34;https://live.staticflickr.com/1815/42907807575_553abc078d_b.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;The Learning Organization: A Lit Review by giulia.forsythe licensed under CC BY 2.0&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#learning-in-organizations&#34;&gt;Learning in Organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-learning-matters-for-organizations&#34;&gt;Why Learning Matters for Organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-is-different-about-engineering-organizations&#34;&gt;What is different about engineering organizations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-learn-in-big-organizations&#34;&gt;How to learn in Big Organizations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#corporate-knowledge-systems&#34;&gt;Corporate Knowledge Systems.&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#index-tag-and-disseminate&#34;&gt;Index, tag and disseminate&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#automate-with-apis&#34;&gt;Automate with APIs&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chat-your-way-to-knowledge&#34;&gt;Chat your way to knowledge&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#newsletters-and-blogs&#34;&gt;Newsletters and Blogs&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;learning-in-organizations&#34;&gt;Learning in Organizations
&lt;/h2&gt;&lt;p&gt;In almost all organizations that I have been part of since I graduated there have come a time when we had to teach something to the whole team. This may have been my own team, a team I managed or a team I interacted with. But something I have seen most of the time is the inability or the disinclination to do the learning in a structured way. Most teams would not, given the chance jump at the opportunity to make sure they make the best of the situation. In my opinion this is one of the worst mistakes leaders and teams make in their journey.&lt;/p&gt;
&lt;p&gt;Learning something in the workplace is an interesting experience. The workplace is not exactly the school, university, or an opportunity for earning continuing professional development points. Most of the time our activities are arranged so that we all work towards the company mission and the goals. Now learning something new doesn’t directly impact the bottom line but that doesn&amp;rsquo;t need to be the sole goal here. Learning pays dividends later down the road so its effects are felt with a delay which makes evaluating the effectiveness of such activities an interesting experience. However, if we are to have a efficient and impactful learning experience we should definitely measure its effectiveness. After all we do know that the best kind of organizations are the ones that are &lt;a class=&#34;link&#34; href=&#34;https://hbr.org/2020/02/10-steps-to-creating-a-data-driven-culture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;data driven&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-learning-matters-for-organizations&#34;&gt;Why Learning Matters for Organizations
&lt;/h2&gt;&lt;p&gt;Learning as a specific need may not be critical for some roles within an organization. Manual labor tasks that are repetitive doesn’t exactly need a curriculum of material to be dispensed every month. But most of the modern organizational personal do need to keep up with the pace of technology, economy, state of industry and various other forces that the organization interacts with. And if they are to understand and make use of those interactions to benefit the company, they need to be up to speed on all of these things. That’s where organizational learning come in to play.&lt;/p&gt;
&lt;p&gt;Most of the time the easy way out is to just hire the talent or knowledge you lack. But this can be a very costly affair. Multiple anecdotes have shown me that hiring specific talent can be a very time consuming and costly endeavor. So, in most cases it might be easier to just build that knowledge in house.&lt;/p&gt;
&lt;h2 id=&#34;what-is-different-about-engineering-organizations&#34;&gt;What is different about engineering organizations
&lt;/h2&gt;&lt;p&gt;Engineering organizations differ from the rest of the organizations due to the sheer velocity with which things move. Software engineering and related fields get updated at a break neck speed. What was considered state of the art just a year ago may now be considered so legacy that it may even be hard to hire people for. And all these creativity and speed comes at a cost. It is extremely hard to keep track of new technology, processes and disciplines without having an explicit system in place capable of making sure your employees can easily learn about the things that enable them to do their jobs better. Engineering profession thrives on having the best information at hand to solve the questions that we face in our day to day work. So it is essential we be able to keep learning new things and more importantly learn the correct things.&lt;/p&gt;
&lt;h2 id=&#34;how-to-learn-in-big-organizations&#34;&gt;How to learn in Big Organizations
&lt;/h2&gt;&lt;p&gt;I have worked at larger organizations for the most part of my career. And there are multitudes of benefits for working in such companies. But there are also&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.filtered.com/thoughts/learning-at-big-companies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;many things that inhibit chances for learning at large oraganizations&lt;/a&gt;. So you have to be aware of these limitations and then overcome them in order for you to be successful. There are reasons to do with management and incentives but they again deserve their own blog post.&lt;/p&gt;
&lt;p&gt;Lets talk about tooling for learning. The good thing about larger organizations is that they have cash to burn. There are boxes to be ticked and systems to be put in place - no one will bat an eyelid when you ask for a chat app or a documentation server. Here are some of the tooling you can leverage to make it easier for employees to learn.&lt;/p&gt;
&lt;h3 id=&#34;corporate-knowledge-systems&#34;&gt;Corporate Knowledge Systems.
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/kms-infographic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Most of the time employees are going to be looking for information on common problems and they will just turn to google/stackoverflow/quora. But there will be some cases where there is no publicly available information on the particular problem. This may be due to legacy systems that are not publicly known or due to particular tech stacks used within the company. Whatever the reason, the chances are the bigger the organization, the higher the probability of someone else in the company of having faced the same situation. And having the good, modern, efficient knowledge sharing system is crucial to leveraging this knowledge. This is how you avoid those moments of &amp;ldquo;Oh, wow. We already fixed that. Should have asked first!&amp;rdquo;. There are a plethora of products in the market these days for knowledge sharing systems so it helps to do some research beforehand to understand your organizations requirements and how to fulfill them. The good news is there are a lot of material on how to select these systems as well such as &lt;a class=&#34;link&#34; href=&#34;https://www2.deloitte.com/us/en/insights/focus/technology-and-the-future-of-work/organizational-knowledge-management.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this article by deloitte&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;index-tag-and-disseminate&#34;&gt;Index, tag and disseminate
&lt;/h3&gt;&lt;p&gt;Use technology to index and automatically tag content. With today’s deep learning ML models and NLP processing, this has never been easier. Then use the knowledge system platforms you have built to share this content with the wider audiences. An example might be how one development team overcomes a certain issue with a legacy system the company is using - maybe your companies’ legacy relational DB can’t add read replicas without huge costs and a team figured out how to get around this using CDC feeds. Now an intelligent knowledge sharing system will tag these with replication, relational and CDC tags and the next time another team is looking for a relational DB replication solution that result will automatically come up.&lt;/p&gt;
&lt;h3 id=&#34;automate-with-apis&#34;&gt;Automate with APIs
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.mulesoft.com/resources/api/what-is-an-api-economy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;API Economy&lt;/a&gt; is here to stay. Everything should be an API in today&amp;rsquo;s company culture. And that is a good thing. It being transparency to environments and allows us to leverage the API for automation and integration. There are a number of tools any development/engineering team will use in their day-to-day life - an issue tracker (Jira/Trello), a chat program (Slack/Teams), a code repo (github/gitlab). Each of these products expose an API interface to the outside world. This is how you make sure tools work together to capture information and knowledge that would otherwise be lost. Certain channels/chat rooms can be created to allow people to share knowledge and ask questions. These can in turn be digested by an indexer and made searchable. Make it easier to search and find things. You can even use tools such &lt;a class=&#34;link&#34; href=&#34;https://zapier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zapier&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://powerautomate.microsoft.com/en-us/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Power Automate&lt;/a&gt; to make things work together. These can be the glue you need. For example you can create a poll in TEAMs chat to get feedback and this is much more effective than a separate email sending a link to a survey. These results can then we summarized by a tool such as power automate and you can thank the participants via the same tool.&lt;/p&gt;
&lt;h3 id=&#34;chat-your-way-to-knowledge&#34;&gt;Chat your way to knowledge
&lt;/h3&gt;&lt;p&gt;Realtime chat tooling is now everywhere. And as ubiquitous as they are we are definitely not using them to the full potential. As seen above we can definitely add more features on top of them. Even before that, allowing them to work alongside or closer to actual content we work with is a very effective way to leverage these tools. &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-teams/group-chat-software&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Teams&lt;/a&gt; is a leader in this space. Many applications can be embedded in the chat program itself and it is very easy to switch from editing a file collaboratively to chatting about it to another stakeholder and back. This is a topic deserving its own post so expect one in the near future.&lt;/p&gt;
&lt;h3 id=&#34;newsletters-and-blogs&#34;&gt;Newsletters and Blogs
&lt;/h3&gt;&lt;p&gt;Have an organizational newsletter and blog set. You will be surprised at how effective this will be. RSS never really stopped working - blogs are still surprisingly effective in communicating structured technical knowledge. They also let influencers and power sharers naturally access a platform that lets them reach a wider audience. This is very effective as this is ground up content so will be useful information for folks on the ground, in the trenches.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Not your grandmas&#39; docker - Part 2</title>
        <link>https://osada.blog/posts/container-part2/</link>
        <pubDate>Thu, 26 Aug 2021 10:00:50 +0530</pubDate>
        
        <guid>https://osada.blog/posts/container-part2/</guid>
        <description>&lt;img src="https://osada.blog/img/container-arial.jpg" alt="Featured image of post Not your grandmas&#39; docker - Part 2" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#components-of-the-container-ecosystem&#34;&gt;Components of the container ecosystem&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#container-engines&#34;&gt;Container Engines&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-host&#34;&gt;Container Host&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#registry-server&#34;&gt;Registry Server&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-orchestration&#34;&gt;Container Orchestration&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#container-runtime&#34;&gt;Container Runtime&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Now that we have discussed the basics of containers, lets dive in to the details. Modern container tooling goes way beyond simply running an OS image in a separate context.&lt;/p&gt;
&lt;h2 id=&#34;components-of-the-container-ecosystem&#34;&gt;Components of the container ecosystem
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/DockerEcosystem.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Container Ecosystem&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-engines&#34;&gt;Container Engines
&lt;/h3&gt;&lt;p&gt;A container engine will run a container given the user input to do so. You can customize it&amp;rsquo;s behavior through several parameters. Note that it does not necessarily need to know where images are on remote servers and how to get them. In fact it even does not actually run them by itself, usually thats delegated to the container runtime. More on that later. And there are of course proprietary implementations of container engines at various cloud providers.&lt;/p&gt;
&lt;p&gt;The basic responsibilities of this layer include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using various input to determine runtime behavior of the container (network, storage, etc)&lt;/li&gt;
&lt;li&gt;Decompressing and expanding the container image on disk using a Graph Driver&lt;/li&gt;
&lt;li&gt;Preparing a container mount point, typically on COW (copy on write) storage&lt;/li&gt;
&lt;li&gt;Creating a config.json file with metadata to be passed to the container runtime&lt;/li&gt;
&lt;li&gt;Invoking the Container Runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Options for this component include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.docker.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rkt/rkt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RKT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cri-o.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRI-O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://linuxcontainers.org/lxd/introduction/#LXD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LXD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-host&#34;&gt;Container Host
&lt;/h3&gt;&lt;p&gt;The container host is the system that runs the containers. This could be your local machine running an *nix OS, a VM on the same or a VM/baremetal machine on public/private cloud. Once a container image is pulled from a Registry Server to the local container host, it is said to be in the local cache.&lt;/p&gt;
&lt;h3 id=&#34;registry-server&#34;&gt;Registry Server
&lt;/h3&gt;&lt;p&gt;A registry server is essentially a server that is used to store and server docker images from. These are just URIs usually connected to over HTTPS. you would usually use REST API to interact with them.&lt;/p&gt;
&lt;p&gt;When a container runtime finds that a container image cannot be found in the local cache, it &lt;em&gt;can&lt;/em&gt; invoke a tool to fetch the container image (aka repository) from the registry server. The most well known registry server is docker.io but there are several public alternatives as well as implementations that can be hosted privately for more customization and security. There are also registries that can be reached publicly but only hosts private container images/repositories. Note that these should handled very carefully due to supply chain attacks. It is very important that you think out the consequences of what registries you enable and the security around that.&lt;/p&gt;
&lt;h4 id=&#34;public-container-registries&#34;&gt;Public container registries
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docker.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://quay.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CoreOS Quay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;public-reachable---private-repository-registries&#34;&gt;Public reachable - private repository registries
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/ecr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Elastic Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/container-registry/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/services/container-registry/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;self-hosted-registries&#34;&gt;Self hosted registries
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/datacenter/dtr/2.4/guides/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Trusted Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/vmware/harbor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Harbor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jfrog.com/confluence/display/RTF/Getting&amp;#43;Started&amp;#43;with&amp;#43;Artifactory&amp;#43;as&amp;#43;a&amp;#43;Docker&amp;#43;Registry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JFrog Artifactory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-orchestration&#34;&gt;Container Orchestration
&lt;/h3&gt;&lt;p&gt;Container usage usually starts with a single developer using a docker image to test out his software and making sure it is working as intended. But once multiple teams and multiple applications get involved, you run in to more facets to consider such as shared networking, storage, monitoring and a whole host of others. This is basically the difference between &amp;ldquo;run on my machine&amp;rdquo; vs &amp;ldquo;should run on production&amp;rdquo;. Shipping these applications to production and running these there involves a lot more scaffolding than just running a single container on a developers machine.&lt;/p&gt;
&lt;h4 id=&#34;responsibilities-of-the-container-orchestration-system&#34;&gt;Responsibilities of the Container Orchestration System
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Scheduling and running container workloads on top of a resource provisioning system&lt;/li&gt;
&lt;li&gt;Providing networking layer for containers to inter-communicate&lt;/li&gt;
&lt;li&gt;Providing network traffic control&lt;/li&gt;
&lt;li&gt;Service Discovery (optional)&lt;/li&gt;
&lt;li&gt;Providing a standardized system definition file (helm charts, k8s yaml, docker compose etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-orchestration-systems&#34;&gt;Container Orchestration Systems
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mesosphere.github.io/marathon/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mesos + marathon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/swarm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container Runtime
&lt;/h3&gt;&lt;p&gt;A container runtime actually runs the container image that is on disk essentially converting the on-disk container image to a running process set. The Open Containers Initiative (OCI) Runtime Standard reference implementation  is runc. This is the most widely used container runtime, but there are others OCI compliant runtimes. There are various types of them as well. Some are native runtimes that run the container directly on the host. Some are sandboxed runtimes that run either on a kernel proxy layer or a unikernel. And the latest addition to this space is the standardized interface into kubernetes container runtime - Container Runtime Interface. Kubernetes started with docker runtime as the only option for this and as time went by they started to migrate away from the docker dependency. As they did, they introduced CRI as a way to democratizing/virtualizing the runtime tooling. Now there are multiple conforming implementations&lt;/p&gt;
&lt;h4 id=&#34;responsibilities-of-the-container-runtime&#34;&gt;Responsibilities of the container runtime
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Setting up the container image fs view at the mount point given&lt;/li&gt;
&lt;li&gt;Using the config json to customize the container runtime parameters&lt;/li&gt;
&lt;li&gt;Starting the containerized process using clone or similar syscall&lt;/li&gt;
&lt;li&gt;Setting the isolation and security constructs such as cgroups,  namespace and SELinux&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-runtime-systems&#34;&gt;Container Runtime Systems
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Open Container Initiative (OCI) Runtimes
&lt;ul&gt;
&lt;li&gt;Native Runtimes
&lt;ul&gt;
&lt;li&gt;runC&lt;/li&gt;
&lt;li&gt;Railcar&lt;/li&gt;
&lt;li&gt;Crun&lt;/li&gt;
&lt;li&gt;rkt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sandboxed and Virtualized Runtimes
&lt;ul&gt;
&lt;li&gt;gviso&lt;/li&gt;
&lt;li&gt;runV&lt;/li&gt;
&lt;li&gt;kata-containers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Container Runtime Interface
&lt;ul&gt;
&lt;li&gt;containerd&lt;/li&gt;
&lt;li&gt;cri-o&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Not your grandmas&#39; docker - Part 1</title>
        <link>https://osada.blog/posts/container-intro/</link>
        <pubDate>Sat, 14 Aug 2021 14:00:50 +0530</pubDate>
        
        <guid>https://osada.blog/posts/container-intro/</guid>
        <description>&lt;img src="https://osada.blog/img/container-arial.jpg" alt="Featured image of post Not your grandmas&#39; docker - Part 1" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#operating-system-level-virtualization&#34;&gt;Operating System Level Virtualization&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chroot&#34;&gt;chroot&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#solaris-zones-and-containers&#34;&gt;Solaris Zones and Containers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#systemd-nspawn&#34;&gt;Systemd nspawn&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#lxclxd&#34;&gt;LXC/LXD&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#enter-docker&#34;&gt;Enter docker&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-not-docker&#34;&gt;Why not docker?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-buildah-is&#34;&gt;What buildah is&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;p&gt;Most of us got introduced to containers with docker. In fact it seems that docker for most intents and purposes and has become synonym with containers. However there is a vast landscape of technology underneath this seemingly simple facade of containers. So lets try and dig in to what a container is before we introduce the tooling that we will be using today.&lt;/p&gt;
&lt;h2 id=&#34;operating-system-level-virtualization&#34;&gt;Operating System Level Virtualization
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/OS-level-virt.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;OS Level Virtualization&#34;
	
	
&gt;&lt;br&gt;
&lt;br&gt;
Above is a screenshot of the wikipedia page for OS Level Virtualization Technologies. And notice that there are several technologies now close to 20 years old. So virtualization at OS level is by no means a new concept. Lets take a look at some of them&lt;/p&gt;
&lt;h3 id=&#34;chroot&#34;&gt;chroot
&lt;/h3&gt;&lt;p&gt;&lt;br&gt;
This is perhaps the most simple form of a container. It basically changes the root directory to a different directory as specified by the root user. The idea being that the user in the chroot cannot then escape our of that chroot directory in to the real root dir. And for this reason we usually refer to it as a chroot jail.&lt;/p&gt;
&lt;p&gt;There are no other privilege checking or access checking enabled. A privilege user can still create special nodes and run commands from with in the chroot. Therefore it is not really suitable as a way to prevent unwanted access from privileged users. Now since the programs usually expect a standard set of directories and files within the root dir, there are tools like &lt;a class=&#34;link&#34; href=&#34;https://olivier.sessink.nl/jailkit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jailkit&lt;/a&gt; that simplify this procedure&lt;/p&gt;
&lt;p&gt;What can this be used for? Well mostly I have seen it being used for testing and builds. Lets look at each use case&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kroki.io/blockdiag/svg/eNqFj8EKwkAMRO9-RVjPglAFoSiUQsGbCJ7EQ7oNVRp3JZt6Ef9daYUqXfCYYfJmpmRvm-qCNTwmACYXQiWwZ_FeDcw2YA7uhrYBRSmRude2Luj7gJ34WvDai_vWgVL4vOWemax2CgiFljUAugoC3qm3VMQ0hKWR_KP17AXWYKZFnhXJypzSyajRl2s5z5Js0blGHeOwoXUc82dHHPq7LE5-vgDwtXP4&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Block Diagram for Testing with chroot&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For testing, you can think of a chroot as a poor mans container. Once you create a chroot and you have a program that primarily depends on the file system to store data, you can fool it to think it is on a fresh system. And once the program is terminated you can throw away the whole chroot and start again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kroki.io/blockdiag/svg/eNqFj0ELgkAUhO_-imE7B4EFgRSY4DmCTtHhub5UXFxZd7tE_71MIaONjm_mY95MprSs84oK3AJAJIbJMmRptLYC8y3EsWlJ1rBkMlJq0A6uwc5VKh_O_ROggpH1EshYvpC03Wi6rkQ7Elb3dtXb6Nhc2QxQzorffyNPlZPUShtsIGZpEqfhWpyj4KvchFot4jBevqhJXX_MzwH-vL-T_F8-R_qz7w_V0Hug&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Block Diagram for Building with chroot&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For builds, chroots are wonderful because you control every aspect of the whole system from a storage point of view and that is all that is needed for builds. They don&amp;rsquo;t need remote data storage services for the most part and even if you need to push artifacts to a separate remote storage service that can be achieved by creating a suitable package from the output of the build process itself. Usually you will have a pre-packaged chroot that you store in a tarball containing all the build tools and the fundamental parts of whatever *nix system you are running on. Then after you have done the build you usually package up your build artefacts in to whatever suitable format is (wheels for python, crates for rust, RPM/deb for C etc) and push it to an artefact server. This keeps the builds reproducible as long as the&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;chroot tarball is the same&lt;/li&gt;
&lt;li&gt;the source is the same&lt;/li&gt;
&lt;li&gt;the build process is the same&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that you can reproduce older builds on demand assuming you keep the chroot tarballs around for long enough.&lt;/p&gt;
&lt;h3 id=&#34;solaris-zones-and-containers&#34;&gt;Solaris Zones and Containers
&lt;/h3&gt;&lt;p&gt;&lt;br&gt;
These are probably the best known implementation of OS level virtualization outside of linux. Although FreeBSD jails are quite well known too. I have no experience regarding those though so I will stick with Zones.&lt;/p&gt;
&lt;p&gt;A Solaris Container is the combination of system resource controls and the boundary separation provided by zones. Zones are completely separate server instances within a single physical server. In fact these are usually used to provide isolated test servers for the developers since almost no one is going to need a maxed out SPARC-T5-8 to test their application. Sys admins can reduce cost and provide most of the same protections of separate machines on a single machine by using zones.&lt;/p&gt;
&lt;h3 id=&#34;systemd-nspawn&#34;&gt;Systemd nspawn
&lt;/h3&gt;&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;https://osada.blog/img/systemd-meme.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Meme about Systemd&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;By now you should not be surprised to learn that there is an implementation of a container technology inside systemd. Everything but the kitchen sink remember?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Systemd_components.svg/440px-Systemd_components.svg.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Systemd Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is implemented on top of cgroups and is supposed to help users with containing processes easily in systemd. It is better in security terms than a chroot since it has process level security features as well. In that way it is similar to lxd or lxd. You can find more information &lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/systemd-nspawn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;lxclxd&#34;&gt;LXC/LXD
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/lxc-architecture.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;LXC Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;LXC allows running multiple isolated Linux systems (containers) on a control host using a single Linux kernel.&lt;/p&gt;
&lt;p&gt;It combines cgroups functionality that allows limitation and prioritization of resources (CPU, memory, block I/O, network, etc.) and namespace isolation functionality that allows complete isolation of an application&amp;rsquo;s view of the operating environment, including process trees, networking and mounted file systems.&lt;/p&gt;
&lt;p&gt;Previously LXC only supported privilege containers though starting with the LXC 1.0 release, it is possible to run containers as regular users on the host using &amp;ldquo;unprivileged containers&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/lxd-architecture.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;LXD Architecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;LXD is a system container manager. It is basically an alternative implementation of LXC rather than something completely different. Just that it is being pushed by canonical instead of Red Hat (Oops I mean IBM!).&lt;/p&gt;
&lt;h2 id=&#34;enter-docker&#34;&gt;Enter docker
&lt;/h2&gt;&lt;p&gt;The problem with all these OS level virtualization technology was the audience. In fact it wasn&amp;rsquo;t even a problem but a feature. They were all aimed at system administrators, developer tooling producers and similar folks who provided services &lt;em&gt;to the developers&lt;/em&gt; To be the next big thing apparently you needed to target the developers who needed a dumbed down front end to the whole thing so they could focus on the more interesting things - the business logic.&lt;/p&gt;
&lt;p&gt;Docker was created to mostly take existing virtualization technology and simplify it to the point your average developer could operate it without even understanding what was going on under the hood. Like all good tools it allowed people to make use of the technology without worrying too much about how and why of it.&lt;/p&gt;
&lt;p&gt;It reduced the setup of the container environment to a simple enough DSL that solved 99% of the problems of the average developer. It reduced the number of concepts the developers had to hold in their heads to a well defined few. And it made the management of the containers and their run time behavior a breeze by introducing a single well defined command line interface.&lt;/p&gt;
&lt;p&gt;This meant that for the better part of the last decade docker was known as the defacto container management system and rightly so.&lt;/p&gt;
&lt;h2 id=&#34;why-not-docker&#34;&gt;Why not docker?
&lt;/h2&gt;&lt;p&gt;Even though the user facing parts of the docker eco system was well thought out and intuitive, the backend and the ergonomics were anything but. If you have ever had the (mis?)fortune of having to work with dockerfiles for anything more than simple Hello World projects, you will know how hard it is to produce good ones that make sensible trade offs and produce acceptable image sizes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The builds tend to be too blown up. Image layers are unnecessarily large if you don&amp;rsquo;t take absolute care. See &lt;a class=&#34;link&#34; href=&#34;https://developers.redhat.com/blog/2016/03/09/more-about-docker-images-size&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; for an example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is very easy to make mistakes. Build time dependent images, have side effects etc. See &lt;a class=&#34;link&#34; href=&#34;https://codefresh.io/containers/docker-anti-patterns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; for an example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The multi stage builds are cumbersome to work with&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax leaves things to be desired. Mostly you will end up working with shell statements but it is not a shell script. So none of your usual tools will help you (think shellcheck etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don&amp;rsquo;t have root/Administrator access you cannot use docker. (Not completely correct - see &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/security/rootless/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. But for the most part no one will try this)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are just a few but you get the idea. And this is where buildah comes in&lt;/p&gt;
&lt;h2 id=&#34;what-buildah-is&#34;&gt;What buildah is
&lt;/h2&gt;&lt;p&gt;Buildah take the docker approach of building container images and managing them and first breaks it down in to components. Specifically there are three main components.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://buildah.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;buildah&lt;/a&gt; -&lt;br&gt;
This tool allows us to build container images.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://podman.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;podman&lt;/a&gt; -&lt;br&gt;
This allows us to manage runtime instances of the containers.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/containers/skopeo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;skopeo&lt;/a&gt;&lt;br&gt;
This allows us to work with container registries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So it essentialy decomposes the work done by the single docker command. How is this better? Well it allows the unix concept of one tool that does one thing best to work.&lt;/p&gt;
&lt;p&gt;Thats it for this post. Next post will discuss OCI vs docker and what different components of a container runtime is and how they come together to run a container.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Adventures in WSL Land</title>
        <link>https://osada.blog/posts/wsladventures/wsladventures/</link>
        <pubDate>Wed, 16 Jun 2021 12:00:05 +0530</pubDate>
        
        <guid>https://osada.blog/posts/wsladventures/wsladventures/</guid>
        <description>&lt;h1 id=&#34;adventures-in-wsl-land&#34;&gt;Adventures in WSL Land
&lt;/h1&gt;&lt;p&gt;Recently I have joined a new company and as almost always is the case ( at least in Sri Lanka ) I received a laptopthat runs Windows. In this case it was running a rather old version of Windows 10 that did not support WSL2. This documents my adventures in getting this laptop setup so that I can have a relatively modest working and development environment familiar to most *nix developers.&lt;/p&gt;
&lt;h2 id=&#34;getting-to-a-good-starting-place&#34;&gt;Getting to a good starting place
&lt;/h2&gt;&lt;p&gt;The first point of order was getting windows updated so that we could at least try on a new way of developing on this laptop. To this end I started by forcing a windows update. And curiously this failed. Turns out the reason was a McAfee program that was installed on the laptop for some security work. Turns out it was incompatible with the windows update. After that was resolved I was off to the races. But a good thing to keep in mind is always check if you are running the latest version of the OS and unless there is a very good reason not to do so, always upgrade it to the latest version.&lt;/p&gt;
&lt;h2 id=&#34;virtualization-platforms&#34;&gt;Virtualization platforms
&lt;/h2&gt;&lt;p&gt;Next up was selecting a virtualization platform to be used. In the past I had almost always reached for virtual box. VMWare was prohibitively costly and nowhere near as intuitive. But sadly Virtualbox seems to be neglected more and more under the stewardship of Oracle and there are no signs of things improving anytime soon. I am guessing Larry doesn&amp;rsquo;t really see a point in free things unless it is Oracle getting those free things. So I was pretty happy to find that windows now includes a native virtualization platform called Hyper-V.&lt;/p&gt;
&lt;h2 id=&#34;hyper-v---still-rough-around-the-edges&#34;&gt;Hyper-V - Still Rough Around the edges
&lt;/h2&gt;&lt;p&gt;The management of the VMs is done via a GUI called Hyper-V Manager (This is microsoft remember?). It looks something like below &lt;img src=&#34;https://osada.blog/img/Microsoft-Hyper-V-manager.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Hyper-V Manager&#34;
	
	
&gt;. There is a list of VMs in the middle and the operations that can be carried on the VMs tucked away on the right in a separate pane. It looks like a reverse version of virtual box GUI. The looks are deceptive though and not all the crucial functionality is available through the GUI. The majority of the GUI seems to be just a nice overlay over command line tooling that is best accessed through the Powershell command line. A good case in point is the networking part of the virtualization infrastructure. The networking part of the configuration is hidden behind the &amp;ldquo;Virtual Switch Manager&amp;rdquo;. But that is actually best accessed through the command line as described &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. And there are strange limitations and errors that can pop up. One is that there can only be one NAT internal type switch and if you somehow manage to create two, the system seems to go in to this undefined state where no virtualization features will work including docker with HyperV backend. You would have to install a patch, prey a couple of times to the god of small bugs of virtualization (Thanks Terry!) and restart the machine a couple of times. And hopefully it will resolve itself.&lt;/p&gt;
&lt;p&gt;Next time we will go in to details about the networking and how to make sense of the options as someone coming from virtualbox/Linux land.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cloud9 - A cloud based IDE for your code</title>
        <link>https://osada.blog/posts/cloud9/cloud9/</link>
        <pubDate>Mon, 29 Mar 2021 12:33:51 +0530</pubDate>
        
        <guid>https://osada.blog/posts/cloud9/cloud9/</guid>
        <description>&lt;h2 id=&#34;cloud9---a-cloud-based-ide-for-your-code&#34;&gt;Cloud9 - A cloud based IDE for your code
&lt;/h2&gt;&lt;p&gt;I first heard of cloud9 before it was acquired by AWS in 2016. In those days it was a novelty. But the good sort - the sort of thing you think of and say &amp;ldquo;Man, if only I had that sort of flexibility&amp;rdquo;. This was before Google docs was a widespread thing and collaborating on a cloud IDE that existed independently of your computer was unheard of. Everytime I wanted to send some code snippet to a coworker and they needed more context, I would think to myself, there has to be a better way to do this.&lt;/p&gt;
&lt;p&gt;Cloud9 was originally founded in 2010 and created the open source product. This was then acquired by Amazon and turned in to their own offering of a cloud IDE running on EC2.&lt;/p&gt;
&lt;h3 id=&#34;provisioning-a-developer-environment&#34;&gt;Provisioning a developer environment
&lt;/h3&gt;&lt;p&gt;The IDE itself is actually free. What you pay for is the environment that it runs on. Lets see how to provision one of these. Go to cloud9 on the management console and start spinning up an environment and you are presented with the initial screen.&lt;br&gt;
&lt;img src=&#34;https://osada.blog/img/cloud9-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After that you get to choose the environment that you run the cloud9 IDE on. I am of course choosing a t2.micro so that I can use the free tier for it.&lt;br&gt;
&lt;img src=&#34;https://osada.blog/img/cloud9-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally you get to review and approve the request.&lt;br&gt;
&lt;img src=&#34;https://osada.blog/img/cloud9-3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Codestar - A new way to get started on AWS Projects</title>
        <link>https://osada.blog/posts/codestar/codestar/</link>
        <pubDate>Sun, 28 Mar 2021 20:08:50 +0530</pubDate>
        
        <guid>https://osada.blog/posts/codestar/codestar/</guid>
        <description>&lt;h2 id=&#34;codestar---a-new-approach-to-development-on-aws&#34;&gt;Codestar - A new approach to development on AWS
&lt;/h2&gt;&lt;p&gt;Codestar is a relatively new approach to creating new application that run on AWS infrastructure. The interesting thing about this seems to be that it gives newbie developers like myself to get bootstrapped and go from zero to hundred in a relatively short time period.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codestar-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;InitialScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the initial screen shown when you first try to create a codestar project. There are several options to choose from but it is mostly elastic beanstalk and lambda focused. I selected golan based lambda project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codestar-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SecondScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Then you get to choose a project ID and a project name. Simple enough!. Then comes the choice of where to host the project repository. For now only &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/codecommit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AWS codecommit&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github&lt;/a&gt; are supported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codestar-3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ThirdScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I chose github as the hosting option since I only wanted to try one new thing at a time. After going through the usual permission windows, it creates the initial project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codestar-4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FourthScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The final review screen before things are created fully.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codestar-5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FifthScreen&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And these are all the different resources that are created by the codestar tool. Looking at that list there are several different things that you may be hard pressed to get right if you were doing this by hand. Considering the whole process took me less than 2 mins to complete, this seems like a no brainer to use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codebuild-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodeBuild&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This is my first time seeing AWS CodeBuild and it seems usable enough and easy enough to navigate for even a first timer like me. I have been an avid user of Jenkins and CircleCI for the most part of my career. Lately I have been toying around with Gitlab and Github built in automation frameworks. Compared to them Codebuild does seem to have a lot more room for growth. But it seems promising enough to warrant a post of its own.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codedeploy-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodeDeploy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Codedeploy is probably the one part of the puzzle that I took the least effort to review. It seems to be handling the deployment ok and I stopped looking at it after that cursory glance. Hopefully I can correct that in my next post about CodeBuild and CodeDeploy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/codepipeline-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CodePipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And together CodeBuild and CodeDeploy form CodePipeline. The CI/CD solution on AWS. Again compared to something like Jenkins it seems to leave a lot to desire but for the task at hand it seems to work pretty well. And best of all I didn&amp;rsquo;t have to create any of it!&lt;/p&gt;
&lt;p&gt;So there it is. The application was created, built and deployed all within the space of a few minutes. Here is a simple REST request&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/REST-codestar-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;REST-Codestar&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;All in all codestar seems like an awesome solution if you are just getting started in AWS solution building like me. It covers a lot of ground and lets you focus on the problem at hand.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cost Of Allocation in High Performance Systems</title>
        <link>https://osada.blog/posts/allocationcost/allocationcost/</link>
        <pubDate>Fri, 05 Feb 2021 08:08:50 +0530</pubDate>
        
        <guid>https://osada.blog/posts/allocationcost/allocationcost/</guid>
        <description>&lt;h2 id=&#34;impact-of-unproductive-work&#34;&gt;Impact of unproductive work
&lt;/h2&gt;&lt;p&gt;In high performance systems we try to make sure we do as little unproductive work as we possible. As Andrei Alexdrascu points out in one of his presentations on the subject, the fastest bit of code is the code that does not run. So it is essential that we try to avoid as much unproductive work as possible.&lt;/p&gt;
&lt;p&gt;When we say unproductive work it usually seems we are talking about unwanted calculations, operations, file access and db access. But this goes beyond that - Any operation that does not directly contribute to calculating the output that your application is responsible for is a waste. This includes GC in garbage collected languages, memory allocation and deallocation in languages with manual memory management languages such as C++&lt;/p&gt;
&lt;h2 id=&#34;memory-is-unessential&#34;&gt;Memory is unessential?
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgflip.com/4wxk03.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Surpised Pikachu&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;No it is essential. But it is a supporting operation. So try not to do it in the critical path. When you know you need memory, allocate it beforehand and reuse what you can. Try and avoid fragmentation as much as you can. There are several ways to do this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Preallocate enough memory and reuse&lt;/li&gt;
&lt;li&gt;Use a smart factory pattern that allows object level reuse&lt;/li&gt;
&lt;li&gt;Use an allocator that reduces cost of memory allocation and deallocation ( eg: &lt;a class=&#34;link&#34; href=&#34;https://google.github.io/tcmalloc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tcmalloc&lt;/a&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;in-practise&#34;&gt;In practise
&lt;/h2&gt;&lt;p&gt;We will use the following code sample to simulate the effect of malloc causing thread contention.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/osadalakmal/e0a3bd5c8f9d27c2de20163fde1c4af9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This allows us to benchmark the completion time for two threads when they are allocating memory vs when they are not. The following is the result when running on my machine&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/perf-with-system-malloc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;system-malloc-perf&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As can be seen there is a significant slow down when two threads are both running malloc at the same time. You can see that the slow down purely due to malloc when running the same two function calls serially is much less when compared to the slow down in threads. This is because by default malloc has to synchronize across threads due to there being a single allocator for the whole program.&lt;/p&gt;
&lt;p&gt;This synchronization causes a delay that exceeds the cost of pure malloc call. Now this can be reduced by using an allocator that performs better in multithreaded applications. One example of this is tcmalloc as explained earlier. Here is the same code running but this time linked against tcmaloc&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/perf-with-system-malloc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;system-malloc-perf&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As can be seen this signiicantly reduces the cost of malloc synchronisations. This is better than using system malloc but still worse than not mallocing at all.&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways
&lt;/h2&gt;&lt;p&gt;Memory management is not essential to produce the out of an application. Since it is an auxilary function, try to keep it away from the critical path at all times. Specially when you are running multithreaded workloads where thread contention due to global locks in malloc become a big bottleneck.&lt;/p&gt;
&lt;p&gt;You can use better allocator if you absolustely have to do allocation in the critical path to do it more efficiently than system malloc&lt;/p&gt;
&lt;p&gt;As always remember to measure. YMMV&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQLite for High Throughput Applications</title>
        <link>https://osada.blog/posts/sqliteperformance/sqliteperformance/</link>
        <pubDate>Sat, 30 Jan 2021 15:27:50 +0530</pubDate>
        
        <guid>https://osada.blog/posts/sqliteperformance/sqliteperformance/</guid>
        <description>&lt;p&gt;SQLite is an embedded SQL Library. This means that It is a single library that you link against and now your application has access to a full blown SQL server within the process itself. It does not need a separate tool to access the database. The database is a single file stored on Disk. It also comes with a binary that can read and manipulate databases&lt;/p&gt;
&lt;h3 id=&#34;when-to-use-sqlite&#34;&gt;When to use SQLite
&lt;/h3&gt;&lt;p&gt;The advise straight from its creator is to use it to replace flat files. This is specially true if you are writing strucutred data that consist of a set of repeated fields. Usually these can be written in any of the human readable formats - XML, JSON, YAML or good old CSV. So what are the advantages of using a sqlite database instead of one of the above?&lt;/p&gt;
&lt;p&gt;The file operations handling is already done for you. Creation, appending, traversing etc are all taken care of. You are just operating on the level of records.&lt;/p&gt;
&lt;p&gt;The record structure is enforced for you&lt;/p&gt;
&lt;p&gt;The database can be exported anywhere and worked with on any platform&lt;/p&gt;
&lt;p&gt;Querying becomes as easy as a SQL query. Any developer worth the title should be able to get at the database and do an initial analysis in just a few minutes. There are excellent Uis to help with this as well&lt;/p&gt;
&lt;p&gt;Interop with other tools is very easy. Generating XML, CSV from any table is just one command line away. Sending data to plotting tools is also one command line away.&lt;/p&gt;
&lt;p&gt;Tips for writing SQLite files in high throughput applications&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Always wrap your inserts in transactions. And batch your inserts together. You may have to adjust how many you batch together depending on your RPO requirements. But in general this allows the database to batch things up to save time on individual inserts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use prepared statements. Since you will be inserting the same record structure again and again, there is no point in running your SQL text through the planner again and again. Use a single prepared statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dont allocate memory for new records. Use transient variable binding so that we dont allocate and deallocate memory for every single insert statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set journal to be in memory. Usually the journal gets written to the disk. If you want to save time on the disk writes you can always force the journal to be in memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the synchronous writes to disk. SQLite will usually fsync after writing to make sure that the data will actually get flushed to the disk controller. We can let the OS determine when it is optimum to flush the data and return without the fsync to save time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page/Cache size. These settings are linked together. Page size determines how much data the process can hold in memory before the OS forces the dirty pages to be flushed to the disk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The Code
&lt;/h3&gt;&lt;p&gt;The full source code for this example can be found in &lt;a class=&#34;link&#34; href=&#34;https://github.com/osadalakmal/sqlite-performance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/osadalakmal/sqlite-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main code is as follows&lt;/p&gt;
&lt;script src=&#34;http://gist-it.appspot.com/http://github.com/osadalakmal/sqlite-performance/blob/main/test.cpp&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;results&#34;&gt;Results
&lt;/h3&gt;&lt;p&gt;The results can be seen here running on my laptop&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://osada.blog/img/sqlite-performance.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;sqlite-performance&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;as you can see starting from a baseline of using just prepared queries we keep adding the options mentioned above. By far the biggest impact seems to be from stopping syncrhonous write to disk for db file.&lt;/p&gt;
&lt;h3 id=&#34;alternatives-to-sqlite&#34;&gt;Alternatives to SQLite
&lt;/h3&gt;&lt;p&gt;There are several reasons that SQLite might not suit your workload.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your data structure might be more suited for KV store. If all you are storing is one opaque value for a given key, a KV store makes definite sense.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might need even more throughput than all the above steps can provide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will need to adjust write amplification/read amplification etc parameters to make sure you fit within the disk budgets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If this sounds like you, a LSM tree based store will be more suited for you. There are several to choose from. Most of them inspired or forked from the original – LevelDB. Examples are MDB, Tokyo cabinet, RocksDB.&lt;/p&gt;
&lt;p&gt;These are based fundamentally on a different set of requirements than SQLite. SQLite was born as a  replacement for SQL Clients that needed to retain SQL interface without the servers being present. LSM Tree based KV stores were written to managed very high sustained rates of writes&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
