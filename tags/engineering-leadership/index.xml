<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Engineering-Leadership on Curiously Recurring Thoughts in Programming</title>
        <link>https://osadalakmal.github.io/tags/engineering-leadership/</link>
        <description>Recent content in Engineering-Leadership on Curiously Recurring Thoughts in Programming</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Tue, 31 Oct 2023 21:18:00 +0000</lastBuildDate><atom:link href="https://osadalakmal.github.io/tags/engineering-leadership/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Lies, Damn Lies and Engineering Metrics</title>
        <link>https://osadalakmal.github.io/posts/lies-damn-lies-and-engineering-metrics/</link>
        <pubDate>Tue, 31 Oct 2023 21:18:00 +0000</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/lies-damn-lies-and-engineering-metrics/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/lies-damn-lies-and-engineering-metrics/banner.jpg" alt="Featured image of post Lies, Damn Lies and Engineering Metrics" /&gt;&lt;h2 id=&#34;tldr-summary&#34;&gt;TL;DR Summary:&lt;/h2&gt;
&lt;p&gt;In the world of engineering, metrics are critical for evaluating performance and progress. But relying on subjective views and opinions can lead to flawed assessments. To determine the effectiveness of engineering practices, we need unbiased and objective metrics. The choice of metrics depends on an organization&amp;rsquo;s specific goals. Metrics should be automated, transparent, and integrated into the culture. Avoid using easily gamed or individual-level metrics. The post also explores DORA and SPACE metrics and emphasizes that there is no one-size-fits-all solution in engineering metrics.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-know-were-good&#34;&gt;How Do We Know We&amp;rsquo;re Good?&lt;/h2&gt;
&lt;p&gt;In engineering, a discipline underpinned by the scientific method, it seems we should always seek validation of our progress using scientific methods. However, in many engineering teams I&amp;rsquo;ve encountered, there is a propensity to rely on phrases like &amp;ldquo;I feel like,&amp;rdquo; &amp;ldquo;I think,&amp;rdquo; and &amp;ldquo;My point of view is.&amp;rdquo; Such subjective views, unconscious biases, and preconceived opinions can skew measurements.&lt;/p&gt;
&lt;p&gt;Presuming that the goal of an engineering management structure is to enable the formation and maintenance of high-performance teams, we need to ask how we will recognize a high-performing team. Some aspects can be measured manually, such as team health and team happiness, through surveys and one-on-one meetings. However, the measurement of the effectiveness of engineering practices requires unbiased and objective metrics. These metrics are the only way we can truly know if our engineering practices are achieving the goals we set out to accomplish.&lt;/p&gt;
&lt;p&gt;Now, whenever metrics are mentioned people tend to get skeptical and usually with good cause. After all as the title alludes to statistics and metrics have been used to dubious effect since they were invented. You may have heard any number of horror stories regarding the misuse of these. However it does not have to be that bad necessarily. Used with prudence these can provide a huge benefit to any software engineering team. That prudence is what I am setting out to put in to words in this blog post.&lt;/p&gt;
&lt;h2 id=&#34;do-we-agree-on-what-blue-is&#34;&gt;Do We Agree on What &amp;ldquo;Blue&amp;rdquo; Is?&lt;/h2&gt;
&lt;p&gt;A meme that originated on Reddit comes to mind. It featured a dress found in a charity or second-hand shop. What made it notable was the debate surrounding its color. The poster thought it was blue, but a significant number of replies argued it was gold. This seemingly simple question, &amp;ldquo;Do we all agree on what blue is?&amp;rdquo; led to a divisive dispute. It may seem strange that a seemingly straightforward matter could be so divisive. After all, defining &amp;ldquo;blue&amp;rdquo; isn&amp;rsquo;t a complex concept; even a preschooler could define it confidently.&lt;/p&gt;



&lt;figure&gt;
    &lt;a href=&#34;https://en.wikipedia.org/wiki/The_dress&#34;&gt;
        &lt;img src=&#34;https://osadalakmal.github.io/posts/lies-damn-lies-and-engineering-metrics/The_dress_blueblackwhitegold.jpg&#34;/&gt; &lt;/a&gt;&lt;figcaption&gt;
                
                    &lt;h4&gt;The controversial dress in question&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This story illustrates how challenging it is to reach a consensus, even on straightforward matters, within a group. Now, imagine trying to measure things like software engineering team or organizational performance and achieve a consensus within your entire organization on whether engineering is doing a good job or not. Let&amp;rsquo;s heed the lesson of the blue/gold dress people!&lt;/p&gt;
&lt;h2 id=&#34;what-do-we-want-to-measure-anyway&#34;&gt;What Do We Want to Measure, Anyway?&lt;/h2&gt;
&lt;p&gt;Before defining the exact metrics, let&amp;rsquo;s consider what qualities of teams we want to measure. While this question seems straightforward, it&amp;rsquo;s fraught with perils for those attempting to answer it. The most important thing to understand is that this is likely to vary from one organization to another. Like many of the best answers, the answer to this question is &amp;ldquo;it depends.&amp;rdquo; The main point to keep in mind is to consider the needs of your business. Unless you&amp;rsquo;re working on a hobby project, any organization, whether it&amp;rsquo;s a business or not, will have goals. Your software engineering team does not operate in isolation but supports the organization&amp;rsquo;s goals.&lt;/p&gt;
&lt;p&gt;For example, if you&amp;rsquo;re working in a charity organization helping vulnerable women in the community, your goals for your systems might include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ease of use and accessibility&lt;/li&gt;
&lt;li&gt;Security and confidentiality&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are top priorities because you serve vulnerable individuals who need help promptly, securely, and without unnecessary effort. Security is paramount because their personal data is stored in the systems, and lives may be at stake. Availability is crucial because helping people is not an optional service; it&amp;rsquo;s a critical service.&lt;/p&gt;
&lt;p&gt;However, if you&amp;rsquo;re working for an e-commerce startup in private beta, your goals might be different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Team velocity&lt;/li&gt;
&lt;li&gt;Bug leakage&lt;/li&gt;
&lt;li&gt;Website performance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your priorities are to ship features quickly and make them fast at any cost. Your company&amp;rsquo;s survival depends on emerging from stealth mode as swiftly as possible.&lt;/p&gt;
&lt;h2 id=&#34;from-objectives-to-metrics&#34;&gt;From Objectives to Metrics&lt;/h2&gt;
&lt;p&gt;In the business world, you&amp;rsquo;ve probably heard of OKRs (Objectives and Key Results). OKRs function similarly. You identify the areas you want your development team to focus on and select representative metrics that signify your work in those areas. Selecting these metrics is as much an art as a science. There are numerous courses available, from LinkedIn Learning and Coursera to Udemy and elsewhere. However, I can offer a couple of pointers specific to the software world.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Select Metrics Directly Correlated with Development Actions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This should be obvious given all the horror stories circulating in the community regarding metrics such as lines of code or bugs closed. Elon Musk famously touted lines of code committed as a measure of developer productivity and was roundly ridiculed for it, quite rightly. &lt;a class=&#34;link&#34; href=&#34;https://waitbutwhy.com/2015/01/artificial-intelligence-revolution-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Here&lt;/a&gt; is an essay where another developer talks about a colleague who was the least productive under this metric. The problem here is selecting a simple one-to-one correlation metric, which will contain all the noise and gaming that can occur in the real world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Select Individual-Level Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Select metrics that you can collectively hold a team responsible for. After all, your goal is to build high-performing teams, not high-performing individuals. There will always be individuals, like in the essay above, who may not directly work on something, but without them, the team would fall far short of the metrics being measured. This would be unfair to those individuals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do Not Choose Targets and Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This departs from the central idea in key results. For key results in OKRs, they are clearly targets to be achieved. However, the problem with targets in the engineering domain is that any metric that becomes a target will end up being gamed. This most famously happens with unit testing coverage metrics. There have been numerous cases of people writing nonsensical &amp;ldquo;unit tests&amp;rdquo; that do not test anything but call all the functions they can fit in so that the coverage target can be gamed. The only effect of this is to increase the amount of code you have to change every time you modify an interface. So, please do not do this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-gets-measured-gets-done&#34;&gt;What Gets Measured Gets Done&lt;/h2&gt;
&lt;p&gt;To measure the chosen metrics, you&amp;rsquo;ll need to put automated facilities in place. Unless the input is human-dependent, it should always be automated. These metrics should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be simple to calculate&lt;/li&gt;
&lt;li&gt;Be always available&lt;/li&gt;
&lt;li&gt;Be transparent&lt;/li&gt;
&lt;li&gt;Be easily verifiable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rationale behind these requirements should be self-evident by now. Without these qualities, you cannot create a pervasive metric-driven culture.&lt;/p&gt;
&lt;h3 id=&#34;people-need-to-know-the-metrics&#34;&gt;People Need to Know the Metrics&lt;/h3&gt;
&lt;p&gt;This information should be easily accessible. It should be included in as many documents as possible, from onboarding documentation for newcomers to the main page of your chosen Wiki or documentation site, be it Confluence, SharePoint, or Asana. There should be no doubt in anyone&amp;rsquo;s mind regarding where to find the metrics.&lt;/p&gt;
&lt;h3 id=&#34;people-need-to-talk-in-terms-of-metrics&#34;&gt;People Need to Talk in Terms of Metrics&lt;/h3&gt;
&lt;p&gt;Ensure that team members, managers, and even senior leaders speak the language of the metrics. They should bring up metrics whenever discussions about team performance arise. Make sure to incorporate metrics into the conversation if someone uses softer language that doesn&amp;rsquo;t explicitly reference relevant metrics. For example:&lt;/p&gt;
&lt;p&gt;Senior Manager: &amp;ldquo;I&amp;rsquo;ve seen that the backend team for the app has done a marvelous job in managing the infrastructure and keeping the app available.&amp;rdquo;&lt;br&gt;
You, as a Team Lead: &amp;ldquo;Absolutely, Jeff, and all the credit should go to my wonderful team who worked diligently to maintain our availability metric at 99.995%, exceeding the target availability of 99.99%. Great work, team!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t correct people but add this as a clarification or elaboration. This is crucial because you want people to ultimately think in terms of the language of the metrics. You want them to think not &amp;ldquo;What will happen if we improve our app&amp;rsquo;s performance?&amp;rdquo; but &amp;ldquo;What will happen if we improve the response time for the main app to an average of 150ms from 200ms.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;the-measurements-have-to-be-transparent-public-and-in-your-face&#34;&gt;The measurements have to be transparent, public and IN YOUR FACE&lt;/h3&gt;
&lt;p&gt;The more pervasive the metric is, the stronger it get&amp;rsquo;s ingrained to peoples minds. I worked in one organization where there was only one metric that mattered. And that metric was everywhere. It was on any number of TV screens scattered across the office. It was on the login screen some days. All big meetings started with that number and the causes of that. The bonus was directly linked to that. There was no ambiguity in where the number came from, what value it had at any given point.&lt;/p&gt;
&lt;p&gt;Same applies to engineering metrics have a single live dashboard where the metric gets displayed and updated in real time. And make sure it is prominently visible in whatever work environment you have. Obviously this will change according if your organization is office based, hybrid or remote only. Whatever the format, make sure that this information is easily accessible.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;This is something I have put together in the past in some of the organizations I have worked with. This mostly emphasizes devops, delivery, and performance metrics. The nature of the business was a mobile application serving a large amount of data. The team was starting to get around to doing their own devops, so this was a big part of the spotlight. Also, we were under tight deadlines to deliver the project, so delivery metrics were crucial. The performance was the biggest ask from the product team, so we added a metric for that as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Objectives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excel at implementing devops practices within the team&lt;/li&gt;
&lt;li&gt;Delivering the project under the agreed deadlines&lt;/li&gt;
&lt;li&gt;Maintain the response times for the app under 300ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lead time for change&lt;/li&gt;
&lt;li&gt;Deployment frequency&lt;/li&gt;
&lt;li&gt;Bug leakage&lt;/li&gt;
&lt;li&gt;Team delivery velocity&lt;/li&gt;
&lt;li&gt;Mean response time on the homepage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We got the sign-off from the project team and then the management for the metrics and created a dashboard containing real-time tracking for the above metrics. The team knew where they stood as well as management and the business.&lt;/p&gt;
&lt;h2 id=&#34;what-about-dora-or-space&#34;&gt;What About DORA or SPACE?&lt;/h2&gt;
&lt;p&gt;A final note about &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DORA&lt;/a&gt; (DevOps Research and Assessment) and SPACE. DORA metrics represent Deployment Frequency (DF), Lead Time for Changes (LT), Time to Restore Service (TRS), and Change Failure Rate (CFR). DORA metrics are widely used to assess the performance of DevOps and Continuous Delivery practices. First of all, the team you are in may not even practice DevOps. And even if you do, you may not want those DORA metrics to be a component of the full team&amp;rsquo;s metric set. You can and should probably use DORA metrics for evaluating your DevOps team&amp;rsquo;s performance if you have such a team. But that does not mean the full organization should be measured on it or that it should form the full criteria upon which you measure the performance of the team.&lt;/p&gt;
&lt;p&gt;SPACE is an emerging framework aimed at evaluating the competencies within software development teams. It stands for Satisfaction &amp;amp; Well-Being, Performance, Activity, Collaboration &amp;amp; Communication, and Efficiency &amp;amp; Flow. SPACE is designed to optimize the team&amp;rsquo;s capabilities and well-being. It looks beyond technical processes to include &amp;lsquo;soft&amp;rsquo; factors like team morale, communication, and overall well-being. Again, it is a good measure if your goal is to create an environment where your teams thrive, innovate, and grow. But it may not directly correspond to business requirements.&lt;/p&gt;
&lt;p&gt;The conclusion in both cases is the same as what Fred Brooks said in his seminal work, &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;The Mythical Man-Month&amp;rdquo;&lt;/a&gt;, there is no silver bullet. There is no one solution that will work in all situations for all teams. Choose the right tool for the job and ignore the current hype.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Stakeholder Management and Alliance Forming</title>
        <link>https://osadalakmal.github.io/posts/stakeholders-and-alliances/</link>
        <pubDate>Sun, 08 Oct 2023 10:51:19 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/stakeholders-and-alliances/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/stakeholders-and-alliances/working-together.jpg" alt="Featured image of post Stakeholder Management and Alliance Forming" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#on-new-beginnings-old-dogs-and-new-tricks&#34;&gt;On new beginnings, old dogs and new tricks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#stakeholder-management&#34;&gt;Stakeholder management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#what-to-keep-in-mind&#34;&gt;What to keep in mind&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#understand-what-motivates-people-understand-what-is-important-to-them&#34;&gt;Understand what motivates people. Understand what is important to them&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#use-this-knowledge-to-make-sure-their-goals-are-alignd-or-at-least-point-in-the-same-direction-as-you&#34;&gt;Use this knowledge to make sure their goals are alignd or at least point in the same direction as you&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#in-the-long-run-if-your-goals-are-not-aligned-the-best-thing-to-do-is-remove-the-need-to-coordination&#34;&gt;In the long run if your goals are not aligned, the best thing to do is remove the need to coordination.&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#alliances&#34;&gt;Alliances&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#actionable-steps&#34;&gt;Actionable Steps&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#last-thoughts&#34;&gt;Last thoughts&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h1 id=&#34;stakeholders-and-alliances&#34;&gt;Stakeholders and Alliances&lt;/h1&gt;
&lt;h2 id=&#34;on-new-beginnings-old-dogs-and-new-tricks&#34;&gt;On new beginnings, old dogs and new tricks&lt;/h2&gt;
&lt;p&gt;It was a couple of years back and I had just embarked on a new role as a Solution Architect and Engineering Manager for a significant program. My responsibilities included overseeing the development of mobile apps and data analytics software. Before officially taking the reins, I faced a pivotal interview with a CXO level senior leader. This role came with hefty responsibilities, overseeing our technical portfolio, including customer-facing software, IT systems, and backend LOB software. It marked a significant transition from my previous roles – from managing single projects to overseeing an entire program.&lt;/p&gt;
&lt;p&gt;Expecting a grueling interview, most questions turned out to be quite straightforward. However, one question caught me off guard. The senior leader asked, &amp;ldquo;Who are your allies in this endeavor?&amp;rdquo; I listed our senior team members: a project manager, business manager, product manager, and operations manager. But that wasn&amp;rsquo;t what the question was about. The senior leader stressed the importance of identifying major stakeholders who had a lot of influence in the stakeholder quadrant—those who played a central role in supporting IT operations.&lt;/p&gt;
&lt;p&gt;It dawned on me that the real challenge lay not with my project team, but with the team responsible for supporting IT operations. The senior leader&amp;rsquo;s message was crystal clear: form an alliance, collaborate closely in the short term, and figure out a way to permanently resolve this bottleneck. This was the missing piece of the puzzle.&lt;/p&gt;
&lt;p&gt;For a brief moment, I felt out of my depth and vulnerable. I was familiar with programming and systems, but this was entirely new territory. Can an old dog learn new tricks?&lt;/p&gt;
&lt;h2 id=&#34;stakeholder-management&#34;&gt;Stakeholder management&lt;/h2&gt;
&lt;p&gt;This led me to go on a whirlwind tour of the subject of stakeholder management. After a few linkedin courses and HBR articles later, I had started to realize the importance of the senior leader who interviewed me said. I was very focused on how my team and I were going to deliver the product that I had lost sight of how important the rest of the organization was to deliver the product.&lt;/p&gt;
&lt;p&gt;This is true in any organization but specially true in larger organizations. There are several departments that specialize in one thing. Which means that to get anything done in such a company you need a few of those organizational units to work together. You may call them departments, divisions etc but whatever the name is the central theme is that in order to do anything useful you have to get them together and work with each other.&lt;/p&gt;
&lt;p&gt;Even in a small organization it is quite likely you will be involved with many functions other than just software development. Everyone from business analysts to delivery management is crucial to developing a software product. In order to make sure the software product gets made according to the project plan then, we need to make sure that all of these people are on the same page about where the project is currently, where you want to get to and how you will get there. And this requires explicit communication and active stakeholder management&lt;/p&gt;
&lt;h2 id=&#34;what-to-keep-in-mind&#34;&gt;What to keep in mind&lt;/h2&gt;
&lt;p&gt;Now I am not going to tell you what stakeholder management is or how to do it. That you can learn from any number of online or offline resources. What I am going to tell you is what you have to keep in mind practically when doing this.&lt;/p&gt;
&lt;h3 id=&#34;understand-what-motivates-people-understand-what-is-important-to-them&#34;&gt;Understand what motivates people. Understand what is important to them&lt;/h3&gt;
&lt;p&gt;This is the most important thing of all. And the textbooks will usually skip this because it may not be acceptable in a corporate environment to admit that not all parts of an oraganization will work towards the same goal. But the simple truth is that they do not.&lt;/p&gt;
&lt;p&gt;Maybe one team lacks the required resources so maybe their focus is on reducing the workload as much as possible so they will have some hope of maintaining a work life balance. Maybe one team is led by someone who is looking for a promotion next year so they are focused on catching all the low hanging fruit they can get their hands on. The motivations differ but the pattern stays the same. Understand the motivation and you understand how to get them to do what you want.&lt;/p&gt;
&lt;h3 id=&#34;use-this-knowledge-to-make-sure-their-goals-are-alignd-or-at-least-point-in-the-same-direction-as-you&#34;&gt;Use this knowledge to make sure their goals are alignd or at least point in the same direction as you&lt;/h3&gt;
&lt;p&gt;This does not necessarily have to mean that you convince them your goals are the best so they should adopt them. This involves creating an incentive structure that ultimately helps your team achieve their goals by providing the necessary support. This might mean making sure they get easier work from you or you work extra hard to make sure you get the news of all of the &lt;em&gt;great work&lt;/em&gt; that they are doing to senior management.&lt;/p&gt;
&lt;p&gt;For example you are working with a cyber security team that has a mandate for making sure that all the systems in the enerprise gets characterized according to the risk level a penetraton would pose. You can make sure you always pre-label your systems to make their job easier. You can help them convince other teams the value of this and evangelize this work. You can create small tools that may help this work. All of this is to make sure that they understand that their goals and yours are aligned.&lt;/p&gt;
&lt;h3 id=&#34;in-the-long-run-if-your-goals-are-not-aligned-the-best-thing-to-do-is-remove-the-need-to-coordination&#34;&gt;In the long run if your goals are not aligned, the best thing to do is remove the need to coordination.&lt;/h3&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/stakeholders-and-alliances/escape.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Escape Hatch!&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The above steps are good as long as there is no long term misalignment between your goals and theirs. But when there are, this means that you will be expending more energy trying to get people to do their own jobs than you are expending energy to do your own job. This is &lt;strong&gt;not a heathy place&lt;/strong&gt; to be.&lt;/p&gt;
&lt;p&gt;This is when you should stop trying to build alliances and just try to move your dependency off that particuar team. This can take the form of outsourcing things done by this particular team currently. This can also mean that you get a new team allocated to you. Perhaps an option is to bring that function in to your team and stop depending on an external team. Whatever form this action takes, the end result must be the same. Your dependency on the external team is removed or reduced so that stakeholder management stops being the obstacle that it has been.&lt;/p&gt;
&lt;p&gt;I have had to do the same when it turned out an IT support team within our organization was incapable of being responsive as much as we wanted them to be. They were responsible for infrastructure provisioning and even though they were on public cloud, provisioning a simple 2 tier app stack took weeks. The reason was were were not the companies main product line and thus features very less in their own KPIs. So we were never a priority for them. Once we outsourced it, we were always the priority since we were paying the bill.&lt;/p&gt;
&lt;h2 id=&#34;alliances&#34;&gt;Alliances&lt;/h2&gt;
&lt;p&gt;Once you have the basic stakeholder management practices in place, it is important to form strategic alliances. These maybe explicit or implicit, it does not really matter. What matters is that you and the other team lead have a common understanding of where you want your mutual organizations to end up in and what each of you are doing in order to achieve that. This kind of partnership allows you to move fast and take decisions that otherwise will have to go through numerous catch ups and sign off meetings. When you have formed an alliance you have an implicit trust put in place that allows you to take a decision almost unilaterally and have your allies interpret this in the best light possible rather than assume worst.&lt;/p&gt;
&lt;p&gt;This is the most important outcome you want. If you get stuck in the quagmire of committee based decision making or you need to run to your common superior every time you need to take a decision, you will not be going anywhere in a hurry. If you are to move fast, you need this essential to be in place.&lt;/p&gt;
&lt;p&gt;And there is one very important side effect of this - now you have a rant buddy. Day not going well - rant to your ally. Latest strategic plan stuck in committee - rant to your ally. You can do this safely in the knowledge that as long as you both agree on the goals of your organization, you can complain about not achieving your goals to each other. Considering how lonely team leaderships and management positions can be, this can be a lifeline!&lt;/p&gt;
&lt;h2 id=&#34;actionable-steps&#34;&gt;Actionable Steps&lt;/h2&gt;
&lt;p&gt;To effectively implement stakeholder management and alliance building, consider the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Stakeholders&lt;/strong&gt;: Understand, identify, and list down the key stakeholders who matter to your team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define Their Goals&lt;/strong&gt;: List the goals and objectives of these stakeholders to gain a better understanding of their priorities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initiate Communication&lt;/strong&gt;: Schedule an initial catch-up meeting with stakeholders to ensure alignment and confirm their goals. Ask open-ended questions like, &amp;ldquo;Is this still a priority for your team? How can we assist in achieving it?&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communicate Internally&lt;/strong&gt;: Share the updated stakeholder goals and details with other senior team members to ensure everyone is on the same page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strategic Planning&lt;/strong&gt;: Determine your future actions using an appropriate stakeholder management model or framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps, you&amp;rsquo;ll be well-prepared to navigate the complex world of stakeholder management and build effective alliances for your organization&amp;rsquo;s success.&lt;/p&gt;
&lt;h2 id=&#34;last-thoughts&#34;&gt;Last thoughts&lt;/h2&gt;
&lt;p&gt;Stakeholder management is a complex and intricate subjects. There are all kinds of academic theories of how this is supposed to work - from &lt;a class=&#34;link&#34; href=&#34;https://www.researchgate.net/publication/220920774_A_Better_Fit_-_Characterising_the_Stakeholders&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;onion diagrams&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://www.pmi.org/learning/library/stakeholder-analysis-pivotal-practice-projects-8905&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;quadrant based analysis&lt;/a&gt;. It does not really matter which model you use to start with as long as&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you understand the need to stakeholder management and alliance building&lt;/li&gt;
&lt;li&gt;you do not hold dogmatically on to one model&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have above two traits, you are set to navigate this complex subject space and put what you have learned to use.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Engineering Standards in Teams</title>
        <link>https://osadalakmal.github.io/posts/engineering-standards-in-teams/</link>
        <pubDate>Mon, 11 Sep 2023 01:38:25 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/engineering-standards-in-teams/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/engineering-standards-in-teams/scott-graham-5fNmWej4tAA-unsplash.jpg" alt="Featured image of post Engineering Standards in Teams" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#healthy-conflict-and-unhelpful-distractions&#34;&gt;Healthy conflict and unhelpful distractions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#how-to-do-engineering-standards-right&#34;&gt;How to do Engineering standards right&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#establish-trust&#34;&gt;Establish Trust&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#optimize-workflow&#34;&gt;Optimize Workflow&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#so-how-would-i-start-implementing-engineering-standards&#34;&gt;So how would I start implementing engineering standards?&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#slowly&#34;&gt;Slowly&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deliberately&#34;&gt;Deliberately&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#with-purpose&#34;&gt;With purpose&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of my best friends, who I first met in a previous job, called me one evening. For now, let&amp;rsquo;s call him Jake. He is the calmest person I have ever met. And if you know me, I am usually the farthest from calm of any of us, comfortably bubbling between enthusiasm and dejection with alarming frequency. But on this day, Jake seems a bit shaken. He wants my input on something. He is having some troubles at work with a colleague who started new in his team. They are working on something that is novel to Jake, but he is starting to feel like his new colleague, let&amp;rsquo;s call him Mike, does not know much about the fundamentals of the tech even though he is supposed to. They have just had a disagreement regarding the proper use of the standard libraries and the language they are using, and it turns out Jake was right. He wants to know how he might best handle the situation. We talk for a while, I listen for the most part and we settle on a course of action that we think will resolve the issue. But this gets me thinking - why did this situation arise in the first place.&lt;/p&gt;
&lt;h2 id=&#34;healthy-conflict-and-unhelpful-distractions&#34;&gt;Healthy conflict and unhelpful distractions&lt;/h2&gt;
&lt;p&gt;Conflict in teams do not have to be a siren announcing doom and gloom (And this is coming from Brené Brown and I promise you will not regret reading her take on it &lt;a class=&#34;link&#34; href=&#34;https://www.amazon.com/dp/0812995848&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;). In fact most of the time we can even turn conflict in to an asset - it can create more engagement, it serves as a barometer of people&amp;rsquo;s involvement. I am not advocating for a management style that tries to avoid conflict at all cost. But there are times when conflict is not helpful, especially when the issue at hand is debate on facts that are already well established.&lt;/p&gt;
&lt;p&gt;I have been in pretty heated debates about language-related things like coding styles and linters. They were fun, very revealing about our values as a team, and I would dive headfirst into the next one without any hesitation. But the problem with the debate Jake was having was it was about fundamentals like the proper use of visibility modifiers. There is no debate about these, and there should not have been one. These are matters that define the engineering excellence policies a team should be following. Unlike say a ways of working based conflict, this does not really need discretion or consideration of individual preferences - engineering excellence is a policy decision.&lt;/p&gt;
&lt;p&gt;This is where engineering standards come in. Once established, they allow your team to focus on delivering value to your customers instead of getting embroiled in issues that can be routinely handled by established guidance. They save your team from having unnecessary conflict and expending time on resolving those. And they allow you to deliver things faster because the team can offload that to various degrees of automation and concentrate on other things. They make for great quality software because now you deliver consistently good software, and they are more likely to be bug-free (Note that this is not a given. We have all seen enough AbstractSingletonProxyFactoryBean classes riddled with bugs).&lt;/p&gt;
&lt;h2 id=&#34;how-to-do-engineering-standards-right&#34;&gt;How to do Engineering standards right&lt;/h2&gt;
&lt;p&gt;The common complaint from engineers against engineering standards is - &lt;em&gt;But they stifle creativity!&lt;/em&gt;. Yes, they do. And that is kind of the point. &lt;em&gt;Insert Evil Laugh&lt;/em&gt;.&lt;br&gt;
More seriously, they are not there to stifle creativity but to perform two very important tasks in a high-functioning team.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Establish trust.&lt;/li&gt;
&lt;li&gt;Optimize workflow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You sure can use enforcing standards to stifle creativity, and we have seen it happen at one time or another. This is how we get rules like all the data must always access through explicitly written accessors, and &lt;a class=&#34;link&#34; href=&#34;https://openjdk.org/jeps/395&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;record types&lt;/a&gt; get banned. But sensibly applied, engineering standards will do the two functions above without stifling creativity. In fact, I would argue that this is the test of good engineering standards - do they enable the above while allowing developers to develop innovative solutions to the product problems they have. Understand that dogma is not helpful and pragmatism is the key!&lt;/p&gt;
&lt;h3 id=&#34;establish-trust&#34;&gt;Establish Trust&lt;/h3&gt;
&lt;p&gt;How do engineering standards establish trust among folks in a high-functioning team? Because this gives a baseline quality and shape to the codebase. It is well established that any code above a few hundred lines will take a significant amount of time to digest and understand. Now expand that fact to the usual technical estate found in today&amp;rsquo;s typical workplace where tens of microservices each worth a few thousand lines of code is a common sight. If you cannot make simple assumptions about the fundamental aspects of the codebase, the only way to interact with the codebase becomes working with it until you have familiarized yourself with all aspects of it, and this might take years. That is a nightmare scenario for Team Leads such as myself. This means the time to be productive is years for folks making both them and us frustrated.&lt;/p&gt;
&lt;p&gt;If you can assume certain fundamentals always hold true, then this becomes much easier. You are free to concentrate on the things built up from this baseline only, leaving a much less cognitive load on you. This gives you assurance that all of your team knows and takes care to follow these standards. Suddenly, they are not strangers in the code land - they are fellow travelers on your journey to a better product who share your coding values and ideas. You all agree on fundamentals, and you are assured there will be no nasty surprises were you to undertake some significant work together. This shared identity is the first step in building team trust.&lt;/p&gt;
&lt;h3 id=&#34;optimize-workflow&#34;&gt;Optimize Workflow&lt;/h3&gt;
&lt;p&gt;In agile teams, we talk about how to optimize our workflow and specifically in Kanban, there is an emphasis on increasing flow. The way to do this seems to be by making sure we reduce handover and context required. Engineering standards make sure that there is no new information required to handle tasks beyond the specific business value the tasks deliver. Take a team that has standardized on using Redis as a KV store for intra-service caching, for example. Imagine there is a team-specific client library for interacting with the Redis cluster for that microservice. Now, if there was no standard, and it was a custom component that talked to the Redis cluster, you will have to read through and understand everything about how Redis gets used in there, from &lt;code&gt;AUTH&lt;/code&gt; statements to if pipelining is used. But with the team-specific client, you can limit your understanding to the client interface, and it is reusable across any other microservices. If the credentials come from environment variables, they always come from the same ones, etc.&lt;/p&gt;
&lt;p&gt;This allows your team members to concentrate on delivering the actual business value instead of worrying about tangential technical matters.&lt;/p&gt;
&lt;h2 id=&#34;so-how-would-i-start-implementing-engineering-standards&#34;&gt;So how would I start implementing engineering standards?&lt;/h2&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/engineering-standards-in-teams/nick-abrams-FTKfX3xZIcc-unsplash.jpg&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Slow and Steady&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;Slowly.&lt;/li&gt;
&lt;li&gt;Deliberately.&lt;/li&gt;
&lt;li&gt;With purpose.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;slowly&#34;&gt;Slowly&lt;/h3&gt;
&lt;p&gt;Go slow. Start by introducing a limited set of standards, focusing on the most critical areas of improvement. This gradual rollout allows the team to adjust to the changes and provides the opportunity to gather feedback and make adjustments as needed. It&amp;rsquo;s essential to balance the pace of implementation with the team&amp;rsquo;s capacity to adapt, ensuring that they can embrace the standards comfortably without feeling overwhelmed. Remember you are not in a race; it is not about being the first to implement these standards.&lt;/p&gt;
&lt;h3 id=&#34;deliberately&#34;&gt;Deliberately&lt;/h3&gt;
&lt;p&gt;Each step in the implementation process should be well-thought-out and intentional. Deliberation involves careful planning, clear communication, and a thorough understanding of the objectives and potential impacts of the standards. Take the time to assess the current state of the team, identify pain points and areas for improvement, and create a roadmap for introducing standards. When changes are deliberate, they are more likely to be effective and accepted by the team. Understand that a team requires a &amp;ldquo;why&amp;rdquo; more than they will ever need a &amp;ldquo;how.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;with-purpose&#34;&gt;With purpose&lt;/h3&gt;
&lt;p&gt;The implementation of engineering standards should have a clear purpose and align with the overall goals and values of the organization. Define the specific problems or challenges that the standards aim to address, whether it&amp;rsquo;s improving code quality, enhancing collaboration, or meeting compliance requirements. Ensure that the team understands the purpose behind the standards, as this helps motivate and engage team members in the process. Having a well-defined purpose also allows you to measure the success and impact of the standards against your intended outcomes. Always make sure that the overall vision for your team aligns well with whatever engineering standards you are trying to instill.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Broken Window Theory in Software Teams</title>
        <link>https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/</link>
        <pubDate>Sun, 03 Sep 2023 10:51:19 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/broken-windows.jpg" alt="Featured image of post Broken Window Theory in Software Teams" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#key-concepts&#34;&gt;Key Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practical-application&#34;&gt;Practical Application&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#impact-and-controversies&#34;&gt;Impact and Controversies:&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins&lt;/h2&gt;
&lt;p&gt;The Broken Windows Theory emerged in the early 1980s as a response to the rising concerns about crime and urban decay in American cities. James Q. Wilson, a prominent social scientist, and George L. Kelling, a criminologist, co-authored an article titled &amp;ldquo;Broken Windows: The Police and Neighborhood Safety,&amp;rdquo; which was published in the Atlantic Monthly in 1982.&lt;/p&gt;
&lt;h3 id=&#34;key-concepts&#34;&gt;Key Concepts&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Visible Signs of Disorder: Wilson and Kelling proposed that visible signs of disorder in neighborhoods, such as broken windows, graffiti, or litter, create an environment that fosters crime. They argued that when one broken window in a building goes unrepaired, it sends a signal that no one cares about the area, leading to more windows breaking and an overall sense of neglect.&lt;/li&gt;
&lt;li&gt;Quality-of-Life Policing: The authors advocated for a shift in policing strategies from solely focusing on serious crimes to addressing low-level offenses and maintaining order in communities. They emphasized that addressing minor infractions and maintaining a sense of order would prevent the emergence of more serious criminal behavior.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;practical-application&#34;&gt;Practical Application&lt;/h3&gt;
&lt;p&gt;The practical application of the Broken Windows Theory led to significant changes in law enforcement and community policing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Community Policing: Police departments began adopting community policing strategies, which involved officers engaging with the community, building relationships, and addressing quality-of-life issues. This approach aimed to create a sense of partnership between law enforcement and residents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crime Mapping and Data Analysis: Law enforcement agencies started using data analysis and crime mapping to identify areas with high levels of disorder and crime. This allowed them to allocate resources more effectively and target specific problem areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community Engagement: Beyond law enforcement, the Broken Windows Theory inspired community organizations and local governments to take an active role in neighborhood revitalization. Cleanup initiatives, graffiti removal programs, and neighborhood watch groups aimed to address visible signs of disorder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that there were other practices that took inspiration from this theory ( such as zero tolerance policies ). I do not discuss them as I do not believe they resulted in a net positive for the society. If anything blanket policies like that has a disproportionate impact on the minorities and exacerbates problems. Therefore we will discuss what we believe are the policies that actually made a difference here.&lt;/p&gt;
&lt;h3 id=&#34;impact-and-controversies&#34;&gt;Impact and Controversies:&lt;/h3&gt;
&lt;p&gt;While there were clear benefits where this theory was applied, the practical application of the Broken Windows Theory has been both praised and criticized. While some attribute reductions in crime rates to its implementation, others argue that it can lead to over-policing and the criminalization of minor offenses, disproportionately affecting marginalized communities. Additionally, the theory&amp;rsquo;s effectiveness in addressing serious crime remains a subject of debate. Having said all of that we can all agree I think that intuitively this idea holds water.&lt;/p&gt;
&lt;h2 id=&#34;software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour&lt;/h2&gt;
&lt;p&gt;What does all of this sociological theories have to do with software engineering you say? Well, unruliness have the same effect on software engineering systems. Think of it this way, if your technical estate is a street, then missing unit tests, no consistent styling, and other little things that may correspond to a broken window. And these indicate to your team that you no longer really care about these things. This means the team values, however you may have promoted them before, no longer really applies and are no longer important to the team&amp;rsquo;s management.&lt;/p&gt;
&lt;p&gt;Signaling within a team refers to the deliberate actions and behaviors of leaders that convey their intentions, values, and expectations to team members. These signals are pivotal in influencing team dynamics and guiding individual behavior. Leaders employ both explicit and implicit forms of communication. Explicitly, leaders use clear verbal communication to articulate their objectives, mission, and guidelines. Implicitly, their actions and decisions send strong signals. For example, a leader who consistently exhibits dedication and punctuality sets a precedent for the team. Leadership signals extend to decision-making. Choices regarding resource allocation or project priorities convey the leader&amp;rsquo;s priorities and strategic direction, directly affecting team perceptions.&lt;/p&gt;
&lt;p&gt;When the signalling within the team indicates implicitly by the way of no resource allocation to addressing &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; or explicitly by dictating that &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; are too unimportant to address, the leadership seems to communicate that these are not pivotal to the engineering standards of a team. That in turn leads the team to read in between the lines and doubt where exactly then is the proverbial line in the sand? How much can they let the engineering standards lax before the leadership holds them to account?&lt;/p&gt;
&lt;h2 id=&#34;so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?&lt;/h2&gt;
&lt;p&gt;And this is the most important point - you need to communicate the expectation to the team. Lack of standard for the one Rust program within the full Java based technical estate does not constitute a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. Consistency in communication and expectation setting matters a lot here. If your team&amp;rsquo;s primary language is C# and you do not have a style guide for it, then there is potential for trouble. If people apply different rules in different contexts leading to inconsistency and you do not intervene, then it becomes a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. There is no hard and fast rule here I think. Use your judgement for the most part but simple few criteria should help you out for the most part&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the issue in question apply broadly across your technical estate? If so it probably is significant enough&lt;/li&gt;
&lt;li&gt;Had you previously communicated that the issue in hand is important enough to have a team-wide consensus?&lt;/li&gt;
&lt;li&gt;Is the excellence or following the best practice in the aspect in question a priority for your wider organization? If so, yes it probably will be a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?&lt;/h2&gt;
&lt;p&gt;There are lots of reasons I can list but the following would probably be the top of the list&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cultural Significance: Just as the Broken Window Theory suggests that neglecting visible signs of disorder can create a culture of apathy, allowing cosmetic issues to persist in a codebase or development process can set a precedent for a lack of attention to detail. Over time, this can erode the team&amp;rsquo;s commitment to engineering excellence and high standards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attention to Detail: Software engineering thrives on precision and meticulous attention to detail. Addressing cosmetic issues demonstrates a commitment to getting the small things right. It sends a message that the team values craftsmanship and is dedicated to delivering high-quality software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preventing Technical Debt: Cosmetic issues, if left unaddressed, can accumulate and contribute to technical debt. Technical debt refers to the cost of fixing issues and improving code quality that accrues over time when shortcuts are taken or issues are ignored. By tackling visible but cosmetic issues early, teams can prevent the accumulation of technical debt and maintain a codebase that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Quality and Maintainability: Cosmetic issues, such as inconsistent formatting or poor documentation, can make code less readable and maintainable. This can slow down development and increase the likelihood of introducing bugs during future changes. By addressing these issues, teams ensure that the codebase remains clean, comprehensible, and easier to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhancing Collaboration: Clear and well-maintained code fosters effective collaboration among team members. When everyone can easily understand and work with the code, it reduces the risk of misunderstandings and conflicts. It also allows for smoother code reviews and knowledge sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Professionalism and Customer Perception: Software engineering is a professional discipline, and professionalism extends to the quality of the work produced. Visible cosmetic issues can detract from the professional image of the team and the organization as a whole. Additionally, customers and end-users often judge software quality by its visible aspects, such as user interface design and consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous Improvement: Addressing cosmetic issues is an integral part of a culture of continuous improvement. Teams that are committed to excellence understand that improvement starts with the small details. By consistently addressing these details, teams set themselves up for a cycle of improvement that extends to all aspects of their work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see I may have stolen some talking points from the agile manifesto there. This is not an oversight - I truly do believe in agile teams it is very important that we keep up the engineering excellence lest we lose sight of the trees for the forest and sacrifice technical excellence for business value.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Addressing visible but cosmetic issues is not merely about aesthetics; it&amp;rsquo;s about maintaining a culture of engineering excellence, professionalism, and continuous improvement within a software engineering team. By valuing and addressing these issues, teams can prevent the deterioration of code quality, foster collaboration, and ultimately deliver software that meets high standards and exceeds customer expectations.&lt;/p&gt;
&lt;p&gt;Note :&lt;br&gt;


Photo by &lt;a href=&#34;https://unsplash.com/@christopherphigh?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Christopher Paul High&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/Iv7x6fmJ8Og?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Empathy and Respect in Software Engineering Teams: Actions for a Team Lead</title>
        <link>https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/</link>
        <pubDate>Tue, 29 Aug 2023 00:51:19 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/empathy-banner.jpg" alt="Featured image of post Empathy and Respect in Software Engineering Teams: Actions for a Team Lead" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the world of software engineering, where we mostly think about systems and platforms, where success is measured in SLOs and RPSs there are two things that are crucial to the teams that actually build these software systems: empathy and respect. These two qualities might not be lines of code or algorithms, but they are the heartbeat of cohesive and innovative software engineering teams. This is why it is important for software engineering managers and team leads to be aware of them even though they are not hard technical matters.&lt;/p&gt;
&lt;p&gt;Empathy is the ability to step into another person&amp;rsquo;s shoes and understand their feelings, thoughts, and experiences. It&amp;rsquo;s a nod to the fact that each one of us brings a unique perspective, and by understanding that perspective, we unlock the potential for deeper connections and more meaningful collaborations. Empathy acknowledges that behind every line of code is a coder – someone with aspirations, ideas, and the occasional cup of coffee.&lt;/p&gt;
&lt;p&gt;Respect, on the other hand, is the recognition that every individual, regardless of their role or level of expertise, carries inherent value. It&amp;rsquo;s the understanding that differing opinions aren&amp;rsquo;t roadblocks but rather pathways to better solutions. Respect acknowledges that the act of listening can sometimes be as powerful as typing out a thousand lines of code.&lt;/p&gt;
&lt;p&gt;While empathy is about understanding, respect is about honoring. When these two qualities intertwine, they create a synergy that fuels teams with trust, collaboration, and innovation. Empathy opens the door for open conversations, while respect ensures that those conversations are met with genuine consideration. And fostering good communication is at the centre of building high performance teams&lt;/p&gt;
&lt;h2 id=&#34;putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams&lt;/h2&gt;
&lt;p&gt;But what does that have to do with what we do in our day to day work in our engineering teams? The above descriptions seem quite theoretical and abstract. How can we actually put these in to practice in our day to day work. Let&amp;rsquo;s take a few examples&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Story Refinement:&lt;/p&gt;
&lt;p&gt;Empathy: Understanding the end user&amp;rsquo;s perspective is at the core of story refinement. By putting yourself in the user&amp;rsquo;s shoes, you can ensure that the software you&amp;rsquo;re building meets their needs effectively. This goes twice for backend engineers such as my own team. We like to think that we have less user experience concerns because our clients are not direct customer but other development teams. In truth this is even more important because if we do not design a good, developer friendly, usable API, we will be putting other developers in to unnecessary hardships.&lt;br&gt;
Respect: Respect for diverse viewpoints during story refinement allows for a well-rounded understanding of the problem. Every perspective contributes to a more comprehensive solution. Understand that product owners, UX designers, Data Engineers and various other teams will come at a problem from their own viewpoints. They each bring their own ideas to the table and make sure to consider them all in equal weight so as not to dismiss any ideas out of hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coding:&lt;/p&gt;
&lt;p&gt;Empathy: While coding, empathy is about considering future maintainers. Writing clean, organized code makes it easier for your teammates to understand and collaborate. Remember the old quip - &lt;a class=&#34;link&#34; href=&#34;http://c2.com/cgi/wiki?CodeForTheMaintainer=&amp;amp;ref=blog.codinghorror.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.&amp;rdquo;&lt;/a&gt;.&lt;br&gt;
Respect: Respect for coding standards and conventions maintains consistency across the codebase, making it accessible to everyone who interacts with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Reviews:&lt;/p&gt;
&lt;p&gt;Empathy: During code reviews, empathy involves understanding that mistakes happen. Providing feedback in a constructive and considerate manner promotes a positive learning environment. Make sure to let the team members know that the comments are about making their skills better and making the product better.&lt;br&gt;
Respect: Respectful code reviews acknowledge the effort that went into the code and offer suggestions for improvement without undermining the coder&amp;rsquo;s skills. Understand that the you should make an equal effort to make sure they get good feedback. Make sure they feel good about them when they have done a good job as well. Too often people only offer criticism and while that is important, you should let them know when they have done a good job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build and Release:&lt;/p&gt;
&lt;p&gt;Empathy: In the build and release process, empathy means considering the impact of your changes on other team members and downstream processes. More often than not, when doing releases, we are more concerned about getting the application out and hitting our deadlines. But good practice calls for coordination and advance notification. If you have operations teams - let them know in advance, make a summary of changes and distribute it. If you have folks who are on call in the team, include them in the communications. And most importantly for backend teams (again like my own team!), let the downstream clients know and give them a chance to verify the changes, preferably with you standing by to help if required.&lt;br&gt;
Respect: Respect for the release process and schedule ensures that the efforts of all team members are aligned, minimizing disruptions. Make the necessary changes to allow for other team&amp;rsquo;s practices and conventions. If you need to change things, talk to the other teams, most of the time they will be willing to budge or compromise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Empathy and respect aren&amp;rsquo;t limited to a single activity; they infuse every aspect of software engineering. By understanding each other&amp;rsquo;s roles, appreciating diverse viewpoints, and valuing the collective efforts, software engineers can create a harmonious ecosystem where innovation flourishes and collaboration thrives. So, as you embark on your coding journey, remember that behind every line of code is a world of empathy and respect.&lt;/p&gt;
&lt;h2 id=&#34;the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead&lt;/h2&gt;
&lt;p&gt;As a software engineering team lead, you&amp;rsquo;re not just responsible for managing code; you&amp;rsquo;re entrusted with cultivating an environment where empathy and respect flourish. Your role goes beyond technical guidance, encompassing the creation of a team culture that prioritizes these foundational values. Here&amp;rsquo;s how you can play a pivotal role in fostering a culture centered around empathy and respect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lead by Example:&lt;br&gt;
Demonstrate empathetic and respectful behavior in all your interactions. Your actions set the tone for the entire team. If you do not show empathy and respect in practice, your team will not either.&lt;/li&gt;
&lt;li&gt;Encourage Open Communication:&lt;br&gt;
Promote transparent and open communication channels, encouraging team members to share their perspectives and insights freely. There can be no empathy if people are not openly communicating how they feel. Your team should be able to communicate the need for improved software quality, improved processes and better software engineering culture without feeling like they are personally targeting anyone. Equip them to communicate these ideas properly, and as it says above, lead by example.&lt;/li&gt;
&lt;li&gt;Address Imposter Syndrome:&lt;br&gt;
Provide resources and guidance to help team members navigate imposter syndrome. Offer a support system to bolster confidence and self-assurance. This is crucial in practice I have found. Engineers from more diverse and varied backgrounds often feel like they do not belong and are not worth the position and role they find themselves in. I, myself have gone through this early in my career. As a software team lead it is your responsibility to identify this, and make sure they know their worth and capability. Tell them that having a self respect for their own capability is the first step towards making the team better by using their skills. If they do not feel empowered and compelled to make the team better using their skills, it is game over already.&lt;/li&gt;
&lt;li&gt;Embrace Diversity:&lt;br&gt;
Recognize the significance of diverse viewpoints. Embrace the unique qualities that each team member brings to the table. If your team does not have diverse opinions, take corrective action. Hire for diversity, offer coaching, reward contrary and diverse viewpoints - because homogeneous thinking never improved any team.&lt;/li&gt;
&lt;li&gt;Navigate Conflicts with Empathy:&lt;br&gt;
Address conflicts with empathy and fairness, ensuring that all voices are heard and understood during resolution. As a team leader, the onus will be on you to solve most of the team internal conflicts as well and external conflicts with other teams. Always understand, where they come from and remind yourself that whatever the problem at hand is, all of you are on the same team and have the same goal - make the product better.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your role as a team lead extends far beyond the technical realm. By nurturing a culture steeped in empathy and respect, you lay the foundation for a cohesive, innovative, and high performance software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering&lt;/h2&gt;
&lt;p&gt;This kind of emphasis is getting quite frequent in software engineering field these days. Take spotify for an example. They have released a developer portal generating tool called backstage and on the &lt;a class=&#34;link&#34; href=&#34;https://engineering.atspotify.com/2022/12/shipping-spotifys-culture-5-plugins-and-4-principles-for-supercharging-developer-experience-at-scale/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post announcing the tool&lt;/a&gt;, they list four principles that they want the users of that tool to follows. They themselves follow the principles as well&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 4. Our fellow developers are our customers, so build with empathy
&amp;gt; 
&amp;gt; Developers deserve as great an experience as our listeners and creators do. 
&amp;gt; Ensure that the tools in the Spotify platform are the right tools for the job — and listen and adapt when they aren’t. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And clever says something similar about their engineering culture as well. Here is a &lt;a class=&#34;link&#34; href=&#34;https://engineering.clever.com/2017/09/06/defining-clevers-engineering-culture/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post&lt;/a&gt; explaining how they value empathy. To quote the interesting bits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Code with Empathy

&amp;gt; We develop software with our customers and our fellow engineers in mind. To gain empathy for our customers, we embed product managers within engineering teams so they may work closely together. We also encourage engineers to participate in product specifications, user testing, and school visits. We choose to write code that is readable over code that is clever or terse, to help our colleagues and future selves read and update the code. We value simplicity as a key ingredient in  software architecture and implementation, as simple systems are easier to maintain, debug, and operate.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is again repeated in various places from &lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/presentations/empathy-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;infoq&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/empathy-secret-sauce-good-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;newstack&lt;/a&gt;. But the common theme is the same. Empathy is a key ingredient in a high performing software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Remember Empathy is not just a feeling. It is a core part of what makes good teams perform better. It is the thing that keeps the members together and work as a team. What makes the whole greater than the sum of it&amp;rsquo;s parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Respect Enhances Empathy: When you respect someone, you are more likely to listen actively and engage with an open mind. This can lead to a deeper understanding of their feelings and viewpoints, fostering empathy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empathy Deepens Respect: Empathy allows you to see things from another person&amp;rsquo;s perspective, which can lead to a greater appreciation for their uniqueness and the challenges they might be facing. This, in turn, strengthens the respect you have for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Support Positive Relationships: Building relationships based on both respect and empathy creates an environment of trust, understanding, and support. It promotes effective communication and reduces misunderstandings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Counter Conflict: In conflicts or disagreements, both respect and empathy can play essential roles in defusing tension. Showing respect even during disagreements and trying to understand the other person&amp;rsquo;s perspective can prevent conflicts from escalating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, respect and empathy are interconnected values that contribute to healthier and more compassionate interactions. Practicing both in your relationships can lead to better communication, reduced misunderstandings, and a more harmonious environment overall.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
