<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>engineering-culture on Curiously Recurring Thoughts in Programming</title>
        <link>https://osadalakmal.github.io/tags/engineering-culture/</link>
        <description>Recent content in engineering-culture on Curiously Recurring Thoughts in Programming</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Sun, 03 Sep 2023 10:51:19 +0100</lastBuildDate><atom:link href="https://osadalakmal.github.io/tags/engineering-culture/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Broken Window Theory in Software Teams</title>
        <link>https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/</link>
        <pubDate>Sun, 03 Sep 2023 10:51:19 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/broken-window-theory-in-software-teams/broken-windows.jpg" alt="Featured image of post Broken Window Theory in Software Teams" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#key-concepts&#34;&gt;Key Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practical-application&#34;&gt;Practical Application&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#impact-and-controversies&#34;&gt;Impact and Controversies:&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;broken-window-theory---origins&#34;&gt;Broken Window Theory - Origins&lt;/h2&gt;
&lt;p&gt;The Broken Windows Theory emerged in the early 1980s as a response to the rising concerns about crime and urban decay in American cities. James Q. Wilson, a prominent social scientist, and George L. Kelling, a criminologist, co-authored an article titled &amp;ldquo;Broken Windows: The Police and Neighborhood Safety,&amp;rdquo; which was published in the Atlantic Monthly in 1982.&lt;/p&gt;
&lt;h3 id=&#34;key-concepts&#34;&gt;Key Concepts&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Visible Signs of Disorder: Wilson and Kelling proposed that visible signs of disorder in neighborhoods, such as broken windows, graffiti, or litter, create an environment that fosters crime. They argued that when one broken window in a building goes unrepaired, it sends a signal that no one cares about the area, leading to more windows breaking and an overall sense of neglect.&lt;/li&gt;
&lt;li&gt;Quality-of-Life Policing: The authors advocated for a shift in policing strategies from solely focusing on serious crimes to addressing low-level offenses and maintaining order in communities. They emphasized that addressing minor infractions and maintaining a sense of order would prevent the emergence of more serious criminal behavior.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;practical-application&#34;&gt;Practical Application&lt;/h3&gt;
&lt;p&gt;The practical application of the Broken Windows Theory led to significant changes in law enforcement and community policing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Community Policing: Police departments began adopting community policing strategies, which involved officers engaging with the community, building relationships, and addressing quality-of-life issues. This approach aimed to create a sense of partnership between law enforcement and residents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crime Mapping and Data Analysis: Law enforcement agencies started using data analysis and crime mapping to identify areas with high levels of disorder and crime. This allowed them to allocate resources more effectively and target specific problem areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community Engagement: Beyond law enforcement, the Broken Windows Theory inspired community organizations and local governments to take an active role in neighborhood revitalization. Cleanup initiatives, graffiti removal programs, and neighborhood watch groups aimed to address visible signs of disorder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that there were other practices that took inspiration from this theory ( such as zero tolerance policies ). I do not discuss them as I do not believe they resulted in a net positive for the society. If anything blanket policies like that has a disproportionate impact on the minorities and exacerbates problems. Therefore we will discuss what we believe are the policies that actually made a difference here.&lt;/p&gt;
&lt;h3 id=&#34;impact-and-controversies&#34;&gt;Impact and Controversies:&lt;/h3&gt;
&lt;p&gt;While there were clear benefits where this theory was applied, the practical application of the Broken Windows Theory has been both praised and criticized. While some attribute reductions in crime rates to its implementation, others argue that it can lead to over-policing and the criminalization of minor offenses, disproportionately affecting marginalized communities. Additionally, the theory&amp;rsquo;s effectiveness in addressing serious crime remains a subject of debate. Having said all of that we can all agree I think that intuitively this idea holds water.&lt;/p&gt;
&lt;h2 id=&#34;software-engineering-as-a-social-endeavour&#34;&gt;Software Engineering as a Social Endeavour&lt;/h2&gt;
&lt;p&gt;What does all of this sociological theories have to do with software engineering you say? Well, unruliness have the same effect on software engineering systems. Think of it this way, if your technical estate is a street, then missing unit tests, no consistent styling, and other little things that may correspond to a broken window. And these indicate to your team that you no longer really care about these things. This means the team values, however you may have promoted them before, no longer really applies and are no longer important to the team&amp;rsquo;s management.&lt;/p&gt;
&lt;p&gt;Signaling within a team refers to the deliberate actions and behaviors of leaders that convey their intentions, values, and expectations to team members. These signals are pivotal in influencing team dynamics and guiding individual behavior. Leaders employ both explicit and implicit forms of communication. Explicitly, leaders use clear verbal communication to articulate their objectives, mission, and guidelines. Implicitly, their actions and decisions send strong signals. For example, a leader who consistently exhibits dedication and punctuality sets a precedent for the team. Leadership signals extend to decision-making. Choices regarding resource allocation or project priorities convey the leader&amp;rsquo;s priorities and strategic direction, directly affecting team perceptions.&lt;/p&gt;
&lt;p&gt;When the signalling within the team indicates implicitly by the way of no resource allocation to addressing &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; or explicitly by dictating that &lt;em&gt;&amp;ldquo;broken windows&amp;rdquo;&lt;/em&gt; are too unimportant to address, the leadership seems to communicate that these are not pivotal to the engineering standards of a team. That in turn leads the team to read in between the lines and doubt where exactly then is the proverbial line in the sand? How much can they let the engineering standards lax before the leadership holds them to account?&lt;/p&gt;
&lt;h2 id=&#34;so-what-exactly-is-a-broken-window-in-a-software-engineering-team-then&#34;&gt;So what exactly is a broken window in a Software Engineering Team then?&lt;/h2&gt;
&lt;p&gt;And this is the most important point - you need to communicate the expectation to the team. Lack of standard for the one Rust program within the full Java based technical estate does not constitute a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. Consistency in communication and expectation setting matters a lot here. If your team&amp;rsquo;s primary language is C# and you do not have a style guide for it, then there is potential for trouble. If people apply different rules in different contexts leading to inconsistency and you do not intervene, then it becomes a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;. There is no hard and fast rule here I think. Use your judgement for the most part but simple few criteria should help you out for the most part&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the issue in question apply broadly across your technical estate? If so it probably is significant enough&lt;/li&gt;
&lt;li&gt;Had you previously communicated that the issue in hand is important enough to have a team-wide consensus?&lt;/li&gt;
&lt;li&gt;Is the excellence or following the best practice in the aspect in question a priority for your wider organization? If so, yes it probably will be a &lt;em&gt;&amp;ldquo;broken window&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-you-should-care-as-a-software-engineering-manager&#34;&gt;Why you should care as a Software Engineering Manager?&lt;/h2&gt;
&lt;p&gt;There are lots of reasons I can list but the following would probably be the top of the list&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cultural Significance: Just as the Broken Window Theory suggests that neglecting visible signs of disorder can create a culture of apathy, allowing cosmetic issues to persist in a codebase or development process can set a precedent for a lack of attention to detail. Over time, this can erode the team&amp;rsquo;s commitment to engineering excellence and high standards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attention to Detail: Software engineering thrives on precision and meticulous attention to detail. Addressing cosmetic issues demonstrates a commitment to getting the small things right. It sends a message that the team values craftsmanship and is dedicated to delivering high-quality software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preventing Technical Debt: Cosmetic issues, if left unaddressed, can accumulate and contribute to technical debt. Technical debt refers to the cost of fixing issues and improving code quality that accrues over time when shortcuts are taken or issues are ignored. By tackling visible but cosmetic issues early, teams can prevent the accumulation of technical debt and maintain a codebase that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Quality and Maintainability: Cosmetic issues, such as inconsistent formatting or poor documentation, can make code less readable and maintainable. This can slow down development and increase the likelihood of introducing bugs during future changes. By addressing these issues, teams ensure that the codebase remains clean, comprehensible, and easier to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhancing Collaboration: Clear and well-maintained code fosters effective collaboration among team members. When everyone can easily understand and work with the code, it reduces the risk of misunderstandings and conflicts. It also allows for smoother code reviews and knowledge sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Professionalism and Customer Perception: Software engineering is a professional discipline, and professionalism extends to the quality of the work produced. Visible cosmetic issues can detract from the professional image of the team and the organization as a whole. Additionally, customers and end-users often judge software quality by its visible aspects, such as user interface design and consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous Improvement: Addressing cosmetic issues is an integral part of a culture of continuous improvement. Teams that are committed to excellence understand that improvement starts with the small details. By consistently addressing these details, teams set themselves up for a cycle of improvement that extends to all aspects of their work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see I may have stolen some talking points from the agile manifesto there. This is not an oversight - I truly do believe in agile teams it is very important that we keep up the engineering excellence lest we lose sight of the trees for the forest and sacrifice technical excellence for business value.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Addressing visible but cosmetic issues is not merely about aesthetics; it&amp;rsquo;s about maintaining a culture of engineering excellence, professionalism, and continuous improvement within a software engineering team. By valuing and addressing these issues, teams can prevent the deterioration of code quality, foster collaboration, and ultimately deliver software that meets high standards and exceeds customer expectations.&lt;/p&gt;
&lt;p&gt;Note :&lt;br&gt;


Photo by &lt;a href=&#34;https://unsplash.com/@christopherphigh?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Christopher Paul High&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/photos/Iv7x6fmJ8Og?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Empathy and Respect in Software Engineering Teams: Actions for a Team Lead</title>
        <link>https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/</link>
        <pubDate>Tue, 29 Aug 2023 00:51:19 +0100</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/respect-and-empathy-in-teams/empathy-banner.jpg" alt="Featured image of post Empathy and Respect in Software Engineering Teams: Actions for a Team Lead" /&gt;&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the world of software engineering, where we mostly think about systems and platforms, where success is measured in SLOs and RPSs there are two things that are crucial to the teams that actually build these software systems: empathy and respect. These two qualities might not be lines of code or algorithms, but they are the heartbeat of cohesive and innovative software engineering teams. This is why it is important for software engineering managers and team leads to be aware of them even though they are not hard technical matters.&lt;/p&gt;
&lt;p&gt;Empathy is the ability to step into another person&amp;rsquo;s shoes and understand their feelings, thoughts, and experiences. It&amp;rsquo;s a nod to the fact that each one of us brings a unique perspective, and by understanding that perspective, we unlock the potential for deeper connections and more meaningful collaborations. Empathy acknowledges that behind every line of code is a coder – someone with aspirations, ideas, and the occasional cup of coffee.&lt;/p&gt;
&lt;p&gt;Respect, on the other hand, is the recognition that every individual, regardless of their role or level of expertise, carries inherent value. It&amp;rsquo;s the understanding that differing opinions aren&amp;rsquo;t roadblocks but rather pathways to better solutions. Respect acknowledges that the act of listening can sometimes be as powerful as typing out a thousand lines of code.&lt;/p&gt;
&lt;p&gt;While empathy is about understanding, respect is about honoring. When these two qualities intertwine, they create a synergy that fuels teams with trust, collaboration, and innovation. Empathy opens the door for open conversations, while respect ensures that those conversations are met with genuine consideration. And fostering good communication is at the centre of building high performance teams&lt;/p&gt;
&lt;h2 id=&#34;putting-empathy-and-respect-in-to-context-in-software-engineering-teams&#34;&gt;Putting Empathy and Respect in to context in Software Engineering Teams&lt;/h2&gt;
&lt;p&gt;But what does that have to do with what we do in our day to day work in our engineering teams? The above descriptions seem quite theoretical and abstract. How can we actually put these in to practice in our day to day work. Let&amp;rsquo;s take a few examples&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Story Refinement:&lt;/p&gt;
&lt;p&gt;Empathy: Understanding the end user&amp;rsquo;s perspective is at the core of story refinement. By putting yourself in the user&amp;rsquo;s shoes, you can ensure that the software you&amp;rsquo;re building meets their needs effectively. This goes twice for backend engineers such as my own team. We like to think that we have less user experience concerns because our clients are not direct customer but other development teams. In truth this is even more important because if we do not design a good, developer friendly, usable API, we will be putting other developers in to unnecessary hardships.&lt;br&gt;
Respect: Respect for diverse viewpoints during story refinement allows for a well-rounded understanding of the problem. Every perspective contributes to a more comprehensive solution. Understand that product owners, UX designers, Data Engineers and various other teams will come at a problem from their own viewpoints. They each bring their own ideas to the table and make sure to consider them all in equal weight so as not to dismiss any ideas out of hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coding:&lt;/p&gt;
&lt;p&gt;Empathy: While coding, empathy is about considering future maintainers. Writing clean, organized code makes it easier for your teammates to understand and collaborate. Remember the old quip - &lt;a class=&#34;link&#34; href=&#34;http://c2.com/cgi/wiki?CodeForTheMaintainer=&amp;amp;ref=blog.codinghorror.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.&amp;rdquo;&lt;/a&gt;.&lt;br&gt;
Respect: Respect for coding standards and conventions maintains consistency across the codebase, making it accessible to everyone who interacts with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Reviews:&lt;/p&gt;
&lt;p&gt;Empathy: During code reviews, empathy involves understanding that mistakes happen. Providing feedback in a constructive and considerate manner promotes a positive learning environment. Make sure to let the team members know that the comments are about making their skills better and making the product better.&lt;br&gt;
Respect: Respectful code reviews acknowledge the effort that went into the code and offer suggestions for improvement without undermining the coder&amp;rsquo;s skills. Understand that the you should make an equal effort to make sure they get good feedback. Make sure they feel good about them when they have done a good job as well. Too often people only offer criticism and while that is important, you should let them know when they have done a good job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build and Release:&lt;/p&gt;
&lt;p&gt;Empathy: In the build and release process, empathy means considering the impact of your changes on other team members and downstream processes. More often than not, when doing releases, we are more concerned about getting the application out and hitting our deadlines. But good practice calls for coordination and advance notification. If you have operations teams - let them know in advance, make a summary of changes and distribute it. If you have folks who are on call in the team, include them in the communications. And most importantly for backend teams (again like my own team!), let the downstream clients know and give them a chance to verify the changes, preferably with you standing by to help if required.&lt;br&gt;
Respect: Respect for the release process and schedule ensures that the efforts of all team members are aligned, minimizing disruptions. Make the necessary changes to allow for other team&amp;rsquo;s practices and conventions. If you need to change things, talk to the other teams, most of the time they will be willing to budge or compromise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Empathy and respect aren&amp;rsquo;t limited to a single activity; they infuse every aspect of software engineering. By understanding each other&amp;rsquo;s roles, appreciating diverse viewpoints, and valuing the collective efforts, software engineers can create a harmonious ecosystem where innovation flourishes and collaboration thrives. So, as you embark on your coding journey, remember that behind every line of code is a world of empathy and respect.&lt;/p&gt;
&lt;h2 id=&#34;the-role-of-a-team-lead&#34;&gt;The Role of a Team Lead&lt;/h2&gt;
&lt;p&gt;As a software engineering team lead, you&amp;rsquo;re not just responsible for managing code; you&amp;rsquo;re entrusted with cultivating an environment where empathy and respect flourish. Your role goes beyond technical guidance, encompassing the creation of a team culture that prioritizes these foundational values. Here&amp;rsquo;s how you can play a pivotal role in fostering a culture centered around empathy and respect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lead by Example:&lt;br&gt;
Demonstrate empathetic and respectful behavior in all your interactions. Your actions set the tone for the entire team. If you do not show empathy and respect in practice, your team will not either.&lt;/li&gt;
&lt;li&gt;Encourage Open Communication:&lt;br&gt;
Promote transparent and open communication channels, encouraging team members to share their perspectives and insights freely. There can be no empathy if people are not openly communicating how they feel. Your team should be able to communicate the need for improved software quality, improved processes and better software engineering culture without feeling like they are personally targeting anyone. Equip them to communicate these ideas properly, and as it says above, lead by example.&lt;/li&gt;
&lt;li&gt;Address Imposter Syndrome:&lt;br&gt;
Provide resources and guidance to help team members navigate imposter syndrome. Offer a support system to bolster confidence and self-assurance. This is crucial in practice I have found. Engineers from more diverse and varied backgrounds often feel like they do not belong and are not worth the position and role they find themselves in. I, myself have gone through this early in my career. As a software team lead it is your responsibility to identify this, and make sure they know their worth and capability. Tell them that having a self respect for their own capability is the first step towards making the team better by using their skills. If they do not feel empowered and compelled to make the team better using their skills, it is game over already.&lt;/li&gt;
&lt;li&gt;Embrace Diversity:&lt;br&gt;
Recognize the significance of diverse viewpoints. Embrace the unique qualities that each team member brings to the table. If your team does not have diverse opinions, take corrective action. Hire for diversity, offer coaching, reward contrary and diverse viewpoints - because homogeneous thinking never improved any team.&lt;/li&gt;
&lt;li&gt;Navigate Conflicts with Empathy:&lt;br&gt;
Address conflicts with empathy and fairness, ensuring that all voices are heard and understood during resolution. As a team leader, the onus will be on you to solve most of the team internal conflicts as well and external conflicts with other teams. Always understand, where they come from and remind yourself that whatever the problem at hand is, all of you are on the same team and have the same goal - make the product better.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your role as a team lead extends far beyond the technical realm. By nurturing a culture steeped in empathy and respect, you lay the foundation for a cohesive, innovative, and high performance software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;case-studies-in-empathy-and-respect-in-software-engineering&#34;&gt;Case Studies in Empathy and Respect in Software Engineering&lt;/h2&gt;
&lt;p&gt;This kind of emphasis is getting quite frequent in software engineering field these days. Take spotify for an example. They have released a developer portal generating tool called backstage and on the &lt;a class=&#34;link&#34; href=&#34;https://engineering.atspotify.com/2022/12/shipping-spotifys-culture-5-plugins-and-4-principles-for-supercharging-developer-experience-at-scale/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post announcing the tool&lt;/a&gt;, they list four principles that they want the users of that tool to follows. They themselves follow the principles as well&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 4. Our fellow developers are our customers, so build with empathy
&amp;gt; 
&amp;gt; Developers deserve as great an experience as our listeners and creators do. 
&amp;gt; Ensure that the tools in the Spotify platform are the right tools for the job — and listen and adapt when they aren’t. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And clever says something similar about their engineering culture as well. Here is a &lt;a class=&#34;link&#34; href=&#34;https://engineering.clever.com/2017/09/06/defining-clevers-engineering-culture/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post&lt;/a&gt; explaining how they value empathy. To quote the interesting bits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Code with Empathy

&amp;gt; We develop software with our customers and our fellow engineers in mind. To gain empathy for our customers, we embed product managers within engineering teams so they may work closely together. We also encourage engineers to participate in product specifications, user testing, and school visits. We choose to write code that is readable over code that is clever or terse, to help our colleagues and future selves read and update the code. We value simplicity as a key ingredient in  software architecture and implementation, as simple systems are easier to maintain, debug, and operate.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is again repeated in various places from &lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/presentations/empathy-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;infoq&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/empathy-secret-sauce-good-software-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;newstack&lt;/a&gt;. But the common theme is the same. Empathy is a key ingredient in a high performing software engineering team.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Remember Empathy is not just a feeling. It is a core part of what makes good teams perform better. It is the thing that keeps the members together and work as a team. What makes the whole greater than the sum of it&amp;rsquo;s parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Respect Enhances Empathy: When you respect someone, you are more likely to listen actively and engage with an open mind. This can lead to a deeper understanding of their feelings and viewpoints, fostering empathy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empathy Deepens Respect: Empathy allows you to see things from another person&amp;rsquo;s perspective, which can lead to a greater appreciation for their uniqueness and the challenges they might be facing. This, in turn, strengthens the respect you have for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Support Positive Relationships: Building relationships based on both respect and empathy creates an environment of trust, understanding, and support. It promotes effective communication and reduces misunderstandings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Counter Conflict: In conflicts or disagreements, both respect and empathy can play essential roles in defusing tension. Showing respect even during disagreements and trying to understand the other person&amp;rsquo;s perspective can prevent conflicts from escalating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, respect and empathy are interconnected values that contribute to healthier and more compassionate interactions. Practicing both in your relationships can lead to better communication, reduced misunderstandings, and a more harmonious environment overall.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
