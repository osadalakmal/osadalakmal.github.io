<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software Engineering on Curiously Recurring Thoughts in Programming</title>
        <link>https://osadalakmal.github.io/tags/software-engineering/</link>
        <description>Recent content in Software Engineering on Curiously Recurring Thoughts in Programming</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Sun, 23 Feb 2025 12:40:47 +0000</lastBuildDate><atom:link href="https://osadalakmal.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>The Case for Being Lazy</title>
        <link>https://osadalakmal.github.io/posts/the-case-for-being-lazy/</link>
        <pubDate>Sun, 23 Feb 2025 12:40:47 +0000</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/the-case-for-being-lazy/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/the-case-for-being-lazy/virtue-of-lazy.webp" alt="Featured image of post The Case for Being Lazy" /&gt;&lt;hr&gt;
&lt;h2 id=&#34;virtue-of-being-lazy&#34;&gt;Virtue of being lazy
&lt;/h2&gt;&lt;p&gt;Some of my favorite works of fiction are Discworld novels. And of the many great characters I got to meet, there was one that particularly drew my attention—Rincewind. In one of the books, we are told that his father has a particular arrangement for him in order to fund his study. He has to get a particular score in his exams, or otherwise, he will stop receiving the stipend from his father (I have to confess that I don&amp;rsquo;t remember the exact marks needed). On the flip side, if he gets even one mark beyond this score, he will be considered by the university to have passed the exam and become a wizard, therefore ending his stipend again because he is supposed to receive the stipend only to study. But—and here is the crucial detail—if and only if he gets this exact score, he will never be considered passed by the Unseen University, nor will his father consider him failed in his studies. And thus is born an ironic endeavor—he now studies harder than any other student so that he can get exactly the marks he wants. And this is ultimately much harder than just passing the exam. So in order to be lazy and receive the stipend, he needs to study more. And thus, he ends up spending far more energy on &lt;em&gt;not&lt;/em&gt; passing the exam than actually passing the exam.&lt;/p&gt;
&lt;p&gt;Why did I start this blog post with that detail? Because this has been my go-to scene for explaining why I think being lazy is a virtue. And why being lazy is actually far more work than not being lazy. Whether we are talking about automating things for TOIL in the SRE field, optimizing systems or algorithms for cost or performance, or building high-performance teams, this theme keeps popping up.&lt;/p&gt;
&lt;h2 id=&#34;example-1--automate-everything&#34;&gt;Example 1 : Automate Everything!
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://osadalakmal.github.io/posts/the-case-for-being-lazy/automate-everything.webp&#34;
	width=&#34;1500&#34;
	height=&#34;1178&#34;
	srcset=&#34;https://osadalakmal.github.io/posts/the-case-for-being-lazy/automate-everything_hu_921a395c35272d73.webp 480w, https://osadalakmal.github.io/posts/the-case-for-being-lazy/automate-everything_hu_d0c491e549c0af91.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Automate Everything&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;TOIL refers to the repetitive, manual, and automatable tasks that are necessary to maintain a service. According to the &lt;a class=&#34;link&#34; href=&#34;https://sre.google/sre-book/eliminating-toil/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google SRE book&lt;/a&gt;, TOIL is work tied to running a production service that tends to be manual, repetitive, automatable, tactical, devoid of enduring value, and that scales linearly as a service grows. Automating TOIL is beneficial because it frees up engineers to focus on more strategic and value-adding activities, reduces human error, and improves the reliability and efficiency of the service. By minimizing TOIL, teams can invest more time in innovation and improving the overall system.&lt;/p&gt;
&lt;p&gt;And this is a central practice in SRE teams because this allows them to differentiate themselves from a pure Ops team where the proverbial pushing buttons is the main activity. The pushing button work gets repetitive and boring, so wouldn&amp;rsquo;t it be nice if we did not have to do that and could just sit back and let the computers, which are good at repetitive work, do that work instead? It would be grand! But the catch is that for us to be lazy and watch the computers do all the work, we first have to work harder, expend more energy than we otherwise would, and automate these tasks. And that should be an upfront cost that we should be comfortable paying. You may have your own yardsticks as to when it becomes sensible to do so, but to automate things on principle takes a lot of conviction, and that is why building a true SRE practice is actually hard, especially in traditional organizations.&lt;/p&gt;
&lt;h2 id=&#34;example-2--finops-on-public-cloud&#34;&gt;Example 2 : FinOps on public cloud
&lt;/h2&gt;&lt;p&gt;FinOps on public cloud is a prime example of investing effort now to save hassle later. Instead of laboriously poring over monthly bills and manually reconciling cloud usage, savvy teams deploy &lt;a class=&#34;link&#34; href=&#34;https://www.finops.org/introduction/what-is-finops/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;automation tools&lt;/a&gt; and real-time dashboards to monitor and optimize spending. By doing so, they can track costs in real-time, set budgets, and receive alerts when spending deviates from expectations. This transforms an otherwise reactive process into a proactive, manageable workflow that keeps financial surprises at bay.&lt;/p&gt;
&lt;p&gt;However, setting up an effective FinOps practice requires significant upfront effort. Teams need to integrate &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/aws-cost-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cost-tracking tools&lt;/a&gt;, configure alerting mechanisms, and continuously refine cost-optimization strategies. While this initial setup demands time and expertise, it ultimately ensures that engineers and finance teams can focus on strategic planning rather than firefighting unexpected cost spikes. Just like automating TOIL, the effort put into FinOps is about making life easier down the road—by working hard now to be lazy later.&lt;/p&gt;
&lt;p&gt;We went through this as a team recently, and creating the tools required to track costs, alert us to anomalies, and remove inefficiencies was hard work, but ultimately, it paid off. Again, the conviction to prioritize this and get it done requires that we believe that initial hard work will pay off in the end.&lt;/p&gt;
&lt;h2 id=&#34;example-3-building-highly-effective-teams&#34;&gt;Example 3: Building highly effective teams
&lt;/h2&gt;&lt;p&gt;I have now spent more than a decade and a half in this industry, and I am beginning to notice a pattern. Most of the old-timers like myself who have been around more than a couple of teams and/or companies have a favorite company or team they keep referring back to. You can notice that straight away when you get into a &amp;ldquo;Yeah, this sucks, but how do we make it better?&amp;rdquo; conversation. And there are ample opportunities for these in any team. Just pick a subject that seems to frustrate them and start talking about what the potential solutions might be, and you will immediately be greeted with a flashback to what they believe was the &amp;ldquo;best team they were in.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The only part they have missed is how much work went into preparing the groundwork for X to be implemented. This is through no fault of their own. We usually focus on the end result much more than the process to get there, and even if we did not, the process itself might not be visible to folks other than the enablers who made it possible.&lt;/p&gt;
&lt;p&gt;Enabling the team to solve their own problems is hard work. It is very tempting to go in and solve the problem at hand. After all, you (think you) know the answer, and if the team just followed your advice, the problem could be solved by lunchtime! But that would be the wrong instinct. Solving the problem for the team is the easy approach. Coaching them to come up with the solution themselves is significantly harder but much more rewarding in the end—and less work for you ultimately. After all, the definition of good in engineering leadership is to coach yourself out of your job!&lt;/p&gt;
&lt;h2 id=&#34;being-lazy-on-principle&#34;&gt;Being Lazy on Principle
&lt;/h2&gt;&lt;p&gt;Like Bret Victor talks about in his now infamous talk in inventing on principle, when you do something, it is better to do it on principle. In any given situation if you think it applies, ask yourself - what will be the way we can solve this by being maximally lazy? This applies to most software engineering decisions being taken in your day to day work. Especially so if you are a staff+ engineer or an engineering manager. What will be the way that you can make sure the work being done for a given task is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maximally reusable - &lt;br&gt;
So you don&amp;rsquo;t have to repeatedly do the same work. This can take many forms in practice. Maybe you want to put all that code shared by all your microservices in to a &lt;a class=&#34;link&#34; href=&#34;https://buoyant.io/2023/06/01/what-is-a-chassis-service/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;chassis service&lt;/a&gt;? Or maybe you want to gather up all the validation logic spread across different build units in to a single linter tool. Or you go the whole hog and create a &lt;a class=&#34;link&#34; href=&#34;https://www.cncf.io/reports/platform-engineering-whitepaper/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;platform around the reusable parts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;completed with least effort - so you &lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;remove any accidental complexity leaving only inherent complexity in&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;maximally automated - so you remove the human from the equation. this decreases mistakes and maximizes utility of your engineers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;transitioning-from-mid-to-senior&#34;&gt;Transitioning from Mid to Senior
&lt;/h2&gt;&lt;p&gt;At every software engineer&amp;rsquo;s professional journey, there will be a time when they transition to being a senior engineer. In my opinion a large part of this is getting rid of the desire to be clever and do smart engineering. We all spent some time in our career being awed by all the amazing clever code we could create with the very sharp tools in our repertoire, whether that is Template Meta Programming in C++ or Monkey Patching in Python or Ruby. And then we wanted to emulate that and write come clever™ code.&lt;/p&gt;
&lt;p&gt;There comes a time when we finally understand that it is more important to be understood and write maintainable code than be clever. That&amp;rsquo;s when you learn to be truly lazy and use a very easy to understand subset of the toolbox available to you and realize that this is a feature and not a bug. You don&amp;rsquo;t have to use the full surface area of your language/framework/platform in order to build successful maintainable products. Be a little lazy. Stick to common things.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Being lazy, when done right, is one of the most powerful tools in an engineer&amp;rsquo;s arsenal. It’s not about avoiding work—it’s about making smart decisions that reduce unnecessary effort in the long run. Whether it’s automating toil, optimizing costs, enabling teams to solve their own problems, or simplifying code for maintainability, the principle remains the same: &lt;strong&gt;invest effort upfront to save exponentially more later&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The best engineers and leaders understand that their job is not to write the most code or build the most complex systems, but to ensure that things are done &lt;strong&gt;in the simplest, most efficient, and most reusable way possible&lt;/strong&gt;. True engineering excellence is knowing &lt;strong&gt;where&lt;/strong&gt; to put in effort and &lt;strong&gt;where&lt;/strong&gt; to step back.&lt;/p&gt;
&lt;p&gt;So, if you ever find yourself in a position where brute force feels like the answer, stop and ask: &lt;em&gt;What’s the laziest way to solve this problem?&lt;/em&gt; Chances are, the best solution is also the one that requires the least ongoing work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be lazy. But be lazy on principle.&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Technical Tasks for Managers</title>
        <link>https://osadalakmal.github.io/posts/technical-tasks-for-managers/</link>
        <pubDate>Sun, 22 Dec 2024 16:18:00 +0000</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/technical-tasks-for-managers/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/technical-tasks-for-managers/marvin-meyer-SYTO3xs06fU-unsplash.webp" alt="Featured image of post Technical Tasks for Managers" /&gt;&lt;h2 id=&#34;what-does-being-technical-mean-for-engineering-team-leads-and-managers&#34;&gt;What does being technical mean for Engineering Team Leads and Managers
&lt;/h2&gt;&lt;p&gt;I have now been in a management position for the better part of a decade and with that milestone comes a bit of a time to reflect back on how the journey has been and what I have learnt along the way. When I first started leading a team formally back in 2019 I had modeled my expectations on what I would be doing on what my managers up until that point had done. And they had mostly done coding. This was a peculiarity of the company I worked for till then. In that situation team leaders were essentially tech leads that also had 1-1s with you occastionally. There was no real personal development planning or coaching or any of the leadership whizz words that you cannot escape from in any of the engineering leadership text books today. They reviewed most of the code and were very hands on, from forming system designs to actually implementing the solutions they did it all.&lt;/p&gt;
&lt;p&gt;But this came at an expense, because most of the time things had to go through them, they became a bottlenek. They may have been the original implementers of the system, they may have at point or the other had the best contextual knowledge of the system. But that is all a hindrance when the system is being continually updated and you are waiting for their approval to move forward with any of the real work. Even worse they had become silos of information that made the bus factor for the most critical parts of the system one. While this did ensure their job security for the most part it made it very hard to change these systems in even the most basic agile manner.&lt;/p&gt;
&lt;p&gt;So if you cannot be the single most knowledgable person and approver of system designs (dare I say should not!), what should a technical mananager do that will help their team? What should being technical mean for the team lead or manager that wants to empower their teams but do not want to be the bottleneck?&lt;/p&gt;
&lt;p&gt;Over the years I have come to believe that there are a few different things to choose from. It isn&amp;rsquo;t much, but it&amp;rsquo;s mine!&lt;/p&gt;
&lt;h3 id=&#34;toil-automation&#34;&gt;TOIL Automation
&lt;/h3&gt;&lt;p&gt;One of the key areas where a technical manager can add value is by automating repetitive tasks, often referred to as &lt;a class=&#34;link&#34; href=&#34;https://sre.google/sre-book/eliminating-toil/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TOIL&lt;/a&gt;. These are tasks that are manual, repetitive, automatable, and devoid of enduring value. Automating TOIL can free up your team&amp;rsquo;s time to focus on more strategic work. As a manager, you might have the broader perspective needed to identify these tasks and the authority to prioritize their automation. This not only improves efficiency but also boosts team morale by reducing the amount of mundane work.&lt;/p&gt;
&lt;p&gt;There are a few reasons why this is a perfect opportunity for your average engineering team lead with an uninterrupted focus time of 30 minutes max.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;These are usually small enough that you can make significant progress in a short time. So being interrupted mid flow is not devastating to the task at hand.&lt;/li&gt;
&lt;li&gt;They are usually not related to the sprint goals and do not necessarily align with sprint goals. If you are running Scrum teams that go more or less by the book, the team may not necessarily have the ability nor the desire to complete these tasks.&lt;/li&gt;
&lt;li&gt;They are ambiguous in nature and may require a broader perspective than the team members are able to provide.&lt;/li&gt;
&lt;li&gt;Last but not least is the fact that you can use AI tooling for the most part to your heart&amp;rsquo;s content. These tend not to be production code deployed to live environments and therefore allow ample use of AI tooling such as CHOP assuming your organization allows it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some of the example tasks include&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data entry/munging/output automation. Imagine generating reports or sending notifications.&lt;/li&gt;
&lt;li&gt;Developer experience tasks. These are tasks like creating glue tooling for various tools and setup automation tasks for tools like editors. Another example was a tool to list old PRs that are still open grouped by person filtered for active members of the team.&lt;/li&gt;
&lt;li&gt;Developer metrics related work. This is where we try to discover data on the workings of the developers. This maybe data on pull requests, build times or may be you are trying out SPACE metrics. In any case you are trying to find data that will help your team be more effective.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last one may need more of an explanation so we will look at that in detail next&lt;/p&gt;
&lt;h3 id=&#34;developer-metrics-related-work&#34;&gt;Developer Metrics Related Work
&lt;/h3&gt;&lt;p&gt;This is one of the tasks I love doing but do not see a whole lot of discussion about. A long time ago I was talking to a person starting out in a devops adjacent role and we were discussing a code review tool that was open sourced by facebook - &lt;a class=&#34;link&#34; href=&#34;https://secure.phabricator.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;phabricator&lt;/a&gt;. The discussion somehow turned to people&amp;rsquo;s habits around code reviews and we both realized even though we had tons of anecdotal examples from our time as software engineers we had no idea to back up the claims we made as habits of software engineers being either code committers or approvers. For example in our combined experience when the code reviewes were rather large, people tended to in general make a couple of superficial comments and then quickly approve the review. When it was smaller and more digestible, ironically approvers tended to be far more thorough and ask a lot more questions. This meant that people had a perverse incentive to make their code changes large and harder to understand and even though no one said this out loud, people had internalized this lesson.&lt;/p&gt;
&lt;p&gt;We decided the best course of action was to come up with statistical evidence to see if this was true. To do that we had to extract the data from the code review tools internal database and crunch with a python script. Note that there was no strategic directive that we had to do it and it was certainly not a product feature. Nevertheless it answered a big question we had and provided us with a way to optimize our developer workflow and avoid bugs.&lt;/p&gt;
&lt;p&gt;Nowadays most observability platforms have tended to acquire features like this and tend to provide features that do a speed run of these kind of tasks. Maybe they provide ready made reports that expose this information or better still they provide a way to generate these using familiar tooling such as SQL. But if they do not, this is one of the areas where you can make a huge difference and not a lot of teams have capacity to work on with the product feature roadmap they currently have.&lt;/p&gt;
&lt;h3 id=&#34;investigative-work-for-the-team&#34;&gt;Investigative Work for the Team
&lt;/h3&gt;&lt;p&gt;With the pace of technology change being what it is, there tends to be a lot of churn in your stacks relatively speaking these days. Gone are the days where using MSVC++ 6.0 for 12 straight years was just good practice. And there are certain trends that mean the technology stacks change fundamentally and not in a one-to-one mapped way like before. A good example of this is the trend towards more managed services that the big PaaS players and SaaS players offer these days. The move from stock Postgres running as RDS on AWS to Aurora Distributed SQL database for operational reasons is one definitive example of this. Another example in Java world is the move from batteries included frameworks like Spring to micro-frameworks like Quarkus and Micronaut.&lt;/p&gt;
&lt;p&gt;These are disruptive changes to implement therefore there should be some investigative work done in order to determine if the team should even consider these items as options to be implemented next. This presents some unique challenges in doing this work. You need to have a good amount of experience in various technologies to know how this new technology works. You should also know enough of the broader context to know how and when your team can use this functionality. And finally you need someone who does not mind the disruptive nature of learning a completely new tool that your team may or may not end up using.&lt;/p&gt;
&lt;p&gt;As a servant leader, this is something that I can do to spare my team and I love doing this kind of work. And as an added bonus if and when a moonshot idea gets implemented, I get to see the fruits of my labour making a real difference to the team!&lt;/p&gt;
&lt;p&gt;As an example, we were always using a personal access token for a GitHub user that we created for interacting with pull requests from our code build. This is not an ideal solution for various different reasons though and not the least of which is that the team has to manually rotate the PAT every n days to comply with the secinfo policy. So I investigated if any of the other teams had done any work to replace this setup with a GitHub app and it turned out yes, some other team had! Then it was a bit more work to talk to them, find out what they did and why they did it. Afterwards, I followed their suggestions, used some of their work to bootstrap mine. Then another couple of weeks wait to get my thread model checked out and approved and then finally I was on the home stretch. It was halting work waiting for input from several other teams and not very amenable to focus time work. And I was happy to take the work and get it done. It meant I had learned up a lot about TS GitHub libraries, GitHub APIs and GitHub apps. The team had a better security model. A win-win situation for all.&lt;/p&gt;
&lt;h3 id=&#34;documentation-cleanup-and-decommission-work&#34;&gt;Documentation, Cleanup and Decommission work
&lt;/h3&gt;&lt;p&gt;Any sizable project will include components similar to what I have stated above. And these are perfect for folk like me who want to contribute but do not have the capacity to complete tasks in the critical path. By their very nature these tasks do not require coordination with other team members and/or other external teams. Documentation is self contained and allows you to get an overall idea of the changes without bothering about the details. Cleanup and decommission work comes at the end of a project and you can usually do them at your lesuire. Again they usually allow you to get an overall idea of what changed when without a lot of nitty gritty details.&lt;/p&gt;
&lt;h2 id=&#34;how-to-choose-what-to-do&#34;&gt;How to choose what to do
&lt;/h2&gt;&lt;p&gt;Again, I have to caveat everything that follows as being what I do. This works for me in my particular circumstance so this YMMV. Buyers beware and all that!&lt;/p&gt;
&lt;p&gt;The best source for these ideas seem to be meetings that you are in. I know it is fashionable to complain about the meetings that you are in as team lead. It is almost customary to at this point when discussing meetings to let out a deep sign and say in a pained voice &amp;ldquo;Yeah, I do my best to pay attention but OMG meetings are so soul crushing&amp;rdquo;. But these same meetings can be a gold mine for ideas to implement by yourself. For me, I use a few meetings for this purpose.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Engineering Discussions with the team where we discuss general engineering matters.&lt;br&gt;
This is a great place to understand pain points of engineers while they are trying to get work done. Often there will be a throwaway comment from an engineer and there will be murmurs of recognition from others and that is your cue. If appropriate, dig in to it in detail by taking a couple of mins or use a followup chat to understand the problem in detail. And then use that understanding to create a followup work item that will permanently address the issue. A great example of this happening was in a previous team of mine where I created a set of CMake Toolchain files that allowed you to debug programs easily in a VM. It all started because someone dejectedly said in a meeting &amp;ldquo;Yeah, well even if we do that It will take half a day to figure out how to build it to work in my VM&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One on One meetings.&lt;br&gt;
Every one tends to do one on one meetings differently and I think it is only right that you tailor your approach to suit the engineer you are talking to. After all your primary goal is to make sure they are doing ok. I tend to use some of the time to understand what their working week was like and what they lacked during that time to make them more productive. This again tends to be a very good idea generation time. You get their undivided attention and you can dig deep to understand what the exact problem is and what they want you to do to fix it. This last part is very important as I have seen numerous cases where we go ahead and implement something that they never had in mind as the solution after just listening to the issue they had but not what the solution might be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end it all comes down to who will benefit from the work you do. It is a bit like that old adge about jobs - &amp;ldquo;At every job you should either learn or earn. Either is fine. Both is best. But if it&amp;rsquo;s neither, quit.&amp;rdquo;. The technical work you do as a manager should benefit you, your team or ideally both. If it is neither then do not take on that work.&lt;/p&gt;
&lt;h2 id=&#34;what-should-your-goals-be&#34;&gt;What should your goals be?
&lt;/h2&gt;&lt;p&gt;When I set out to do technical tasks, I tend to have only a couple of motivations.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to keep doing technical work so I don&amp;rsquo;t become rusty. I guess this is the primary motivation for almost all of us team leads/managers. The more we not practice the art of code, the less likely we are to feel comfortable picking it up again next time when needed. So for that reason look for tasks that actually require you to develop and apply yourself. Do not choose admin work or just rubber stamping work and convince yourself that somehow they count as technical work. You will be lying to yourself and no on else.&lt;/li&gt;
&lt;li&gt;I want to do something that would improve the working environment for my team. I mostly focus on Developer Experience because I am passionate about it and want to advocate for focusing on it. But it can be anything from FinOps to AI tooling that you think will make the most impact for your team as of right now.&lt;/li&gt;
&lt;li&gt;It should allow for your team to take the work you did forward as a continuation. The best kind of work are not throw aways and allows your team to build on top of it. This allows your team to understand the contribution you made and appreciate it. It also allows your team that work like this that they initiate are valuable and appreciated by others.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;i-dont-know-if-i-have-time-for-this&#34;&gt;I don&amp;rsquo;t know if I have time for this
&lt;/h2&gt;&lt;p&gt;You should always set aside time for your own development and this is a very important part of that. Consider ring-fencing this time. Create an appointment in your calendar to block out a time for you to do a bit of focus work. This does not have to be a huge block of work but it has to be enough so you can make enough progress every single day. And you need to commit to it as well, the more consistent you are, the better you become at getting this work done. Do not be afraid to tell other that you have a commitment to some work that you cannot forgo and to please schedule around you.&lt;/p&gt;
&lt;p&gt;It is ok to take a break, there can be extraordinary circumstances that require your full focus but always return back to your goal of getting some technical work done. There is going to be no substitute for putting in the hours.&lt;/p&gt;
&lt;p&gt;And do use the new AI tooling as much as you can. You have experience to make sure that the hallucinations do not get through and impact the work and you know already what the problem to be solved your. You as a senior practitioner are in a perfect place to exploit CHOP to your benefit.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Project Management for Software Engineers</title>
        <link>https://osadalakmal.github.io/posts/project-management-for-software-engineers/</link>
        <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://osadalakmal.github.io/posts/project-management-for-software-engineers/</guid>
        <description>&lt;img src="https://osadalakmal.github.io/posts/project-management-for-software-engineers/daria-nepriakhina-zoCDWPuiRuA-unsplash.webp" alt="Featured image of post Project Management for Software Engineers" /&gt;&lt;h1 id=&#34;project-management-for-software-engineers&#34;&gt;Project Management for Software Engineers
&lt;/h1&gt;&lt;p&gt;Project management can sometimes feel like madness. However, with the right tools and approaches, you can navigate the chaos effectively. This guide focuses on stakeholder management, communication strategies, risk handling, and fostering collaboration—critical skills for every software engineer leading a project.&lt;/p&gt;
&lt;h2 id=&#34;do-we-need-project-management-in-the-age-of-agile&#34;&gt;Do we need project management in the age of agile?
&lt;/h2&gt;&lt;p&gt;Nowadays it is hard to find a software team or company that does not implement some form of agile methodology weather it is Scrum or Kanban or one of the many agile flavors. And a genuine question you might have is, why we need project management skills if we have agile methodologies being implemented in our teams. The key point here is that none of the agile methodologies are project management frameworks. Rather they more or less focus on delivering working software following on from the principles laid out in the Agile Manifesto. They have very little to say about communications with and management of external stakeholders such as customers, executives and other sponsors. Nor are there a special focus on management of risks on the project. In real world very few scrum teams can be completely autonomous so there will be responsibilities distributed across multiple teams. And thus the reason for managing projects outside of the frameworks like scrum.&lt;/p&gt;
&lt;h2 id=&#34;managing-stakeholders&#34;&gt;Managing Stakeholders
&lt;/h2&gt;&lt;p&gt;The largest part of managing an epic or project is understanding and addressing the needs of stakeholders. Here’s how to start:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Stakeholders:&lt;/strong&gt;&lt;br&gt;
Begin by identifying all relevant stakeholders for the project. This includes anyone who will contribute to or be impacted by the project. Sometimes, this process is straightforward, but other times, you may need to dig deeper to uncover less obvious stakeholders. It’s crucial to ensure no group is overlooked, as unidentified stakeholders can later disrupt project progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Group Stakeholders:&lt;/strong&gt;&lt;br&gt;
Once you have a list, categorize stakeholders into meaningful groups. Stakeholder mapping tools can help unearth relationships and interdependencies. For instance, you may group them by their influence, interest, or role in the project. This step lays the foundation for managing their needs effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Engage Effectively:&lt;/strong&gt;&lt;br&gt;
Tailor your engagement strategy to the needs of each stakeholder group. Some stakeholders might require frequent updates, while others might only need periodic reports. Knowing how to address each group ensures their concerns are managed proactively, reducing potential friction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-stakeholder-onion&#34;&gt;The Stakeholder Onion
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/project-management-for-software-engineers/stakeholder-onion.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Example Stakeholder Onion&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The Stakeholder Onion framework helps you understand stakeholder involvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Layer 1:&lt;/strong&gt; Direct contributors, such as developers, designers, and QA engineers, who are integral to building the product.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 2:&lt;/strong&gt; Individuals whose workflows change due to the solution, like support teams or operations staff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 3:&lt;/strong&gt; Sponsors, executives, and subject matter experts who provide guidance and approval but are less involved in day-to-day activities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layer 4:&lt;/strong&gt; External parties like customers, regulators, and suppliers, who influence the project&amp;rsquo;s broader context.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understanding these layers clarifies how and when to engage with each group.&lt;/p&gt;
&lt;h3 id=&#34;stakeholder-mapping&#34;&gt;Stakeholder Mapping
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/project-management-for-software-engineers/stakeholder-quadrant.webp&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Stakeholder Mapping Quadrant Diagram&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Ask the following questions to refine your stakeholder map:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who has the most influence?&lt;/strong&gt; Recognize stakeholders who can accelerate or block progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who is most affected?&lt;/strong&gt; Prioritize those whose success depends on your project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What about key influencers outside the project?&lt;/strong&gt; Identify influential individuals who may not be direct stakeholders but still impact decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who controls resources?&lt;/strong&gt; Pinpoint decision-makers for funding, personnel, or infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What are their motivations?&lt;/strong&gt; Understanding what drives stakeholders helps you align the project goals with their interests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-raci-matrix&#34;&gt;The RACI Matrix
&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://osadalakmal.github.io/posts/project-management-for-software-engineers/raci-matrix-example.webp&#34; width=&#34;75%&#34;/&gt; &lt;figcaption&gt;
                
                    &lt;h4&gt;Example RACI Matrix&lt;/h4&gt;
                
                
            &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The RACI framework defines clear roles and responsibilities, avoiding confusion:&lt;/p&gt;
&lt;p&gt;One of the most powerful frameworks in software project management is RACI, which brings clarity to roles and responsibilities across the team. In complex software projects where multiple stakeholders are involved, understanding who does what can mean the difference between smooth execution and chaotic confusion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;R - Responsible:&lt;/strong&gt; These team members execute tasks and ensure deliverables.&lt;/p&gt;
&lt;p&gt;RACI breaks down team member involvement into four distinct categories. The &amp;ldquo;Responsible&amp;rdquo; individuals are your doers – the developers, designers, and other team members who actively work on tasks and ensure deliverables meet specifications. They&amp;rsquo;re the ones writing the code, creating the designs, or testing the features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A - Accountable:&lt;/strong&gt; This role confirms that tasks are completed as expected.&lt;/p&gt;
&lt;p&gt;This is different from the responsible role in that the accountable person may or may not be the actual doer. But they are ultimately responsible for making sure the task has been completed and meets the expectations of what it consists of. In scrum teams for example, the scrum team is collectively responsible for the stories on the product increment and that it meets the definition of done set by the organization. In practice if the communication happens outside the team it will be either the scrum master or the team that will end up representing the team and being responsible for the delivery of the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C - Consulted:&lt;/strong&gt; These individuals provide input before work is performed.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Consulted&amp;rdquo; category includes subject matter experts and stakeholders whose input is valuable before or during task execution. These might be senior developers offering architectural guidance, security experts providing best practices, or UX specialists sharing user research insights. These for example may come in the form of centers of excellence. A few I have seen over the years are, data analytics, experimentation and security policy. Note that this is an active relationship in that the consultation should happen before the work gets done and will affect how the work gets done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I - Informed:&lt;/strong&gt; Stakeholders who need updates but don’t contribute directly.&lt;/p&gt;
&lt;p&gt;Finally, we have the &amp;ldquo;Informed&amp;rdquo; stakeholders. These individuals need to stay in the loop but don&amp;rsquo;t directly contribute to the work. They could be executives tracking project progress, client representatives monitoring development, or team members whose work might be impacted by changes. These stakeholders are informed in a passive manner and this activity is not in the critical path.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By implementing RACI in software projects, teams can eliminate the all-too-common &amp;ldquo;too many cooks in the kitchen&amp;rdquo; problem. It creates clear lanes of responsibility, streamlines decision-making, and ensures that everyone knows exactly what&amp;rsquo;s expected of them. This clarity is particularly valuable in agile environments where roles and responsibilities might otherwise become blurred during rapid development cycles.&lt;/p&gt;
&lt;h2 id=&#34;communication-management&#34;&gt;Communication Management
&lt;/h2&gt;&lt;p&gt;Clear communication is the backbone of any successful project. Miscommunication can lead to delays, confusion, and even project failure.&lt;/p&gt;
&lt;h3 id=&#34;communications-plan&#34;&gt;Communications Plan
&lt;/h3&gt;&lt;p&gt;At its core, a robust communication strategy in software development rests on five essential elements that work together to ensure smooth information flow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selecting the Right Method&lt;/p&gt;
&lt;p&gt;Communication channels aren&amp;rsquo;t one-size-fits-all. Each project phase and message type demands its own approach. Technical discussions about code architecture might thrive in collaborative tools like Slack or Microsoft Teams, while major milestone updates often deserve dedicated video conferences. Daily standups work best in person or through video calls, while documentation updates can be effectively shared through project management platforms or wikis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Establishing Communication Rhythm&lt;/p&gt;
&lt;p&gt;Consistency is key in project communication. A well-defined cadence helps team members and stakeholders plan their work and expectations. This might mean daily standups for development teams, weekly progress reports for project sponsors, or monthly strategic reviews for executive stakeholders. The key is finding a rhythm that provides timely information without becoming burdensome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Purposeful Communication&lt;/p&gt;
&lt;p&gt;Every message should serve a clear purpose. Status updates should focus on progress, blockers, and next steps. Design reviews need to center on gathering specific feedback. Bug reports must contain steps to reproduce and impact assessments. When team members understand the goal of each communication type, they can provide more focused and actionable information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear Ownership&lt;/p&gt;
&lt;p&gt;Communication ownership prevents the &amp;ldquo;somebody else&amp;rsquo;s problem&amp;rdquo; syndrome. Whether it&amp;rsquo;s the scrum master owning sprint ceremonies, the project manager handling stakeholder updates, or developers responsible for technical documentation, clear ownership ensures nothing falls through the cracks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Audience-Centric Messaging&lt;/p&gt;
&lt;p&gt;Different stakeholders need different levels of detail. Technical teams need specifics about implementation details, while executives might only need high-level progress updates and risk assessments. Tailoring your message to your audience saves time and increases engagement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the most common pitfalls in project communication is overwhelming stakeholders with too much information. Here&amp;rsquo;s how to keep communications lean and effective:&lt;br&gt;
Remember, the goal isn&amp;rsquo;t to communicate more, but to communicate better. By following these principles and remaining mindful of your audience&amp;rsquo;s needs, you can create a communication plan that supports rather than hinders project progress.&lt;/p&gt;
&lt;h2 id=&#34;managing-risks&#34;&gt;Managing Risks
&lt;/h2&gt;&lt;p&gt;Risk management ensures you’re prepared for challenges and can respond effectively when they arise.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Risks:&lt;/strong&gt;&lt;br&gt;
List all potential risks, including technical, financial, and operational threats. For instance, a risk might be a dependency on an unstable vendor or the possibility of budget overruns. A comprehensive list is the first step toward managing risks effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Classify &amp;amp; Prioritize:&lt;/strong&gt;&lt;br&gt;
Not all risks are equal. Classify them based on their likelihood of occurring and the severity of their impact. High-probability, high-impact risks should take precedence in your planning efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Develop Action Plans:&lt;/strong&gt;&lt;br&gt;
For each significant risk, create a plan detailing mitigation strategies. For example, if your project depends on a specific vendor, have an alternative supplier ready in case of delays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor Continuously:&lt;/strong&gt;&lt;br&gt;
Risks evolve over time. Regularly revisit your risk register to identify new risks and reassess existing ones. This keeps your project agile and prepared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Respond to Threats:&lt;/strong&gt;&lt;br&gt;
When a risk materializes, act immediately using your predefined plan. This minimizes disruption and keeps the project on track.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Foster Communication:&lt;/strong&gt;&lt;br&gt;
Encourage team members to share insights about potential risks. Transparent communication allows you to identify issues early, before they escalate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-raid-register&#34;&gt;The RAID Register
&lt;/h3&gt;&lt;p&gt;The RAID framework is a vital tool for managing risks and ensuring project success by bringing structure and clarity to potential challenges. It allows project teams to focus on four key areas: Risks, Assumptions, Issues, and Dependencies. By categorizing and tracking these elements, the RAID register provides a centralized view of project risks and dependencies, improving decision-making and enabling proactive planning.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Risks&lt;/p&gt;
&lt;p&gt;represent potential threats that could disrupt the project or derail its success. These could include technical failures, missed deadlines, or budget overruns. Identifying risks early allows the team to devise mitigation strategies, such as creating contingency plans or allocating additional resources to high-risk areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assumptions&lt;/p&gt;
&lt;p&gt;are the factors or conditions believed to be true for the project to proceed smoothly. For example, the availability of key resources or the reliability of vendors are often significant assumptions. Documenting these assumptions ensures that all stakeholders have a shared understanding of the project&amp;rsquo;s foundational expectations and highlights areas that may require re-evaluation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues&lt;/p&gt;
&lt;p&gt;are the current challenges that need immediate attention. These can range from delays in securing approvals to the dreaded scope creep, where the project&amp;rsquo;s requirements expand without corresponding adjustments to time, budget, or resources. By maintaining a clear record of issues, teams can prioritize their resolution and prevent them from escalating into more significant problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependencies&lt;/p&gt;
&lt;p&gt;refer to external factors that the project relies on for successful completion. These could include third-party integrations, regulatory clearances, or the timely delivery of critical components from suppliers. Tracking dependencies in the RAID register helps identify bottlenecks and plan for alternative solutions if dependencies are not met as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By consolidating all these elements into a single RAID register, teams achieve better visibility into the project&amp;rsquo;s risk landscape. This centralized approach fosters proactive management, enabling teams to address potential pitfalls before they escalate. The RAID framework empowers project managers to make informed decisions, plan effectively, and keep projects on track, ultimately driving more predictable and successful outcomes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;estimates-the-necessary-evil&#34;&gt;Estimates: The Necessary Evil
&lt;/h2&gt;&lt;p&gt;Estimates are an essential part of project management, offering stakeholders a roadmap for planning and decision-making. However, they are inherently uncertain, and managing this uncertainty is key to making them effective and reliable. But refusing to make estimates does not solve any problems. It is just refusing to be accountable. Any organization runs on plans and roadmaps and people depend on those to guide their work and plan for their future work.&lt;/p&gt;
&lt;p&gt;Start by understanding your team’s cadence, which involves learning how your team works, their delivery patterns, and leveraging historical data. This understanding helps you create more accurate and realistic predictions about timelines and workloads. Complement this with visualization tools like Mermaid or draw.io, which can illustrate project timelines, dependencies, and potential bottlenecks, making it easier to communicate the big picture to stakeholders.&lt;/p&gt;
&lt;p&gt;When circumstances change, it’s critical to communicate changes proactively. Updating estimates and informing stakeholders early prevents misunderstandings and helps them adjust their plans accordingly. Finally, treat estimates as an accountability tool. Stakeholders rely on your timelines to plan their activities, so handle this responsibility with care, always striving for transparency and accuracy.&lt;/p&gt;
&lt;p&gt;By following these principles, you can create estimates that are both dependable and adaptable, setting the stage for project success.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;Project management for software engineers goes beyond the scope of agile methodologies, addressing essential areas like stakeholder management, communication, risk mitigation, and collaboration. While agile frameworks focus on delivering working software, project management ensures effective coordination with external stakeholders, proactive risk handling, and clarity in roles and responsibilities.&lt;/p&gt;
&lt;p&gt;This guide emphasizes the importance of identifying and engaging stakeholders using tools like the Stakeholder Onion and the RACI matrix, enabling clear accountability. Communication is highlighted as a cornerstone for success, with practical tips on creating a communication plan tailored to audience needs. Risk management is demystified through the RAID framework, ensuring transparency and preparedness for potential challenges.&lt;/p&gt;
&lt;p&gt;Additionally, the post underscores the value of reliable estimates and their role in guiding stakeholders, as well as fostering a culture of delegation and teamwork. By mastering these elements, software engineers can effectively navigate the complexities of project management, ensuring aligned goals, clear communication, and successful outcomes in an ever-evolving landscape.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
